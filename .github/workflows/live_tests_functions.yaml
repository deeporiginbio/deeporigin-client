name: Test DO Functions 

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Target environment"
        type: choice
        required: true
        default: prod
        options: [edge, staging,prod]


  # Run every day
  schedule:
    - cron: "0 6 * * *"

  # Run on changes to Python files in src/functions/
  push:
    paths:
      - 'src/functions/**/*.py'

jobs:
  test-functions-on-production:
    environment: ${{ inputs.env || 'prod' }}
    runs-on: ubuntu-latest
    env:
      DEEP_ORIGIN_ENV: ${{ inputs.env || 'prod' }}

    steps:
      - uses: actions/checkout@v4
      - name: Select API token
        run: |
          ENV="${{ inputs.env || 'prod' }}"
          if [ "$ENV" = "prod" ]; then
            echo "DEEPORIGIN_TOKEN=${{ secrets.DEEPORIGIN_TOKEN_PROD }}" >> "$GITHUB_ENV"
            echo "DEEPORIGIN_REFRESH_TOKEN=${{ secrets.DEEPORIGIN_REFRESH_TOKEN_PROD }}" >> "$GITHUB_ENV"
          elif [ "$ENV" = "staging" ]; then
            echo "DEEPORIGIN_TOKEN=${{ secrets.DEEPORIGIN_TOKEN_STAGING }}" >> "$GITHUB_ENV"
            echo "DEEPORIGIN_REFRESH_TOKEN=${{ secrets.DEEPORIGIN_REFRESH_TOKEN_STAGING }}" >> "$GITHUB_ENV"
          elif [ "$ENV" = "edge" ]; then
            echo "DEEPORIGIN_TOKEN=${{ secrets.DEEPORIGIN_TOKEN_EDGE }}" >> "$GITHUB_ENV"
            echo "DEEPORIGIN_REFRESH_TOKEN=${{ secrets.DEEPORIGIN_REFRESH_TOKEN_EDGE }}" >> "$GITHUB_ENV"
          fi

      - name: Set environment variables for Client
        run: |
          echo "DEEPORIGIN_ORG_KEY=deeporigin" >> "$GITHUB_ENV"
          echo "DEEPORIGIN_ENV=${{ inputs.env || 'prod' }}" >> "$GITHUB_ENV"
      - uses: actions/setup-python@v5
        with: { python-version: "3.13" }
      - run: pip install .[tools,test,plots]


      - name: Run tests against a live instance
        run: pytest -v -s --log-cli-level=ERROR -k test_functions
