{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>The Deep Origin CLI and Python client allow you to programmatically interact with the Deep Origin platform.</p> <pre><code>from deeporigin.managed_data import api\n\napi.get_row_data(\"data-1\")\n\n # {'Status': 'Processing',\n #  'Age (years)': 15,\n #  'Gender': 'F',\n #  'Order date': '2024-03-01T00:00:00',\n #  'Received by client': '2023-04-05T00:00:00',\n #  'Sent to client': '2024-03-03T00:00:00',\n #  'Sent by client': '2024-03-05T00:00:00',\n #  'Raw reads': ['_file:UjKrB0QibhgBDAVvGQ3VP'],\n #  'Date completed': '2024-03-08T00:00:00',\n # }\n</code></pre>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#for-users","title":"For users","text":"<p>Run the commands below to use your favorite package manager to install the Deep Origin CLI and Python client.</p> <p>Run the following command:</p> pipPipenvPoetry <pre><code>pip install deeporigin\n</code></pre> <p>Warning</p> <p>We recommend installing this package into a virtual environment, using a tool such as venv, pyenv, Pipenv, Poetry, or conda.</p> <pre><code>pipenv install deeporigin\n</code></pre> <pre><code>poetry add deeporigin\n</code></pre>"},{"location":"install.html#for-developers","title":"For developers","text":"<p>Developers only</p> <p>If you intend to contribute this package, we recommend installing this package via the instructions below. If you merely intend to use this package, we recommend following the instructions above.</p>"},{"location":"install.html#get-the-code","title":"Get the code","text":"<p>First, run the following command: <pre><code>git clone git@github.com:formiclabs/deeporigin-client.git\n</code></pre></p>"},{"location":"install.html#install-the-development-dependencies-for-this-package","title":"Install the development dependencies for this package","text":"<p>Second, install Python 3.9+ and make.</p> <p>To verify that both are installed, run the following commands:</p> <pre><code>python3 --version\n# Python 3.12.3\n\nmake --version\n# GNU Make 4.4.1\n</code></pre>"},{"location":"install.html#install-this-package-locally","title":"Install this package locally","text":"<p>Third, navigate to the directory you downloaded the code to, and run the following command:</p> <pre><code>make install\n</code></pre> <p>This will install this package in an \"editable\" mode. In this mode, your changes will take effect immediately.</p>"},{"location":"install.html#running-the-tests-for-this-package","title":"Running the tests for this package","text":"<p>Once installed, you can test this package by running the following command:</p> <pre><code>make test\n</code></pre>"},{"location":"how-to/auth.html","title":"Authenticate to Deep Origin","text":"<p>You can sign into the Deep Origin platform using the Python Client.</p> <pre><code>from deeporigin import sign_into_do_platform\nsign_into_do_platform()\n</code></pre> <p>You will be presented with a prompt that looks like:</p> <p><pre><code>To connect to the Deep Origin platform, navigate your browser to \n\nhttps://&lt;env&gt;auth0.com/activate?user_code=VMPZ-PQFG\n\nand verify the confirmation code is \"VMPZ-PQFG\", and click the \"Confirm\" button.\n</code></pre> Visting that URL, you will see a prompt that looks like:</p> <p></p> <p>On clicking the <code>Confirm</code> button, you are shown:</p> <p></p> <p>and the python client will now return an access and refresh  token. These tokens are also cached to disk and will automatically be used in subsequent interactions. </p> <p>Authenticating</p> <p>You do not need to authenticate every time you use the client or the CLI. Authenticating once, before first use, should be sufficient.</p>"},{"location":"how-to/managed-data/explore-data.html","title":"Explore data","text":""},{"location":"how-to/managed-data/explore-data.html#list-rows","title":"List rows","text":"<p>Rows</p> <p>In this context, a row can mean a database, a workspace, or a row.</p> CLIPython Client <p>To list all workspaces, databases and rows on Deep Origin:</p> <pre><code>deeporigin data ls\n</code></pre> <p>The python client offers a number of ways to list resources  on Deep Origin.</p> <p>First, we start off by importing the necessary modules:</p> <pre><code>from deeporigin.managed_data import _api, api\n</code></pre> <p>We can list rows using:</p> <pre><code>_api.list_rows()\n</code></pre> <p>To find only databases, we add a <code>RowType</code> argument:</p> <pre><code>_api.list_rows(row_type=\"databases\")\n</code></pre>"},{"location":"how-to/managed-data/explore-data.html#list-files","title":"List files","text":"CLIPython Client <p>To list files on Deep Origin:</p> <pre><code>deeporigin data list-files \n</code></pre> <p>This shows a table with file_IDs, names, status, and other information about each file. </p> <p>To list unassigned files, pass the <code>--unassigned</code> flag:</p> <pre><code>deeporigin data list-files --unassigned\n</code></pre> <p>The CLI can also return JSON output that can be piped to a JSON parser:</p> <pre><code>deeporigin data list-files --unassigned --json | jq\n</code></pre> <p>First, we start off by importing the necessary modules:</p> <pre><code>from deeporigin.managed_data._api import list_files\n</code></pre> <p>We can list all files on Deep Origin using:</p> <pre><code>list_files()\n</code></pre> <p>To find only unassigned files, we can use:</p> <pre><code>list_files(is_unassigned=True)\n</code></pre> <p>To find files that are assigned to a specific row:</p> <pre><code>list_files(assigned_row_ids=[\"row-1\"])\n</code></pre>"},{"location":"how-to/managed-data/fetch-data.html","title":"Fetch data","text":""},{"location":"how-to/managed-data/fetch-data.html#fetch-databases","title":"Fetch databases","text":"CLIPython Client <p>Databases can be viewed in the command line using:</p> <pre><code>deeporigin data show-db &lt;id-of-database&gt;\n</code></pre> <p>The CLI can also return JSON output that can be piped to a JSON parser:</p> <pre><code>deeporigin data show-db &lt;id-of-database&gt; --json | jq\n</code></pre> <p>This is useful to quickly view the data in the database.  To save this database to a CSV, use:</p> <pre><code>deeporigin data cp deeporigin://&lt;id-of-database&gt; &lt;local-folder&gt;\n</code></pre> <p>The <code>deeporigin://</code> prefix identifies a resource as existing on Deep Origin, and the <code>cp</code> command downloads  the database as a CSV and all included files are downloaded  to the <code>&lt;local-folder&gt;</code>.</p> <p>Databases can be retrieved as <code>pandas.DataFrame</code>s using:</p> <pre><code>from deeporigin.managed_data.api import get_dataframe\ndf = get_dataframe(\"id-of-database\")\n</code></pre> <p>The dataframe contains all rows and columns of the  database as seen on Deep Origin. This dataframe can be saved to disk, or used for further downstream analysis.</p> <p>By default, files in databases are referred by file names. </p>"},{"location":"how-to/managed-data/fetch-data.html#downloading-files","title":"Downloading files","text":""},{"location":"ref/managed-data/high-level-api.html","title":"API reference: High-level API","text":"<p>How to use this reference</p> <p>This page contains information about each class and function in this module. This is meant as a detailed reference for this module. If you're looking an introduction, we recommend reviewing the How to section.</p> <p>The <code>deeporigin.managed_data.api</code> module contains high-level functions for interacting with Deep Origin managed data.</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.download","title":"download","text":"<pre><code>download(\n    source: str,\n    destination: str,\n    *,\n    include_files: bool = False,\n    client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Download resources from Deep Origin and save them to a local destination.</p> <p>Download databases, objects and other entities from Deep Origin managed data and save them to local disk.</p> Work in progress <p>All features in this function have not been implemented yet.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>ID (or human ID) of a resource on Deep Origin.</p> required <code>destination</code> <code>str</code> <p>Path to local directory to save resources.</p> required <code>include_files</code> <code>bool</code> <p>if <code>True</code>, download files in database.</p> <code>False</code>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.download_database","title":"download_database","text":"<pre><code>download_database(\n    source: Union[str, dict],\n    destination: str = os.getcwd(),\n    *,\n    include_files: bool = False,\n    client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Download a database and save it to a CSV file on the local disk.</p> <p>Download a database from Deep Origin managed data and save to local disk as a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Union[str, dict]</code> <p>ID (or human ID) of a resource on Deep Origin.</p> required <code>destination</code> <code>str</code> <p>Path to local directory to save resources.</p> <code>getcwd()</code> <code>include_files</code> <code>bool</code> <p>if <code>True</code>, download files in database.</p> <code>False</code>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_cell_data","title":"get_cell_data","text":"<pre><code>get_cell_data(\n    *,\n    row_id: str,\n    column_name: str,\n    client: Optional[Client] = None\n) -&gt; Any\n</code></pre> <p>Extract data from a cell in a database, referenced by <code>row_id</code> and <code>column_name</code>.</p> <p>Returns the value in a single cell in a database.</p> Caution <p>This function internally calls get_row_data, so it is not efficient to write a loop to get all values of cells from a row. It will be faster to call get_row_data directly.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row.</p> required <code>column_name</code> <code>str</code> <p>Name of column.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Value of that cell.</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_columns","title":"get_columns","text":"<pre><code>get_columns(\n    row_id: str, *, client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Get information about the columns of a row or database.</p> <p>If <code>row_id</code> is a database, then column metadata and names are returned. If <code>row_id</code> is a row, then a dictionary of human IDs and values are returned.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row or database on Deep Origin.</p> required"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_dataframe","title":"get_dataframe","text":"<pre><code>get_dataframe(\n    database_id: str,\n    *,\n    use_file_names: bool = True,\n    reference_format: IDFormat = \"human-id\",\n    return_type: DatabaseReturnType = \"dataframe\",\n    client: Optional[Client] = None\n)\n</code></pre> <p>Generate a <code>pandas.DataFrame</code> or dictionary for a database.</p> <p>Download a database from Deep Origin managed data and return it as a data frame or dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database on Deep Origin.</p> required <code>use_file_names</code> <code>bool</code> <p>If <code>True</code>, refer to files by name rather than ID.</p> <code>True</code> <code>reference_format</code> <code>IDFormat</code> <p>Refer to rows on Deep Origin using human IDs or system IDs.</p> <code>'human-id'</code> <code>return_type</code> <code>DatabaseReturnType</code> <p>Whether to return a <code>pandas.Dataframe</code> or a dictionary.</p> <code>'dataframe'</code>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_row_data","title":"get_row_data","text":"<pre><code>get_row_data(\n    row_id: str,\n    *,\n    use_column_keys: bool = False,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Get the data in a row.</p> <p>Read data from a row, and return it as a dictionary, where the keys are column names (or keys), and the values are the values of those cells.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row or database on Deep Origin.</p> required <code>use_column_keys</code> <code>bool</code> <p>if <code>True</code>, keys of dictionary are column keys.</p> <code>False</code> <p>Raises:</p> Type Description <code>DeepOriginException</code> <p>If row_id is not a row</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_tree","title":"get_tree","text":"<pre><code>get_tree(\n    *,\n    include_rows: bool = True,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Construct a tree of all workspaces, databases and rows.</p> <p>Returns a tree that contains all workspaces, databases and (optionally) rows. The tree is returned as a dictionary, and children of each object are contained in a field called <code>children</code>.</p> <p>Parameters:</p> Name Type Description Default <code>include_rows</code> <code>bool</code> <p>If <code>True</code>, rows are included in the tree.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary describing the tree structure of all workspaces</p> <code>dict</code> <p>and databases.</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.merge_databases","title":"merge_databases","text":"<pre><code>merge_databases(dfs: list)\n</code></pre> <p>Merge dataframes for multiple databases into a single dataframes.</p> <p>Given a list of dataframes derived from Deep Origin databases, merge them into a single dataframe, resolving cross-references across the databases.</p> Work in progress <p>All features in this function have not been implemented yet.</p> <p>Parameters:</p> Name Type Description Default <code>dfs</code> <code>list</code> <p>List of <code>pandas.DataFrames</code>.</p> required"},{"location":"ref/managed-data/low-level-api.html","title":"API reference: Low-level API","text":"<p>How to use this reference</p> <p>This page contains information about each class and function in our low-level API. This is meant as a detailed reference for this module. If you're looking an introduction, we recommend reviewing the How to section.</p> <p>The <code>deeporigin.managed_data._api</code> module contains low-level functions for interacting with Deep Origin's managed data API. The functions in this module simply provide Pythonic interfaces to individual API endpoints.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.convert_id_format","title":"convert_id_format","text":"<pre><code>convert_id_format(\n    *,\n    hids: Optional[Union[list[str], set[str]]] = None,\n    ids: Optional[Union[list[str], set[str]]] = None,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Convert a list of human IDs to IDs or vice versa.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.create_file_download_url","title":"create_file_download_url","text":"<pre><code>create_file_download_url(\n    file_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>CreateFileDownloadUrl</code> endpoint.</p> <p>Returns a pre-signed URL that allows you to download a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>ID of file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a field <code>downloadUrl</code>, that</p> <code>dict</code> <p>contains a AWS pre-signed URL.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.describe_database_stats","title":"describe_database_stats","text":"<pre><code>describe_database_stats(\n    database_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>DescribeDatabaseStats</code> endpoint.</p> <p>Returns a dictionary of statistics about a database.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of the database.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains statistics about the database.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.describe_file","title":"describe_file","text":"<pre><code>describe_file(\n    file_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>DescribeFile</code> endpoint.</p> <p>Returns a description of file, including S3 URI, name, status, content length, and type.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>ID of file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a file description, that conforms to DescribeFileResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.describe_row","title":"describe_row","text":"<pre><code>describe_row(\n    row_id: str,\n    *,\n    fields: bool = False,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>DescribeRow</code> endpoint.</p> <p>Returns a description of a row or a database</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID or (human ID) or row or database.</p> required <code>fields</code> <code>bool</code> <p>if True, a fields item is returned in the response.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a row description, that</p> <code>dict</code> <p>conforms to DescribeRowResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.download_file","title":"download_file","text":"<pre><code>download_file(\n    file_id: str,\n    *,\n    destination: str = os.getcwd(),\n    client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Download a file to a destination folder.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_database_rows","title":"list_database_rows","text":"<pre><code>list_database_rows(\n    row_id: str, *, client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Low level function that wraps the <code>ListDatabaseRows</code> endpoint.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_files","title":"list_files","text":"<pre><code>list_files(\n    *,\n    assigned_row_ids: Optional[list[str]] = None,\n    is_unassigned: Optional[bool] = None,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Low level function that wraps the <code>ListFiles</code> endpoint.</p> <p>Returns a list of files from databases and rows based on row assigned to.</p> <p>Parameters:</p> Name Type Description Default <code>assigned_row_ids</code> <code>Optional[list[str]]</code> <p>ID (or human ID) or the assigned row.</p> <code>None</code> <code>is_unassigned</code> <code>Optional[bool]</code> <p>Whether file is assigned to any row.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>A list of dictionaries, where each entry corresponds to a file. Each dictionary contains a field called <code>file</code> that corresponds conforms to a DescribeFileResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_mentions","title":"list_mentions","text":"<pre><code>list_mentions(\n    query: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>ListMentions</code> endpoint.</p> <p>Returns a dictionary of mentions (cross references) of the requested object.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>ID (or human ID) of row, database, workspace, or file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a field called <code>mentions</code>, which is a list of dictionaries that each refer to a row.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_row_back_references","title":"list_row_back_references","text":"<pre><code>list_row_back_references(\n    row_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>ListRowBackReferences</code> endpoint.</p> <p>Returns a dictionary of back references from the queried row.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of row.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a field called <code>rows</code>, which is a list of dictionaries that each refer to a database row.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_rows","title":"list_rows","text":"<pre><code>list_rows(\n    *,\n    parent_id: Optional[str] = None,\n    row_type: Optional[RowType] = None,\n    parent_is_root: Optional[bool] = None,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Low level function that wraps the <code>ListRows</code> endpoint.</p> <p>Returns a list of rows from workspaces and databases, based on the parent, row type, or whether the parent is the root.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>Optional[str]</code> <p>ID (or human ID) or the parent.</p> <code>None</code> <code>row_type</code> <code>Optional[RowType]</code> <p>One of <code>row</code>, <code>workspace</code>, or <code>database</code>.</p> <code>None</code> <code>parent_is_root</code> <code>Optional[bool]</code> <p>If <code>True</code> only rows that are children of the root will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>A list of dictionaries, where each entry corresponds to a row. Each dictionary conforms to a ListRowsResponse.</p>"},{"location":"ref/managed-data/low-level-schema.html","title":"Low-level response schemas","text":"<p>The <code>deeporigin.managed_data.schema</code> module contains Pydantic <code>BaseModel</code>s that describe responses from Deep Origin's managed data API, and literals that describe possible values for certain queries.</p> <p>These models are used both to validate responses and to generate mock data for testing.</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DataType","title":"DataType  <code>module-attribute</code>","text":"<pre><code>DataType = Literal[\n    \"integer\",\n    \"str\",\n    \"select\",\n    \"date\",\n    \"text\",\n    \"file\",\n    \"reference\",\n    \"editor\",\n]\n</code></pre> <p>Type of a column</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DatabaseReturnType","title":"DatabaseReturnType  <code>module-attribute</code>","text":"<pre><code>DatabaseReturnType = Literal['dataframe', 'dict']\n</code></pre> <p>Return type of a database</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.FileStatus","title":"FileStatus  <code>module-attribute</code>","text":"<pre><code>FileStatus = Literal['ready', 'archived']\n</code></pre> <p>Status of a file</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.IDFormat","title":"IDFormat  <code>module-attribute</code>","text":"<pre><code>IDFormat = Literal['human-id', 'system-id']\n</code></pre> <p>Format of an ID</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.RowType","title":"RowType  <code>module-attribute</code>","text":"<pre><code>RowType = Literal['row', 'database', 'workspace']\n</code></pre> <p>Type of a row</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.ColumnItem","title":"ColumnItem","text":"<p>             Bases: <code>BaseModel</code></p> <p>Schema for items in the <code>cols</code> attribute of responses from the <code>DescribeRow</code> endpoint for a database.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class ColumnItem(BaseModel):\n    \"\"\"Schema for items in the `cols` attribute of responses from the `DescribeRow` endpoint for a database.\"\"\"\n\n    id: str\n    name: str = \"Placeholder Name\"\n    key: str\n    parentId: str = \"db-placeholder-1\"\n    type: DataType = \"text\"\n    dateCreated: str = \"2024-04-04T17:03:33.033115\"\n    cardinality: str = \"one\"\n    canCreate: Optional[bool] = False\n    configSelect: Optional[dict] = None\n\n    class Config:\n        extra = \"forbid\"\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeFileResponse","title":"DescribeFileResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>DescribeFile</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeFileResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `DescribeFile` endpoint.\"\"\"\n\n    id: str\n    uri: str\n    name: str = \"placeholder\"\n    status: FileStatus\n    contentLength: int\n    contentType: str\n\n    class Config:\n        extra = \"forbid\"\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeRowResponse","title":"DescribeRowResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>DescribeRow</code> endpoint. This schema is complex because the response schema depends on whether <code>DescribeRow</code> is called for a row or database.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeRowResponse(BaseModel):\n    \"\"\"Schema for responses from the `DescribeRow` endpoint. This schema is complex because\n    the response schema depends on whether `DescribeRow` is called for a row or database.\"\"\"\n\n    id: str\n    hid: str\n\n    parentId: str\n    type: RowType = \"row\"\n    dateCreated: str = \"2024-04-04 16:33:58.622469\"\n    dateUpdated: str = \"2024-04-04 16:33:58.622469\"\n    createdByUserDrn: str = \"placeholder\"\n    rowJsonSchema: dict = {\"type\": \"object\", \"required\": [], \"properties\": {}}\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeRowResponseDatabase","title":"DescribeRowResponseDatabase","text":"<p>             Bases: <code>DescribeRowResponse</code></p> <p>Schema for responses for the <code>DescribeRow</code> endpoint for a database.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeRowResponseDatabase(DescribeRowResponse):\n    \"\"\"Schema for responses for the `DescribeRow` endpoint for a database.\"\"\"\n\n    cols: list\n    hidPrefix: str\n    name: str\n\n    class Config:\n        extra = \"forbid\"\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeRowResponseRow","title":"DescribeRowResponseRow","text":"<p>             Bases: <code>DescribeRowResponse</code></p> <p>Schema for responses from the <code>DescribeRow</code> endpoint for a row. This is also the schema for responses from the <code>DescribeDatabaseRows</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeRowResponseRow(DescribeRowResponse):\n    \"\"\"Schema for responses from the `DescribeRow` endpoint for a row.\n    This is also the schema for responses from the `DescribeDatabaseRows` endpoint.\"\"\"\n\n    fields: Optional[list[FieldItem]] = None\n    editedByUserDrn: str = \"placeholder\"\n    hidNum: int = 1\n    submissionStatus: str = \"draft\"\n    validationStatus: str = \"valid\"\n\n    class Config:\n        extra = \"forbid\"\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.FieldItem","title":"FieldItem","text":"<p>             Bases: <code>BaseModel</code></p> <p>Schema for items in the <code>fields</code> attribute of responses from the <code>DescribeRow</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class FieldItem(BaseModel):\n    \"\"\"Schema for items in the `fields` attribute of responses from\n    the `DescribeRow` endpoint.\"\"\"\n\n    columnId: str\n    cellId: str\n    validationStatus: str = \"valid\"\n    type: DataType = \"text\"\n    value: Union[str, dict, int] = \"placeholder-text\"\n    systemType: Optional[str] = None\n\n    class Config:\n        extra = \"forbid\"\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.ListRowsResponse","title":"ListRowsResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>ListRows</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class ListRowsResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `ListRows` endpoint.\"\"\"\n\n    id: str\n    parentId: Optional[str]\n    hid: str\n    name: Optional[str] = \"placeholder\"\n    type: RowType\n\n    class Config:\n        extra = \"forbid\"\n</code></pre>"}]}