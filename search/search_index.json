{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Deep Origin Python client","text":"<ul> <li> Access Deep Origin resources Work with your Deep Origin data, variables, secrets, and other resources through a CLI or Python.</li> <li> Free and open-source Install onto your computer to use your data, variables, secrets, and other resources outside Deep Origin.</li> <li> Easy to install Just run <code>pip install deeporigin</code>.</li> <li> Pure Python Lightweight, written in pure Python. Works on any system that can run Python.</li> </ul>"},{"location":"index.html#examples","title":"Examples","text":"<p>The Deep Origin CLI and Python client allow you to programmatically interact with the Deep Origin OS . The example below illustrates how to use the CLI and Python library to retrieve the database row with ID <code>data-1</code>.</p> TerminalPython <pre><code>deeporigin data show data-1\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Column      \u2502 Value                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Boolean     \u2502 False                        \u2502\n\u2502 Float       \u2502 112                          \u2502\n\u2502 Select      \u2502 sdsd                         \u2502\n\u2502 Date        \u2502 2024-06-19 00:00:00          \u2502\n\u2502 File        \u2502 _file:hnU7F62xeW8j0l1kR7YP1  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>from deeporigin.data_hub import api\n\napi.get_row_data(\"data-1\")\n\n# {'Status': 'Processing',\n#  'Age (years)': 15,\n#  'Gender': 'F',\n#  'Order date': '2024-03-01T00:00:00',\n#  'Received by client': '2023-04-05T00:00:00',\n#  'Sent to client': '2024-03-03T00:00:00',\n#  'Sent by client': '2024-03-05T00:00:00',\n#  'Raw reads': ['_file:UjKrB0QibhgBDAVvGQ3VP'],\n#  'Date completed': '2024-03-08T00:00:00',\n# }\n</code></pre>"},{"location":"changelog.html","title":"Changelog","text":""},{"location":"changelog.html#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. Dates are displayed in UTC.</p> <p>Generated by <code>auto-changelog</code>.</p>"},{"location":"changelog.html#3140","title":"3.14.0","text":"<p>21 March 2025</p> <ul> <li>feat: ability to view docking results in 3D <code>#166</code></li> </ul>"},{"location":"changelog.html#3130","title":"3.13.0","text":"<p>20 March 2025</p> <ul> <li>feat: overhauled docs <code>#164</code></li> <li>Bugfixes mar 18 2 <code>#163</code></li> <li>core: added comments about PyPI actions <code>#162</code></li> <li>fix: another small bugfix <code>#161</code></li> </ul>"},{"location":"changelog.html#3121","title":"3.12.1","text":"<p>18 March 2025</p> <ul> <li>fix: small bugfixes <code>#160</code></li> </ul>"},{"location":"changelog.html#312","title":"3.12","text":"<p>18 March 2025</p> <ul> <li>Small fixes and improvements <code>#159</code></li> <li>Fixes 17 mar <code>#158</code></li> <li>fix: mistakes in docs <code>#157</code></li> <li>feat: simpler install <code>#156</code></li> </ul>"},{"location":"changelog.html#3111","title":"3.11.1","text":"<p>17 March 2025</p> <ul> <li>feat: switched all docs to be python-first <code>#155</code></li> </ul>"},{"location":"changelog.html#3110","title":"3.11.0","text":"<p>17 March 2025</p> <ul> <li>New Complex class, better support for ABFE/RBFE/Docking <code>#154</code></li> </ul>"},{"location":"changelog.html#3100","title":"3.10.0","text":"<p>11 March 2025</p> <ul> <li>RBFE + docking support <code>#153</code></li> </ul>"},{"location":"changelog.html#390","title":"3.9.0","text":"<p>10 March 2025</p> <ul> <li>feat: improvements to SDF tools <code>#152</code></li> </ul>"},{"location":"changelog.html#381","title":"3.8.1","text":"<p>5 March 2025</p> <ul> <li>Abfe improvements <code>#151</code></li> </ul>"},{"location":"changelog.html#380","title":"3.8.0","text":"<p>5 March 2025</p> <ul> <li>Support for new FEP class that can do both ABFE and RBFE <code>#150</code></li> </ul>"},{"location":"changelog.html#370","title":"3.7.0","text":"<p>3 March 2025</p> <ul> <li>ABFE tools improvements <code>#149</code></li> <li>feat: better abfe workflow <code>#148</code></li> </ul>"},{"location":"changelog.html#360","title":"3.6.0","text":"<p>3 February 2025</p> <ul> <li>chore: bump platform SDK to 2.0.0 <code>#147</code></li> </ul>"},{"location":"changelog.html#350","title":"3.5.0","text":"<p>31 January 2025</p> <ul> <li>FEP: tooling to run ABFE <code>#146</code></li> <li>feat: update draco docs <code>#145</code></li> <li>feat: interrupting wait_for_jobs leads to a clean exit <code>#144</code></li> </ul>"},{"location":"changelog.html#340","title":"3.4.0","text":"<p>23 January 2025</p> <ul> <li>feat: high level toolkit for running ligand and docking <code>#143</code></li> <li>fix: reverting change in auth_domain <code>#142</code></li> </ul>"},{"location":"changelog.html#330","title":"3.3.0","text":"<p>15 January 2025</p> <ul> <li>feat: dashboard for jobs <code>#139</code></li> <li>feat: added images of databases <code>#141</code></li> <li>feat: better docs <code>#140</code></li> </ul>"},{"location":"changelog.html#320","title":"3.2.0","text":"<p>8 January 2025</p> <ul> <li>Draco <code>#133</code></li> <li>Better errors <code>#138</code></li> <li>feat: added pdb-&gt;pdbqt conferter <code>#137</code></li> </ul>"},{"location":"changelog.html#310","title":"3.1.0","text":"<p>2 January 2025</p> <ul> <li>feat: updated changelog <code>#136</code></li> <li>feat: more tool wrappers, more docs, assorted bugfixes <code>#135</code></li> <li>feat: simpler tool execution code <code>#134</code></li> <li>Fix conda docs <code>#132</code></li> <li>feat: tooling to run autodock vina on deep origin <code>#131</code></li> <li>Support for filtering rows in a database <code>#130</code></li> </ul>"},{"location":"changelog.html#305","title":"3.0.5","text":"<p>9 December 2024</p> <ul> <li>fix: works with new auth_domain <code>#129</code></li> </ul>"},{"location":"changelog.html#304","title":"3.0.4","text":"<p>4 December 2024</p> <ul> <li>fix: limit-python-version to 3.10+ <code>#128</code></li> <li>fix: dropped 3.9 <code>#127</code></li> </ul>"},{"location":"changelog.html#303","title":"3.0.3","text":"<p>3 December 2024</p> <ul> <li>fix: fixed a bug where expressions weren't being handled correctly in\u2026 <code>#126</code></li> </ul>"},{"location":"changelog.html#302","title":"3.0.2","text":"<p>2 December 2024</p> <ul> <li>fix: fix for dangerous indexing <code>#125</code></li> </ul>"},{"location":"changelog.html#301","title":"3.0.1","text":"<p>2 December 2024</p> <ul> <li>fix: bumped to v29 of SDK for httpx workaround <code>#124</code></li> <li>fix: removed ensure_client decorator <code>#122</code></li> <li>fix: removed download_file <code>#121</code></li> <li>fix: only patch the action <code>#120</code></li> <li>fix: better handling of text responses <code>#118</code></li> </ul>"},{"location":"changelog.html#300","title":"3.0.0","text":"<p>22 November 2024</p> <ul> <li>fix: start pr <code>#117</code></li> <li>Add rows <code>#115</code></li> <li>Support for platform API <code>#116</code></li> <li>Refactor of test stack <code>#114</code></li> <li>Live tests 2 <code>#113</code></li> <li>fix: parallelized tests <code>#112</code></li> <li>Live tests <code>#111</code></li> </ul>"},{"location":"changelog.html#253","title":"2.5.3","text":"<p>14 November 2024</p> <ul> <li>fix: fixed more type mismatch issues <code>#110</code></li> </ul>"},{"location":"changelog.html#252","title":"2.5.2","text":"<p>14 November 2024</p> <ul> <li>fix: hotfix for malformed types <code>#109</code></li> <li>fix: annotation improvements <code>#107</code></li> </ul>"},{"location":"changelog.html#251","title":"2.5.1","text":"<p>29 October 2024</p> <ul> <li>fix: bugfixes and debug hooks <code>#106</code></li> </ul>"},{"location":"changelog.html#250","title":"2.5.0","text":"<p>29 October 2024</p> <ul> <li>feat: moving to hover callback <code>#105</code></li> <li>refactor: moved JS callback into its own file <code>#104</code></li> <li>fix: insertion of series data into dataframe <code>#102</code></li> <li>fix: attempt to fix custom domain reset <code>#103</code></li> <li>fix: fixed site url <code>#101</code></li> <li>feat: ability to make plots from Deep Origin dataframes <code>#100</code></li> </ul>"},{"location":"changelog.html#241","title":"2.4.1","text":"<p>25 October 2024</p> <ul> <li>fix: fixed a bug in adding string columns <code>#99</code></li> </ul>"},{"location":"changelog.html#240","title":"2.4.0","text":"<p>24 October 2024</p> <ul> <li>feat: added changelog for new version <code>#98</code></li> <li>feat: slicing a dataframe using <code>loc</code> preserves attributes <code>#97</code></li> <li>fix: better typing for dataframes <code>#96</code></li> <li>feat: ability to delete terminated workstations <code>#94</code></li> <li>fix: suppress message about new version on lambda <code>#93</code></li> <li>feat: ability to decode tokens <code>#92</code></li> <li>fix: added docstrings for all modules <code>#91</code></li> <li>fix: fixed a bug where expired tokens were not being refreshed <code>#90</code></li> <li>feat: added ability to compute hash on file upload <code>#89</code></li> </ul>"},{"location":"changelog.html#230","title":"2.3.0","text":"<p>7 October 2024</p> <ul> <li>feat: added ability to download files in parallel <code>#88</code></li> </ul>"},{"location":"changelog.html#221","title":"2.2.1","text":"<p>3 October 2024</p> <ul> <li>fix: we don't send the hash <code>#87</code></li> </ul>"},{"location":"changelog.html#220","title":"2.2.0","text":"<p>3 October 2024</p> <ul> <li>refactor: dropped support for graphql secrets and variables <code>#86</code></li> <li>refactor: split up utils into different modules <code>#85</code></li> <li>feat: support for passing sha256 checksum to upload_file <code>#84</code></li> <li>fix: more bugfixes &amp; improvements <code>#83</code></li> <li>fix: added list_files method back, matching docs <code>#81</code></li> </ul>"},{"location":"changelog.html#214","title":"2.1.4","text":"<p>19 September 2024</p> <ul> <li>fix: dataframe printing errors shouldn't cause an error <code>#79</code></li> </ul>"},{"location":"changelog.html#213","title":"2.1.3","text":"<p>18 September 2024</p> <ul> <li>fix: check <code>file_ids</code> length prior to listing files <code>#78</code></li> </ul>"},{"location":"changelog.html#212","title":"2.1.2","text":"<p>5 September 2024</p> <ul> <li>fix: version number printed correctly <code>#77</code></li> <li>fix: better testing for config <code>#76</code></li> <li>feat: much faster file name resolution using ListFiles <code>#75</code></li> </ul>"},{"location":"changelog.html#211","title":"2.1.1","text":"<p>29 August 2024</p> <ul> <li>fix: number of small bugfixes with dataframes <code>#74</code></li> </ul>"},{"location":"changelog.html#210","title":"2.1.0","text":"<p>22 August 2024</p> <ul> <li>feat: better way of interacting with databases <code>#72</code></li> <li>fix: fixed some small bugs <code>#71</code></li> </ul>"},{"location":"changelog.html#205","title":"2.0.5","text":"<p>13 August 2024</p> <ul> <li>feat: updated to new version of deleting database columns <code>#70</code></li> </ul>"},{"location":"changelog.html#204","title":"2.0.4","text":"<p>9 August 2024</p> <ul> <li>feat(docs): minor edits to docs <code>#69</code></li> <li>feat: ability to create/delete objects <code>#68</code></li> <li>feat: clarified and standardized error messages <code>#67</code></li> </ul>"},{"location":"changelog.html#203","title":"2.0.3","text":"<p>7 August 2024</p> <ul> <li>Minor improvements and bug fixes <code>#66</code></li> <li>Updates to documentation  <code>#65</code></li> <li>feat: changed 'document' terminology to 'notebook' <code>#64</code></li> <li>fix: minor improvements <code>#63</code></li> <li>feat: clarified the help strings of the data hub in the CLI <code>#62</code></li> <li>fix: removed a file that shouldn't be included <code>#60</code></li> <li>ci: changed codeowners from documentation writers to platform documentation writers <code>#61</code></li> </ul>"},{"location":"changelog.html#202","title":"2.0.2","text":"<p>31 July 2024</p> <ul> <li>fix: many small fixes to python client <code>#59</code></li> <li>fix: fixed a bug in get_dataframe where HID prefix had a - <code>#58</code></li> </ul>"},{"location":"changelog.html#201","title":"2.0.1","text":"<p>30 July 2024</p> <ul> <li>docs: clarified configuration documentation <code>#57</code></li> </ul>"},{"location":"changelog.html#200","title":"2.0.0","text":"<p>29 July 2024</p> <ul> <li>feat: refined UX and docs <code>#56</code></li> <li>Updated and modernized docs and CLI <code>#55</code></li> <li>refactor: switched to low-level generated code <code>#54</code></li> </ul>"},{"location":"changelog.html#160","title":"1.6.0","text":"<p>9 July 2024</p> <ul> <li>feat: disabled printing context for compute cluster and hardware which the platform no longer provides <code>#53</code></li> <li>fix: dataframe better matches DB <code>#50</code></li> <li>feat: nicer headers for docs <code>#48</code></li> <li>chore: added documentation writers and designers to code owners <code>#49</code></li> <li>feat(docs): updated theme to new brand identity <code>#47</code></li> </ul>"},{"location":"changelog.html#150","title":"1.5.0","text":"<p>21 June 2024</p> <ul> <li>Support for uploading data  <code>#46</code></li> <li>feat: expanded docs to talk about uploading files <code>#45</code></li> </ul>"},{"location":"changelog.html#142","title":"1.4.2","text":"<p>13 June 2024</p> <ul> <li>fix: URLs for nucleus now have a trailing slash <code>#44</code></li> </ul>"},{"location":"changelog.html#141","title":"1.4.1","text":"<p>12 June 2024</p> <ul> <li>feat: shortcut when running in AWS lambda; read config values from env <code>#43</code></li> </ul>"},{"location":"changelog.html#140","title":"1.4.0","text":"<p>11 June 2024</p> <ul> <li>feat: supports reading tokens from env <code>#42</code></li> </ul>"},{"location":"changelog.html#132","title":"1.3.2","text":"<p>11 June 2024</p> <ul> <li>fix: fixed client not having the right props <code>#41</code></li> </ul>"},{"location":"changelog.html#131","title":"1.3.1","text":"<p>11 June 2024</p> <ul> <li>fix: fixed a bug where attributes were't being set correctly <code>#40</code></li> </ul>"},{"location":"changelog.html#130","title":"1.3.0","text":"<p>11 June 2024</p> <ul> <li>feat(client): client can now be configured without config files <code>#39</code></li> <li>fix: renamed formiclabs to deeporiginbio <code>#38</code></li> <li>Dataframe improvements <code>#37</code></li> <li>fix: set default configuration to production settings <code>#35</code></li> </ul>"},{"location":"changelog.html#120","title":"1.2.0","text":"<p>29 May 2024</p> <ul> <li>refactor(testing): moved mock client out of source <code>#34</code></li> <li>fix(managed-data): improvemented to managed-data <code>#33</code></li> </ul>"},{"location":"changelog.html#011","title":"0.1.1","text":"<p>17 May 2024</p> <ul> <li>fix(CLI): fixed a bug where <code>deep-origin</code> was still being used <code>#32</code></li> <li>fix(docs): added info about variables <code>#31</code></li> <li>feat(docs): added pypi badge <code>#29</code></li> </ul>"},{"location":"changelog.html#010","title":"0.1.0","text":"<p>10 May 2024</p> <ul> <li>refactor(CLI): overhauled how tokens are handled and cached <code>#28</code></li> <li>feat(managed-data): support for more functionality <code>#26</code></li> <li>fix(testing): re-enabled test on windows <code>#27</code></li> <li>fix(testing): added windows tests <code>#25</code></li> </ul>"},{"location":"changelog.html#007","title":"0.0.7","text":"<p>2 May 2024</p> <ul> <li>refactor(CLI): removed a controller and added a config command <code>#24</code></li> <li>fix(managed-data): many small improvements <code>#23</code></li> </ul>"},{"location":"changelog.html#006","title":"0.0.6","text":"<p>1 May 2024</p> <ul> <li>fix(managed-data): fixed a bug with multiple root items <code>#22</code></li> </ul>"},{"location":"changelog.html#005","title":"0.0.5","text":"<p>1 May 2024</p> <ul> <li>feat(infra): avoided error messages in repeated installations <code>#20</code></li> <li>fix(managed-data): fixed a bug in dynamic git version <code>#21</code></li> <li>feat(docs): expanded docs to show auth <code>#19</code></li> </ul>"},{"location":"changelog.html#004","title":"0.0.4","text":"<p>26 April 2024</p> <ul> <li>feat(docs): expanded docs <code>#18</code></li> <li>feat(docs): refined documentation <code>#17</code></li> <li>Started work on documentation system + support for merging DBs from CLI <code>#16</code></li> <li>fix(testing): better coverage <code>#15</code></li> <li>fix(infra): better install that links the executable <code>#14</code></li> <li>feat(pypi): publishing to pypi <code>#13</code></li> </ul>"},{"location":"changelog.html#003","title":"0.0.3","text":"<p>18 April 2024</p> <ul> <li>feat(pypi): ready to publish <code>937e78e</code></li> </ul>"},{"location":"changelog.html#002","title":"0.0.2","text":"<p>18 April 2024</p> <ul> <li>fix(pypi): restoring author info <code>55204f0</code></li> </ul>"},{"location":"changelog.html#001","title":"0.0.1","text":"<p>18 April 2024</p> <ul> <li>fix(docs): cleaned up readme <code>#12</code></li> <li>fix(testing): all tests pass locally now <code>#11</code></li> <li>fix(testing): made some more tests work <code>#10</code></li> <li>feat(managed-data): Support for multiple databases and operations on them <code>#9</code></li> <li>feat(managed-data): support for getting cell data <code>#8</code></li> <li>refactor(cli): changed how endpoints are stored in config file <code>#7</code></li> <li>Better Testing  <code>#1</code></li> <li>initial commit <code>e95b4ad</code></li> <li>feat(pypi): publishing to pypi <code>b20a72e</code></li> <li>feat(pypi): wheel should build now <code>e49fc79</code></li> </ul>"},{"location":"configure.html","title":"Configuration","text":""},{"location":"configure.html#on-a-deep-origin-workstation","title":"On a Deep Origin workstation","text":"<p>On a Deep Origin workstation, no configuration is needed! Within a workstation, the Deep Origin CLI and Python client are automatically configured.</p>"},{"location":"configure.html#on-your-local-computer","title":"On your local computer","text":"<p>To run this package outside of a Deep Origin workstation (for example, on your own computer), first you need to configure this package. After installing this package, run the following to configure your organization, replacing <code>org-id</code> with the ID of the Deep Origin organization that you would like to work with.</p> pythonCLI <pre><code>from deeporigin import config\nconfig.set_value(\"organization_id\", \"org-id\")\n</code></pre> <pre><code>deeporigin config set organization_id [org-id]\n</code></pre>"},{"location":"configure.html#view-configuration","title":"View configuration","text":"<p>To view the configuration for this package, run:</p> pythonCLI <pre><code>from deeporigin import config\nconfig.get_value()\n</code></pre> <pre><code>deeporigin config show\n</code></pre> <p>This will display a table such as below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Variable                    \u2502 Value                               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 organization_id             \u2502 likely-aardvark-ewo                 \u2502\n\u2502 bench_id                    \u2502 average-possum-3x3                  \u2502\n\u2502 env                         \u2502 us-west-1                           \u2502\n\u2502 api_endpoint                \u2502 https://os.prod.deeporigin.io/api   \u2502\n\u2502 nucleus_api_route           \u2502 datahub-api/api/                    \u2502\n\u2502 auth_domain                 \u2502 https://formicbio-dev.us.auth0.com  \u2502\n\u2502 auth_device_code_endpoint   \u2502 oauth/device/code/                  \u2502\n\u2502 auth_token_endpoint         \u2502 oauth/token/                        \u2502\n\u2502 auth_audience               \u2502 https://os.deeporigin.io/api        \u2502\n\u2502 auth_grant_type             \u2502 urn:ietf:params:device_code         \u2502\n\u2502 auth_client_id              \u2502 &lt;secret&gt;                            \u2502\n\u2502 auth_client_secret          \u2502 &lt;secret&gt;                            \u2502\n\u2502 variables_cache_filename    \u2502 ~/variables.yml                     \u2502\n\u2502 feature_flags               \u2502                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#on-a-deep-origin-workstation","title":"On a Deep Origin workstation","text":"<p>No installation needed!</p> <p>The Deep Origin CLI and Python client are installed on every Deep Origin Workstation .</p>"},{"location":"install.html#on-your-own-computer","title":"On your own computer","text":""},{"location":"install.html#recommended-installation","title":"Recommended installation","text":"<p>Recommended installation</p> <p>We recommend using the following script. A common source of errors in python packages is managing dependencies and conflicts with other packages, that is resolved using the method below. </p> <p>This sections describes how to install the Deep Origin CLI and Python client on your computer using our recommendations. We recommend:</p> <ul> <li>Using the uv  package and environment manager </li> <li>Using Jupyter Lab  to run the Deep Origin Python client</li> </ul> macOS/LinuxWindows <p>First, create a folder to contain your project. This can be any name (except deeporigin).</p> <pre><code>mkdir do-client\ncd do-client\n</code></pre> <p>Now use this one liner to install deeporigin using the uv  package manager. </p> <pre><code>curl -LsSf https://client-docs.deeporigin.io/install.sh | sh\n</code></pre> <p>Now start a Jupyter Lab instance that uses this environment, allowing you to use the <code>deeporigin</code> python client in it:</p> <pre><code># run jupyter using this environment\nuv run --with jupyter jupyter lab\n</code></pre> <pre><code># make a folder for your project\n# this can be any name (except deeporigin)\nmkdir do-client\ncd do-client\n\n# install uv if needed\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# If uv tells you to add something to PATH,\n# you may need to do that first\nuv init\n\n# we use the latest stable version of python\nuv python install 3.13\n\n# install deeporigin in the current environment\nuv add deeporigin\n\n# if you're using Deep Origin tools (like FEP), use:\nuv add deeporigin --extra tools\n\n# also install as a uv tool to run from the command line\nuv tool install deeporigin\n\n# run jupyter using this environment\nuv run --with jupyter jupyter lab\n</code></pre>"},{"location":"install.html#upgrading-to-a-new-version","title":"Upgrading to a new version","text":"<p>If you followed the recommended installation steps, you can upgrade to the latest version of the Deep Origin Python client by running:</p> <pre><code>uv add --upgrade deeporigin\n</code></pre> <p>in your project root. </p>"},{"location":"install.html#for-developers","title":"For developers","text":"<p>Developers only</p> <p>If you intend to contribute this package, we recommend installing this package via the instructions below. If you simply intend to use this package, use the instructions above.</p>"},{"location":"install.html#get-the-code","title":"Get the code","text":"<p>First, run the following command to clone the source code repository:</p> <pre><code>git clone git@github.com:deeporiginbio/deeporigin-client.git\n</code></pre>"},{"location":"install.html#install-the-development-dependencies-for-this-package","title":"Install the development dependencies for this package","text":"<p>Second, install Python 3.10+ and GNU make .</p> <p>To verify that both are installed, run the following commands:</p> <pre><code>python3 --version\n# Python 3.12.3\n\nmake --version\n# GNU Make 4.4.1\n</code></pre>"},{"location":"install.html#create-an-editable-installation-of-this-package-from-the-cloned-source-code","title":"Create an editable installation of this package from the cloned source code","text":"<p>Third, navigate to the directory you cloned the code to, and run the following command:</p> <pre><code>make install\n</code></pre> <p>This will install this package in an \"editable\" mode. In this mode, changes to the source code will take effect immediately.</p>"},{"location":"install.html#run-the-linting-and-tests-for-this-package","title":"Run the linting and tests for this package","text":"<p>Once installed, you can test this package by running the following commands:</p> <pre><code>make test\n</code></pre>"},{"location":"install.html#compiling-and-serving-the-documentation-for-this-package","title":"Compiling and serving the documentation for this package","text":"<p>You can compile and serve the documentation for this package by running:</p> <pre><code>make docs-serve\n</code></pre>"},{"location":"install.html#os-and-python-support","title":"OS and python support","text":"<p><code>deeporigin</code> is tested against the following versions of Python on Ubuntu Linux and Windows:</p> Python macOS Windows Ubuntu 3.10 \u2705 \u2705 3.11 \u2705 \u2705 3.12 \u2705 \u2705 3.13 \u2705 \u2705 \u2705"},{"location":"compute-hub/index.html","title":"Compute hub","text":"<p>The Deep Origin compute hub allows you create and use powerful workstations with pre-installed software packages. Deep Origin was built to help computational scientists get clean data from their labs and perform advanced analyses and simulations.</p> <p>Each Deep Origin workstation comes pre-installed and pre-configured with this Python client and CLI.</p> <p>Learn more about the compute hub here .</p>"},{"location":"compute-hub/how-to/variables.html","title":"Install variables and secrets","text":"<p>Variables and secrets captured in the Deep Orgin OS, either at the organization level or the account level, can be installed into workstations by running the following command:</p> <pre><code>deeporigin variables install\n</code></pre> <p>This command will install your variables and secrets into your workstation and print a message similar to that below:</p> <pre><code>No variables were modified\nNo variables were added\nNo variables were deleted\n1 variables were unmodified:\n  EnvironmentVariable: foo\n</code></pre> <p>Only on Deep Origin workstations</p> <p>This function of the CLI only works on Deep Origin workstations. This function will not work on your local computer.</p>"},{"location":"compute-hub/how-to/workstation-info.html","title":"Get information about your Deep Origin workstation","text":"<p>Inside a Deep Origin workstation, run the following command to get information about the workstation:</p> <pre><code>deeporigin context\n</code></pre> <p>This will display a table similar to below:</p> <pre><code>Workstation ID: average-possum-3x3\nUser ID: None\nOrganization ID: likely-aardvark-ewo\nEnvironment: edge\nDebug: False\n</code></pre> <p>Only supported on Deep Origin workstations</p> <p>Note that this command is only supported on Deep Origin workstations. If you run this command outside of a workstation, you will likely see this output:</p> <pre><code>Workstation ID: None\nUser ID: None\nOrganization ID: None\nEnvironment: None\nDebug: False\n</code></pre>"},{"location":"data-hub/index.html","title":"Data hub","text":"<p>The Deep Origin data hub provides R&amp;D teams a foundation for collaboratively capturing data, extracting insights, and making decisions:</p> <ul> <li>Databases for capturing rows of data, metadata, and procedures.</li> <li>Customizable columns for capturing structured information such as the age and genotype of a sample.</li> <li>Notebooks such as for common protocols and recording experiments.</li> <li>File columns and notebook attachments for capturing files such as the results of experiments.</li> <li>Reference columns and notebook mentions for capturing relationships, such as the chemical, RNA, antibody, or cell line that an assay characterized.</li> <li>Folders for hierarchically organizing data, such as by project, team, or experimental modality.</li> <li>Column and file viewers such as for visualizing the sequence of a plasmid or the structure of a chemical or protein.</li> <li>Chart studio for interactively analyzing columnar data.</li> <li>AI assistant for interactively analyze and visualize data.</li> <li>Process flows and automations for streamlining data processing, decision-making, and project management.</li> </ul> <p>Learn more about the data hub here .</p>"},{"location":"data-hub/dataframes.html","title":"Using Deep Origin DataFrames","text":"<p>This page describes how to a Deep Origin DataFrame, which are the primary object you will use to interact with a database on Deep Origin. This page will cover:</p> <ul> <li>fetching data from a Deep Origin database</li> <li>modifying data locally</li> <li>writing data back to Deep Origin</li> </ul> <p>What is a Deep Origin DataFrame?</p> <p>A Deep Origin DataFrame is a subclass of a pandas.DataFrame that is created from a Deep Origin database, and can easily write data back to it. Because it is a subclass of a pandas DataFrame, all pandas DataFrame methods work on Deep Origin DataFrames. </p>"},{"location":"data-hub/dataframes.html#create-a-dataframe","title":"Create a DataFrame","text":"<p>Create a DataFrame using:</p> <p>```python notest from deeporigin.data_hub.dataframe import DataFrame df = DataFrame.from_deeporigin(\"database-id\") <pre><code>In a Jupyter Lab, you should be able to view the DataFrame using:\n\n```py notest\ndf\n</code></pre></p> <p>which should show you something like this:</p> <p></p> <p>Information in the DataFrame</p> <p>In addition to information you would find in the rows and columns of a pandas DataFrame, a Deep Origin DataFrame also contains metadata about the underlying database. In the view above we also see:</p> <ul> <li>The name of the database on Deep Origin.</li> <li>A link to the database on Deep Origin.</li> <li>When the database was created.</li> <li>Information about the last edit made to the database. </li> </ul> <p>Fetching only some rows</p> <p>If you have a particularly large database, you may want to fetch only certain rows using a filter. For example, to fetch only rows where column <code>x</code> is greater than <code>42</code>:</p> <p><code>python notest from deeporigin.data_hub import filters filter = filters.filter(     column_id=\"x\", # can be name or column     filter_value=42,     operator=\"greaterThan\",     filter_type=\"number\", ) df = DataFrame.from_deeporigin(\"your-db-id\",   filter=filter) df</code></p>"},{"location":"data-hub/dataframes.html#modify-data-in-the-dataframe","title":"Modify data in the DataFrame","text":"<p>Because a Deep Origin DataFrame is a subclass of a pandas DataFrame, all pandas DataFrame methods work on Deep Origin DataFrames. In this example, we modify values in one of the columns, or modify a single cell.</p> Modify entire columnsModify data in a single cell <p>To modify entire columns, use native pandas syntax:</p> <p><code>python notest df[\"y^2\"] = df[\"y\"] ** 2</code></p> <p>To modify data in a single cell, use native pandas syntax (the at operator):</p> <p><code>python notest df.at[\"sgs-1\", \"y\"] = 10</code></p> <p>In either case, when we view the DataFrame once more using <code>df</code>, we see the updated data, together with a warning telling us that we have local changes that haven't been written back to Deep Origin.</p> <p></p>"},{"location":"data-hub/dataframes.html#write-data-back-to-deep-origin","title":"Write data back to Deep Origin","text":"<p>Work in progress</p> <p>Writing data back to Deep Origin from a Deep Origin DataFrame is still a work in progress. The following functionality is not yet supported. To perform these functions, use the API directly instead. </p> <ul> <li>Updating values of cells that contain files</li> <li>Updating values of cells that contain references</li> <li>Uploading files</li> <li>Modifying or deleting existing columns. To delete a column, use the GUI or the API and then use the <code>from_deeporigin</code> method.</li> <li>Creating new columns. To insert data into a new column, create a new column using the GUI or the API and then use the <code>from_deeporigin</code> method.</li> <li>Deleting rows</li> <li>Creating new databases</li> </ul>"},{"location":"data-hub/dataframes.html#using-the-to_deeporigin-method","title":"Using the <code>to_deeporigin</code> method","text":"<p>Local changes in the dataframe can be written back to Deep Origin using the <code>to_deeporigin</code> method:</p> <p>```python notest df.to_deeporigin()</p>"},{"location":"data-hub/dataframes.html#wrote-9-rows-in-y2-to-deep-origin-database","title":"\u2714\ufe0e Wrote 9 rows in y^2 to Deep Origin database.","text":"<pre><code>The `to_deeporigin` method writes data that have been modified in the local dataframe back to the corresponding Deep Origin Database. \n\n!!! tip \"Intelligent writing\"\n    - Deep Origin DataFrames keep track of local changes, and only write columns back that have been modified locally. \n    - Every call of `to_deeporigin` will generate a print statement describing the changes that have been written back to Deep Origin. \n    - Because a Deep Origin DataFrame corresponds to a database on Deep Origin, there is no need to specify the database name in the `to_deeporigin` method.\n\nIf we now view the dataframe once more using `df`, we see the following:\n\n![DataFrame](../images/dataframe-2.png)\n\nNote that the warning about local changes that have not been written back to Deep Origin has disappeared, because the changes **have** been written back to Deep Origin.\n\n### Automatic writing to Deep Origin\n\nAll Deep Origin DataFrames have an attribute called `auto_sync` that determines if local changes are written automatically to Deep Origin. By default, `auto_sync` is set to `False`, requiring you to call the `to_deeporigin` method to write changes back to Deep Origin.\n\nTo enable automatic syncing, set the `auto_sync` attribute to `True`:\n\n```python notest\ndf.auto_sync = True\ndf\n</code></pre> <p>Note that the dataframe now displays a message indicating that local changes will be written back to Deep Origin.</p> <p>Making any change to the dataframe now triggers a write back to the Deep Origin database.</p> <p>```python notest df[\"y^2\"] = df[\"y\"] * 0.99 df</p>"},{"location":"data-hub/dataframes.html#wrote-9-rows-in-y2-to-deep-origin-database_1","title":"\u2714\ufe0e Wrote 9 rows in y^2 to Deep Origin database.","text":"<p>```</p> <p>Use <code>auto_sync</code> with caution</p> <p>Turning on <code>auto_sync</code> on dataframes can be dangerous.  - Changes made to the local database are written to a Deep Origin database automatically, and no confirmation is asked for.  - This can cause data loss. - Every change made to the database is written immediately, so modifying the local dataframe multiple times leads to multiple writes to a Deep Origin database.</p>"},{"location":"data-hub/dataframes.html#reference","title":"Reference","text":"<p>Read more about the <code>to_deeporigin</code> method here. </p>"},{"location":"data-hub/how-to/add-data.html","title":"Add data to a Deep Origin Database","text":"<p>This document describes how to add data to a Deep Origin Database.</p> <p>Consider the following dataframe constructed from a database using:</p> <p>```python notest from deeporigin.data_hub import api df = api.get_dataframe(\"xy\") df <pre><code>![](../../images/df-xy.png)\n\n## Add new rows\n\nTo add new rows to the underlying database, use the `add_databse_rows` function:\n\n```python notest\ndata = dict(X=[1, 2], Y=[2, 3])\napi.add_database_rows(database_id=\"xy\", data=data)\n</code></pre></p> <p><code>data</code> should be a dictionary where the keys are column names and the values are lists of values to be written to the corresponding columns. <code>add_database_rows</code> will add this data to the database, creating as many new rows as needed. </p> <p><code>add_database_rows</code> returns a list of the row IDs created during this process.</p>"},{"location":"data-hub/how-to/add-data.html#add-fragments-of-new-rows","title":"Add fragments of new rows","text":"<p>Similarly, fragments of rows (subsets of columns) can be written to the database:</p> <p>```python notest data = dict(X=[10, 20]) # note Y is not specified api.add_database_rows(database_id=\"xy\", data=data) <pre><code>`add_database_rows` returns a list of the row IDs created during this process, for example:\n\n```python notest\n[\"row-1\", \"row-2\"]\n</code></pre></p>"},{"location":"data-hub/how-to/add-data.html#reference","title":"Reference","text":"<p>The reference documentation for add_database_rows</p>"},{"location":"data-hub/how-to/create.html","title":"Create objects","text":"<p>This document describes how to create databases, columns in databases, and folders (workspaces) in the Deep Origin data hub.</p>"},{"location":"data-hub/how-to/create.html#folders","title":"Folders","text":"<p>Folders can be created by specifying a name, and, optionally, a parent.</p> CLIPython <p>If no parent is specified, the folder will be created at the root level.</p> <pre><code>deeporigin data new folder --name &lt;name&gt;  \n</code></pre> <p>To create a folder within another folder, specify the parent:</p> <pre><code>deeporigin data new folder \\\n    --name &lt;name&gt; \\ \n    --parent &lt;parent-id&gt;\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.create_workspace(name=\"test-folder\")\n</code></pre> <p>To create a folder within another folder, specify the parent:</p> <pre><code>api.create_workspace(\n    name=\"test-folder-2\",\n    parent_id=\"parent-id\",\n)\n</code></pre>"},{"location":"data-hub/how-to/create.html#databases","title":"Databases","text":"<p>Databases can be created by specifying a name, and, optionally, a parent.</p> CLIPython <p>If no parent is specified, the database will be created at the root level.</p> <pre><code>deeporigin data new --name &lt;name&gt;  --database\n</code></pre> <p>To create a folder within another folder, specify the parent:</p> <pre><code>deeporigin data new database \\\n    --name &lt;name&gt; \\\n    --parent &lt;parent-id&gt;\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.create_database(name=\"test-database\")\n</code></pre> <p>To create a folder within another folder, specify the parent:</p> <pre><code>api.create_database(\n    name=\"test-database-2\",\n    parent_id=\"parent-id\",\n)\n</code></pre>"},{"location":"data-hub/how-to/create.html#database-columns","title":"Database columns","text":"<p>Work in progress</p> <p>Currently, this package has limited support for creating database columns. We plan to expand the capabilities of this package.</p> <p>To create a new database column in an existing database, run:</p> CLIPython <pre><code>deeporigin data new column \\\n    --name &lt;name&gt; \\\n    --database &lt;database-id&gt; \\\n    --type &lt;type&gt;\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.add_database_column(\n    database_id=\"existing-database-id\",\n    type=\"integer\",\n    name=\"unique-name\",\n)\n</code></pre> <p>This code creates a new column in the existing database. To configure the type of the column, use the <code>type</code> argument. The type must a member of DataType.</p>"},{"location":"data-hub/how-to/delete.html","title":"Delete objects","text":"<p>This document describes how to delete objects in the Deep Origin data hub:</p> <ul> <li>Database rows</li> <li>Database columns</li> <li>Databases</li> <li>Folders (workspaces)</li> </ul> <p>Exercise caution</p> <ul> <li>Deleting a folder deletes all of the databases in the folder.</li> <li>Deleting a column destroys all of the data in that column, including all of the files assigned to the cells in that column.</li> <li>Deleting a database deletes all of the rows in the database.</li> </ul> <p>All resources will be deleted without asking for confirmation. </p>"},{"location":"data-hub/how-to/delete.html#delete-database-rows","title":"Delete database rows","text":"<p>To delete a row in a database, run:</p> CLIPython <pre><code>deeporigin data delete \\\n    --row &lt;row-id&gt; \\\n    --database &lt;database-id&gt;\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.delete_rows(row_ids=[\"row-1\", \"row-2\"], database_id=\"database-id\")\n</code></pre> <p>Deleting multiple rows</p> <p>Note that the python client allows you to delete multiple rows at once.</p>"},{"location":"data-hub/how-to/delete.html#delete-databases","title":"Delete databases","text":"<p>To delete an entire database, run:</p> CLIPython <pre><code>deeporigin data delete --database &lt;db-id&gt;\n</code></pre> <p>Aliases</p> <p>The following alias also works: <code>deeporigin data delete -d &lt;db-id&gt;</code>.</p> <pre><code>from deeporigin.data_hub import api\napi.delete_database(database_id=&lt;db-id&gt;)\n</code></pre>"},{"location":"data-hub/how-to/delete.html#delete-folders-workspaces","title":"Delete folders (workspaces)","text":"<p>To delete an entire folder, including all contained databases, run:</p> CLIPython <pre><code>deeporigin data delete --folder &lt;id&gt;\n</code></pre> <p>Aliases</p> <p>The following aliases also work <code>--workspace</code>, <code>-w</code>, <code>--ws</code>, <code>-f</code> instead of <code>--folder</code>.</p> <pre><code>from deeporigin.data_hub import api\napi.delete_workspace(workspace_id=&lt;folder-id&gt;)\n</code></pre>"},{"location":"data-hub/how-to/delete.html#delete-database-column","title":"Delete database column","text":"<p>To delete a column in a databas, run the following command, specifying the ID of the column to delete and its parent database:</p> CLIPython <pre><code>deeporigin data delete \\\n    --column &lt;ids&gt; \\\n    --database &lt;database-id&gt; \\\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.delete_database_column(\n    column_id=\"col-id\",\n    database_id=\"database-id\",\n)\n</code></pre>"},{"location":"data-hub/how-to/download-files.html","title":"Download files","text":"<p>This page describes how to download files from Deep Origin to your local computer. </p>"},{"location":"data-hub/how-to/download-files.html#download-one-or-many-files-from-the-data-hub","title":"Download one or many files from the Data hub","text":"<p>To download file(s) to the Deep Origin data hub, run the following commands:</p> CLIPython <pre><code>deeporigin data download-files\n</code></pre> <p>This will download all files on Deep Origin to the current folder. </p> <p>To download files that have been assigned to a particular row, use:</p> <pre><code>deeporigin data download-files --assigned-row-ids &lt;row-id-1&gt;  &lt;row-id-2&gt; ...\n</code></pre> <p>To download specific files, pass the file IDs using:</p> <pre><code>deeporigin data download-files --file-ids &lt;file-1&gt; &lt;file-1&gt; ...\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.download_files(files)\n</code></pre> <p><code>files</code> is a list of files to download, and is a list of <code>ListFilesResponse</code> objects. To obtain this list, use <code>api.list_files()</code>, the output of which can be used as an input to <code>download_files</code>. </p> <p>Download all files</p> <p>To download all files, call <code>api.list_files()</code> and pass the output to <code>download_files</code>.</p>"},{"location":"data-hub/how-to/list-data.html","title":"List data","text":"<p>This page describes how to list resources on Deep Origin. Listing folders (workspaces), databases, rows and files can be used to discover the resources available on Deep Origin, and show their IDs for further queries.</p>"},{"location":"data-hub/how-to/list-data.html#list-folders","title":"List folders","text":"<p>To list all of your Deep Origin folders, run:</p> CLIPython <pre><code>deeporigin data list --folders\n</code></pre> <p>This will display a screen similar to below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name            \u2502 Type       \u2502 ID            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Secret Project  \u2502 workspace  \u2502 secret        \u2502\n\u2502 QC Efforts      \u2502 workspace  \u2502 qc-efforts    \u2502\n\u2502 Covid Target    \u2502 workspace  \u2502 corona        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data list --folders --json | jq\n</code></pre> <pre><code>[\n  {\n    \"id\": \"_workspace:ncZhbnYXXfg0zWNcGKTnz\",\n    \"parentId\": null,\n    \"hid\": \"secret\",\n    \"type\": \"workspace\",\n    \"name\": \"Secret Project\"\n  },\n  {\n    \"id\": \"_workspace:sDTZKGZXOkhGw6XSg2Jla\",\n    \"parentId\": null,\n    \"hid\": \"qc-efforts\",\n    \"type\": \"workspace\",\n    \"name\": \"QC Efforts\"\n  },\n  {\n    \"id\": \"_workspace:UWhlb4Wyzh2R7bySapY2m\",\n    \"parentId\": null,\n    \"hid\": \"corona\",\n    \"type\": \"workspace\",\n    \"name\": \"Covid Target\"\n  }\n]\n</code></pre> Combining outputs <p>You can combine multiple output types. For example, to list all folders and databases:</p> <pre><code>deeporigin data list --folders --databases\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.list_rows(row_type=\"workspace\")\n</code></pre>"},{"location":"data-hub/how-to/list-data.html#list-databases","title":"List databases","text":"<p>To list all of your databases in Deep Origin, run:</p> CLIPython <pre><code>deeporigin data list --databases\n</code></pre> <p>This will display a screen similar to below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name           \u2502 Type      \u2502 ID             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 First Database \u2502 database  \u2502 first          \u2502\n\u2502 QC Efforts     \u2502 database  \u2502 qc-efforts     \u2502\n\u2502 Covid Target   \u2502 database  \u2502 corona         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data list --databases --json | jq\n</code></pre> <pre><code>[\n  {\n    \"id\": \"_database:ncZhbnYXXfg0zWNcGKTnz\",\n    \"parentId\": \"_workspace:ncZhbnYXXfg0zWNcGKTnz\",\n    \"hid\": \"db-first\",\n    \"type\": \"database\",\n    \"name\": \"First Database\"\n  },\n  {\n    \"id\": \"_database:sDTZKGZXOkhGw6XSg2Jla\",\n    \"parentId\": \"_workspace:sDTZKGZXOkhGw6XSg2Jla\",\n    \"hid\": \"db-qc\",\n    \"type\": \"database\",\n    \"name\": \"QC Efforts\"\n  },\n  {\n    \"id\": \"_database:UWhlb4Wyzh2R7bySapY2m\",\n    \"parentId\": \"_workspace:UWhlb4Wyzh2R7bySapY2m\",\n    \"hid\": \"db-covid\",\n    \"type\": \"database\",\n    \"name\": \"Covid Target\"\n  }\n]\n</code></pre> Combining outputs <p>You can combine multiple output types. For example, to list all folders and databases:</p> <pre><code>deeporigin data list --folders --databases\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.list_rows(row_type=\"database\")\n</code></pre>"},{"location":"data-hub/how-to/list-data.html#list-rows","title":"List rows","text":"<p>To list all of your database rows in Deep Origin:</p> CLIPython <pre><code>deeporigin data list --rows\n</code></pre> <p>This will display a screen similar to below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name   \u2502 Type   \u2502 ID     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        \u2502 row    \u2502 data-1 \u2502\n\u2502        \u2502 row    \u2502 data-2 \u2502\n\u2502        \u2502 row    \u2502 data-3 \u2502\n\u2502        \u2502 row    \u2502 data-4 \u2502\n\u2502        \u2502 row    \u2502 data-5 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.list_rows(row_type=\"row\")\n</code></pre>"},{"location":"data-hub/how-to/list-data.html#list-files","title":"List files","text":"<p>To list all of your files in Deep Origin, run:</p> CLIPython <pre><code>deeporigin data list --files\n</code></pre> <p>This will display a screen similar to below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name       \u2502 Status   \u2502 ID                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 db-dna.csv \u2502 ready    \u2502 _file:gBAK9tzFC5Cegx4NmSETc \u2502\n\u2502 seqs.gz    \u2502 ready    \u2502 _file:FgVjcv8zzyPho6FME8QFp \u2502\n\u2502 db-rna.csv \u2502 ready    \u2502 _file:hnU7F62xeW8j0l1kR7YP1 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data list --databases --json | jq\n</code></pre> <pre><code>[\n  {\n    \"file\": {\n      \"id\": \"_file:gBAK9tzFC5Cegx4NmSETc\",\n      \"uri\": \"s3://_file:gBAK9tzFC5Cegx4NmSETc\",\n      \"name\": \"db-dna.csv\",\n      \"status\": \"ready\",\n      \"contentLength\": 234,\n      \"contentType\": \"text/csv\",\n      \"dateCreated\": \"2024-05-08 01:01:48.925\",\n      \"dateUpdated\": \"2024-05-08 01:01:48.925\",\n      \"createdByUserDrn\": \"scientist@deeporigin.com\"\n    }\n  },\n  {\n    \"file\": {\n      \"id\": \"_file:FgVjcv8zzyPho6FME8QFp\",\n      \"uri\": \"s3://_file:FgVjcv8zzyPho6FME8QFp\",\n      \"name\": \"seqs.gz\",\n      \"status\": \"ready\",\n      \"contentLength\": 554588,\n      \"contentType\": \"zip/gz\",\n      \"dateCreated\": \"2024-05-08 18:08:09.149\",\n      \"dateUpdated\": \"2024-05-08 18:08:09.149\",\n      \"createdByUserDrn\": \"scientist@deeporigin.com\"\n    },\n    \"assignments\": [\n      {\n        \"rowId\": \"_row:WORR9xeGvG6mSg0yyDRlk\"\n      }\n    ]\n  },\n  {\n    \"file\": {\n      \"id\": \"_file:hnU7F62xeW8j0l1kR7YP1\",\n      \"uri\": \"s3://_file:hnU7F62xeW8j0l1kR7YP1\",\n      \"name\": \"db-rna.csv\",\n      \"status\": \"ready\",\n      \"contentLength\": 234,\n      \"contentType\": \"text/csv\",\n      \"dateCreated\": \"2024-05-08 18:07:57.655\",\n      \"dateUpdated\": \"2024-05-08 18:07:57.655\",\n      \"createdByUserDrn\": \"scientist@deeporigin.com\"\n    },\n    \"assignments\": [\n      {\n        \"rowId\": \"_row:mlNnmNkfktz7GT5qpjyrF\"\n      }\n    ]\n  }\n]\n</code></pre> <p>Listing files cannot list other objects</p> <p>If you pass <code>--files</code> to the list command, all other  arguments are ignored. As a result, </p> <p><pre><code>deeporigin data list --files --databases\n</code></pre> will only list files.</p> <p>First, we start off by importing the necessary modules:</p> <p>We can list all files on Deep Origin using:</p> <pre><code>from deeporigin.data_hub import api\napi.list_files()\n</code></pre> <p>To find only unassigned files, we can use:</p> <pre><code>api.list_files(is_unassigned=True)\n</code></pre> <p>To find files that are assigned to a specific row:</p> <pre><code>api.list_files(assigned_row_ids=[\"row-1\"])\n</code></pre>"},{"location":"data-hub/how-to/upload-files.html","title":"Upload files","text":"<p>This page describes how to upload files to the Deep Origin data hub, and assign them to individual cells.</p>"},{"location":"data-hub/how-to/upload-files.html#upload-a-file-to-the-data-hub","title":"Upload a file to the data hub","text":"<p>To upload a file to the Deep Origin data hub, run the following commands:</p> CLIPython <pre><code>deeporigin data upload /path/to/test.fasta\n</code></pre> <p>This will upload the file to your data hub, but the file will not yet be assigned to any database or cell. An example response is shown below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Property         \u2502 Value                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 name             \u2502 test.fasta                   \u2502\n\u2502 contentType      \u2502 data/fasta                   \u2502\n\u2502 contentLength    \u2502 554588                       \u2502\n\u2502 id               \u2502 _file:36ufKT2Sej22coSEOizpK  \u2502\n\u2502 status           \u2502 ready                        \u2502\n\u2502 uri              \u2502 s3://foo                     \u2502\n\u2502 dateCreated      \u2502 2024-06-18T14:48:33.501Z     \u2502\n\u2502 dateUpdated      \u2502 2024-06-18T14:48:33.501Z     \u2502\n\u2502 createdByUserDrn \u2502 levins@deeporigin.com        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin upload /path/to/test.fasta | jq\n</code></pre> <pre><code>{\n  \"name\": \"test.fasta\",\n  \"contentType\": \"data/fasta\",\n  \"contentLength\": 554588,\n  \"id\": \"_file:36ufKT2Sej22coSEOizpK\",\n  \"status\": \"ready\",\n  \"uri\": \"s3://foo\",\n  \"dateCreated\": \"2024-06-18T14:51:43.876Z\",\n  \"dateUpdated\": \"2024-06-18T14:51:43.876Z\",\n  \"createdByUserDrn\": \"levins@deeporigin.com\"\n}\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.upload_file(\"/path/to/file.fasta\")\n</code></pre> <p>This will upload the file to your data hub. An example is shown below:</p> <pre><code>{\n    \"name\": \"file.fasta\",\n    \"contentType\": \"data/foo\",\n    \"contentLength\": 55454688,\n    \"id\": \"_file:6Hdhyc3t8xZ6pmyCrQy1t\",\n    \"status\": \"ready\",\n    \"uri\": \"s3://data.&lt;org-name&gt;/_file:6Hdhyc3t8xZ6pmyCrQy1t\",\n    \"dateCreated\": \"2024-06-18T14:18:37.409Z\",\n    \"dateUpdated\": \"2024-06-18T14:18:37.409Z\",\n    \"createdByUserDrn\": \"haldane@deeporigin.com\",\n}\n</code></pre>"},{"location":"data-hub/how-to/upload-files.html#upload-a-file-to-an-existing-row","title":"Upload a file to an existing row","text":"<p>To upload a file and assign it to a cell in an existing row, run the following commands:</p> CLIPython <pre><code>deeporigin data upload /path/to/test.fasta \\\n    --column &lt;column_id&gt; \\\n    --database &lt;database_id&gt; \\\n    --row &lt;row_id&gt;\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.upload_file(\"/path/to/file.fasta\")\n</code></pre> <p>To assign an uploaded file to a cell in an existing row, run the <code>assign_files_to_cell</code> function:</p> <pre><code>    api.assign_files_to_cell(\n    file_ids=[\"_file:6Hdhyc3t8xZ6pmyCrQy1t\"],\n    database_id=\"db-dna\",\n    column_id=\"base_sequence_file\",\n    row_id=\"row-id\",\n)\n</code></pre>"},{"location":"data-hub/how-to/upload-files.html#upload-a-file-to-a-new-row-of-a-database","title":"Upload a file to a new row of a database","text":"<p>To upload a file and assign it to a column in a new row, run the following commands:</p> CLIPython <pre><code>deeporigin data upload /path/to/test.fasta \\\n    --column &lt;column_id&gt; \\\n    --database &lt;database_id&gt; \n</code></pre> <p>This omits the <code>--row</code> parameter, which would create a new row in the database.</p> <p>First, upload a file to your data hub by running:</p> <pre><code>from deeporigin.data_hub import api\napi.upload_file(\"/path/to/file.fasta\")\n</code></pre> <p>Second, assign the file to a new row by running:</p> <pre><code>api.assign_files_to_cell(\n    file_ids=[\"_file:6Hdhyc3t8xZ6pmyCrQy1t\"],\n    database_id=\"db-dna\",\n    column_id=\"base_sequence_file\",\n)\n</code></pre>"},{"location":"data-hub/how-to/view-data.html","title":"View data","text":"<p>This page describes how to describe and show the details of data objects in Deep Origin. To simply list objects, see List data.</p>"},{"location":"data-hub/how-to/view-data.html#describe-data","title":"Describe data","text":""},{"location":"data-hub/how-to/view-data.html#describe-rows","title":"Describe rows","text":"<p>Describing rows provides metadata about the row, such as its ID, parent, and status.</p> <p>Describe vs. Show</p> <p>This does not show you information in that row. To see data contained in that row, use the <code>show</code> command.</p> <p>To describe a row in a database in Deep Origin, run:</p> CLIPython <pre><code>deeporigin data describe &lt;row-id&gt;\n</code></pre> <p>This will display a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Column           \u2502 Value                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id               \u2502 _row:WORR9xeGvG6mSg0yyDRlk         \u2502\n\u2502 parentId         \u2502 _database:kyEws11L4KagGAaqRwONv    \u2502\n\u2502 type             \u2502 row                                \u2502\n\u2502 dateCreated      \u2502 2024-05-08 17:59:32.512306         \u2502\n\u2502 dateUpdated      \u2502 2024-05-08 18:08:13.103            \u2502\n\u2502 createdByUserDrn \u2502 scientist@deeporigin.com           \u2502\n\u2502 editedByUserDrn  \u2502 scientist@deeporigin.com           \u2502\n\u2502 hid              \u2502 data-2                             \u2502\n\u2502 validationStatus \u2502 valid                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;row-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"id\": \"_row:WORR9xeGvG6mSg0yyDRlk\",\n  \"parentId\": \"_database:kyEws11L4KagGAaqRwONv\",\n  \"type\": \"row\",\n  \"dateCreated\": \"2024-05-08 17:59:32.512306\",\n  \"dateUpdated\": \"2024-05-08 18:08:13.103\",\n  \"createdByUserDrn\": \"scientist@deeporigin.com\",\n  \"editedByUserDrn\": \"scientist@deeporigin.com\",\n  \"hid\": \"data-2\",\n  \"validationStatus\": \"valid\"\n}\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.describe_row(\"_row:WORR9xeGvG6mSg0yyDRlk\")\n</code></pre>"},{"location":"data-hub/how-to/view-data.html#describe-files","title":"Describe files","text":"<p>To describe a file in a database in Deep Origin, run:</p> CLIPython <pre><code>deeporigin data describe &lt;file-id&gt;\n</code></pre> <p>This will display a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Property         \u2502 Value                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id               \u2502 _file:gBAK9tzFC5Cegx4NmSETc       \u2502\n\u2502 uri              \u2502 s3://_file:gBAK9tzFC5Cegx4NmSETc  \u2502\n\u2502 name             \u2502 db-dna.csv                        \u2502\n\u2502 status           \u2502 ready                             \u2502\n\u2502 contentLength    \u2502 234                               \u2502\n\u2502 contentType      \u2502 text/csv                          \u2502\n\u2502 dateCreated      \u2502 2024-05-08 01:01:48.925           \u2502\n\u2502 dateUpdated      \u2502 2024-05-08 01:01:48.925           \u2502\n\u2502 createdByUserDrn \u2502 scientist@deeporigin.com          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;file-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"id\": \"_file:gBAK9tzFC5Cegx4NmSETc\",\n  \"uri\": \"s3://_file:gBAK9tzFC5Cegx4NmSETc\",\n  \"name\": \"db-dna.csv\",\n  \"status\": \"ready\",\n  \"contentLength\": 234,\n  \"contentType\": \"text/csv\",\n  \"dateCreated\": \"2024-05-08 01:01:48.925\",\n  \"dateUpdated\": \"2024-05-08 01:01:48.925\",\n  \"createdByUserDrn\": \"scientist@deeporigin.com\"\n}\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.describe_file(\"file-id\")\n</code></pre>"},{"location":"data-hub/how-to/view-data.html#show-data","title":"Show data","text":""},{"location":"data-hub/how-to/view-data.html#show-rows","title":"Show rows","text":"<p>To show the data in a row in a database in Deep Origin, run:</p> CLIPython <pre><code>deeporigin data show &lt;row-id&gt;\n</code></pre> <p>This will display a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Column    \u2502 Value                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 File      \u2502 _file:hnU7F62xeW8j0l1kR7YP1 \u2502\n\u2502 Float Num \u2502 112                         \u2502\n\u2502 selctcol  \u2502 sdsd                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;file-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"File\": \"_file:hnU7F62xeW8j0l1kR7YP1\",\n  \"Float Num\": 112,\n  \"selctcol\": \"sdsd\"\n}\n</code></pre> <pre><code>from deeporigin.data_hub import  api\napi.get_row_data(\"row-id\")\n</code></pre> <p>The data will be returned as a dictionary, where the keys are the column names and the values are values of the cells.</p>"},{"location":"data-hub/how-to/view-data.html#show-databases","title":"Show databases","text":"CLIPython <pre><code>deeporigin data show &lt;database-id&gt;\n</code></pre> <p>This will display a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  Status   \u2502 stag-id   \u2502 Customer Name    \u2502 Status     \u2502  Output Files     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 valid     \u2502 stag-1    \u2502 Blue Sun Corp    \u2502 Processing \u2502                   \u2502\n\u2502 valid     \u2502 stag-2    \u2502 Veridian Dynamics\u2502 Complete   \u2502   report.tar.gz   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;database-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"Status\": [\n    \"valid\",\n    \"valid\"\n  ],\n  \"stag-id\": [\n    \"stag-1\",\n    \"stag-2\"\n  ],\n  \"Customer Name\": [\n    \"Blue Sun Corp \",\n    \"Veridian Dynamics\"\n  ],\n  \"Status\": [\n    \"Processing\",\n    \"Complete\"\n  ],\n  \"Output Files\": [\n    null,\n    \"report.tar.gz\"\n  ]\n}\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.get_dataframe(\"database-id\")\n</code></pre> <p>The data will be returned as a Pandas DataFrame.</p>"},{"location":"data-hub/how-to/write-data.html","title":"Write data","text":"<p>This page describes how to write data to the Deep Origin data hub.</p>"},{"location":"data-hub/how-to/write-data.html#write-data-to-a-cell-in-a-database","title":"Write data to a cell in a database","text":""},{"location":"data-hub/how-to/write-data.html#write-text-data","title":"Write text data","text":"<p>Run the following to write a text value to a cell in a database:</p> CLIPython <pre><code>deeporigin data write \"some-string\" \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.set_cell_data(\n    \"some string\",\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre>"},{"location":"data-hub/how-to/write-data.html#write-numeric-data","title":"Write numeric data","text":"<p>Run the following to write a numeric value to a cell in a database:</p> CLIPython <pre><code>deeporigin data write 123 \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.set_cell_data(\n    1,\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre> <p>Numeric data will be coerced to the data type of the underlying cell.</p>"},{"location":"data-hub/how-to/write-data.html#write-select-data","title":"Write select data","text":"<p>This section describes how to write data to a cell in a database that is of type <code>select</code>. This includes cells where a single option can be selected from a list, and cells where more than one value can be selected from a list of options.</p> CLIPython <pre><code>deeporigin data write \"option A\" \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.set_cell_data(\n    \"option A\",\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre> <p>The value must be one of the options in the list. If it is not, an error will be raised showing the list of legal options.</p>"},{"location":"data-hub/how-to/write-data.html#write-boolean-data","title":"Write Boolean data","text":"<p>Run the following to write a Boolean value to a cell in a database:</p> CLIPython <pre><code>deeporigin data write \"True\" \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.data_hub import api\napi.set_cell_data(\n    True,\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre> Unsetting Boolean data <p>To unset a cell, so that it contains no data, write <code>None</code> to the cell as follows: </p> <pre><code>from deeporigin.data_hub import api\napi.set_cell_data(\n    None,\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre>"},{"location":"data-hub/ref/high-level-api.html","title":"API reference: High-level API","text":"<p>How to use this reference</p> <p>This page contains information about each class and function in this module. This is meant as a detailed reference for this module. If you're looking an introduction, we recommend reviewing the How to section.</p> <p>The <code>deeporigin.data_hub.api</code> module contains high-level functions for interacting with your Deep Origin data hub.</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.add_database_column","title":"add_database_column","text":"<pre><code>add_database_column(\n    *,\n    database_id: str,\n    type: DataType,\n    name: str,\n    cardinality: Cardinality = \"one\",\n    required: bool = False,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Add a column to a database.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database on Deep Origin.</p> required <code>type</code> <code>DataType</code> <p>type of the column. Should be one of DataType</p> required <code>name</code> <code>str</code> <p>name of the column</p> required <code>cardinality</code> <code>Cardinality</code> <p>cardinality of the column. Specifies whether cells in this column can contain or many items. Should be one of \"one\" or \"many\"</p> <code>'one'</code> <code>required</code> <code>bool</code> <p>whether the column is required. If True, cells in this column cannot be empty</p> <code>False</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.add_database_rows","title":"add_database_rows","text":"<pre><code>add_database_rows(\n    *,\n    database_id: str,\n    data: dict,\n    client=None,\n    _stash: bool = False\n) -&gt; list[str]\n</code></pre> <p>Add new data to a database.</p> <p>Use this function to add new rows, or fragments of rows, to a Deep Origin database.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>Human ID or System ID of the database</p> required <code>data</code> <code>dict</code> <p>A dictionary where each key is a column name and each value is a list of values. All values should have the same length. Key names should match column names in the database.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of row IDs</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.add_smiles_column","title":"add_smiles_column","text":"<pre><code>add_smiles_column(\n    *,\n    database_id: str,\n    name: str,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Add a SMILES column, with a inline 2D viewer configured</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database on Deep Origin.</p> required <code>name</code> <code>str</code> <p>name of the column</p> required"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.assign_files_to_cell","title":"assign_files_to_cell","text":"<pre><code>assign_files_to_cell(\n    *,\n    file_ids: list[str],\n    database_id: str,\n    column_id: str,\n    row_id: Optional[str] = None,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Assign existing file(s) to a cell</p> <p>Assign files to a cell in a database table, where the cell is identified by the database ID, row ID, and column ID.</p> <p>If row_id is <code>None</code>, a new row will be created.</p> <p>Parameters:</p> Name Type Description Default <code>file_ids</code> <code>list[str]</code> <p>ID of the file</p> required <code>database_id</code> <code>str</code> <p>ID of database to assign to</p> required <code>column_id</code> <code>str</code> <p>ID of the column</p> required <code>row_id</code> <code>Optional[str]</code> <p>ID of the row</p> <code>None</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.convert_id_format","title":"convert_id_format","text":"<pre><code>convert_id_format(\n    *,\n    hids: Optional[Union[list[str], set[str]]] = None,\n    ids: Optional[Union[list[str], set[str]]] = None,\n    client=None,\n    _stash: bool = False\n) -&gt; list[dict]\n</code></pre> <p>Convert a list of human IDs to IDs or vice versa.</p> <p>Parameters:</p> Name Type Description Default <code>hids</code> <code>Optional[Union[list[str], set[str]]]</code> <p>List of human IDs</p> <code>None</code> <code>ids</code> <code>Optional[Union[list[str], set[str]]]</code> <p>List of IDs (system IDs)</p> <code>None</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.create_database","title":"create_database","text":"<pre><code>create_database(\n    *,\n    name: str,\n    client=None,\n    _stash: bool = False,\n    parent_id: Optional[str] = None,\n    hid: Optional[str] = None,\n    hid_prefix: Optional[str] = None\n)\n</code></pre> <p>Create a new database in the data hub</p> <p>A database contains rows of data.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the database to create</p> required <code>hid</code> <code>Optional[str]</code> <p>Human ID. If not specified, the name will be used</p> <code>None</code> <code>parent_id</code> <code>Optional[str]</code> <p>ID of the parent. If None, the folder is created at the root level</p> <code>None</code> <code>hid_prefix</code> <code>Optional[str]</code> <p>Human ID prefix to be used for each row. If not specified, the name will be used</p> <code>None</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.create_workspace","title":"create_workspace","text":"<pre><code>create_workspace(\n    *,\n    name: str,\n    hid: Optional[str] = None,\n    parent_id: Optional[str] = None,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Create a new folder (workspace) in the data hub</p> <p>A folder contains can contain other rows and databases.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the folder to create</p> required <code>hid</code> <code>Optional[str]</code> <p>Human ID. If not specified, the name will be used</p> <code>None</code> <code>parent_id</code> <code>Optional[str]</code> <p>ID of the parent. If None, the folder is created at the root level</p> <code>None</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.download","title":"download","text":"<pre><code>download(\n    source: str,\n    destination: str,\n    *,\n    include_files: bool = False,\n    client=None,\n    _stash: bool = False\n) -&gt; None\n</code></pre> <p>Download resources from Deep Origin and save them to a local destination.</p> <p>Download databases, objects and other entities from your Deep Origin data hub and save them to local disk.</p> Work in progress <p>All features in this function have not been implemented yet.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>ID (or human ID) of a resource on Deep Origin.</p> required <code>destination</code> <code>str</code> <p>Path to local directory to save resources.</p> required <code>include_files</code> <code>bool</code> <p>if <code>True</code>, download files in database.</p> <code>False</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.download_database","title":"download_database","text":"<pre><code>download_database(\n    source: Any,\n    destination: str = getcwd(),\n    *,\n    include_files: bool = False,\n    client=None,\n    _stash: bool = False\n) -&gt; None\n</code></pre> <p>Download a database and save it to a CSV file on the local disk.</p> <p>Download a database from your Deep Origin data hub and save to local disk as a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Any</code> <p>ID (or human ID) of a resource on Deep Origin.</p> required <code>destination</code> <code>str</code> <p>Path to local directory to save resources.</p> <code>getcwd()</code> <code>include_files</code> <code>bool</code> <p>if <code>True</code>, download files in database.</p> <code>False</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.download_files","title":"download_files","text":"<pre><code>download_files(\n    *,\n    files: Optional[list[dict]] = None,\n    file_ids: Optional[list[str]] = None,\n    save_to_dir: Path | str = Path(\".\"),\n    use_file_names: bool = True,\n    client=None,\n    _stash: bool = False\n) -&gt; None\n</code></pre> <p>download multiple files in parallel to local disk</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>Optional[list[dict]]</code> <p>list of files to download. These can be a list of file_ids or a list of files as returned by api.list_files</p> <code>None</code> <code>save_to_dir</code> <code>Path | str</code> <p>directory to save files to on local computer</p> <code>Path('.')</code> <code>use_file_names</code> <code>bool</code> <p>If <code>True</code>, refer to files by name rather than ID.</p> <code>True</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.get_cell_data","title":"get_cell_data","text":"<pre><code>get_cell_data(\n    *,\n    row_id: str,\n    column_name: str,\n    client=None,\n    _stash: bool = False\n) -&gt; Any\n</code></pre> <p>Extract data from a cell in a database, referenced by <code>row_id</code> and <code>column_name</code>.</p> <p>Returns the value in a single cell in a database.</p> Caution <p>This function internally calls get_row_data, so it is not efficient to write a loop to get all values of cells from a row. It will be faster to call get_row_data directly.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row.</p> required <code>column_name</code> <code>str</code> <p>Name of column.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Value of that cell.</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.get_columns","title":"get_columns","text":"<pre><code>get_columns(\n    row_id: str, *, client=None, _stash: bool = False\n) -&gt; list[dict]\n</code></pre> <p>Get information about the columns of a row or database.</p> <p>If <code>row_id</code> is a database, then column metadata and names are returned. If <code>row_id</code> is a row, then a dictionary of human IDs and values are returned.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row or database on Deep Origin.</p> required"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.get_dataframe","title":"get_dataframe","text":"<pre><code>get_dataframe(\n    database_id: str,\n    *,\n    use_file_names: bool = True,\n    reference_format: IDFormat = \"human-id\",\n    return_type: DatabaseReturnType = \"dataframe\",\n    filter: Optional[dict] = None,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Generate a <code>pandas.DataFrame</code> or dictionary for a database.</p> <p>Download a database from your Deep Origin data hub and return it as a data frame or dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database on Deep Origin.</p> required <code>use_file_names</code> <code>bool</code> <p>If <code>True</code>, refer to files by name rather than ID.</p> <code>True</code> <code>reference_format</code> <code>IDFormat</code> <p>Refer to rows on Deep Origin using human IDs or system IDs.</p> <code>'human-id'</code> <code>return_type</code> <code>DatabaseReturnType</code> <p>Whether to return a <code>pandas.Dataframe</code> or a dictionary.</p> <code>'dataframe'</code>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.get_notebook","title":"get_notebook","text":"<pre><code>get_notebook(\n    row_id: str, *, client=None, _stash: bool = False\n) -&gt; list\n</code></pre> <p>Get the notebook of a row, if it exists</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row on Deep Origin.</p> required <p>Returns:</p> Type Description <code>list</code> <p>The notebook of the row, returned as a list</p> <code>list</code> <p>of blocks</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.get_row_data","title":"get_row_data","text":"<pre><code>get_row_data(\n    row_id: str,\n    *,\n    use_column_keys: bool = False,\n    client=None,\n    _stash: bool = False\n) -&gt; dict\n</code></pre> <p>Get the data in a row.</p> <p>Read data from a row, and return it as a dictionary, where the keys are column names (or keys), and the values are the values of those cells.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row or database on Deep Origin.</p> required <code>use_column_keys</code> <code>bool</code> <p>if <code>True</code>, keys of dictionary are column keys.</p> <code>False</code> <p>Raises:</p> Type Description <code>DeepOriginException</code> <p>If row_id is not a row</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.get_tree","title":"get_tree","text":"<pre><code>get_tree(\n    *,\n    include_rows: bool = True,\n    client=None,\n    _stash: bool = False\n) -&gt; list\n</code></pre> <p>Construct a tree of all folders (workspaces), databases and rows.</p> <p>Returns a tree that contains all folders, databases and (optionally) rows. The tree is returned as a dictionary, and children of each object are contained in a field called <code>children</code>.</p> <p>Parameters:</p> Name Type Description Default <code>include_rows</code> <code>bool</code> <p>If <code>True</code>, rows are included in the tree.</p> <code>True</code> <p>Returns:</p> Type Description <code>list</code> <p>A dictionary describing the tree structure of all folders</p> <code>list</code> <p>and databases.</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.list_files","title":"list_files","text":"<pre><code>list_files(\n    *,\n    assigned_row_ids: Optional[list[str]] = None,\n    is_unassigned: Optional[bool] = None,\n    file_ids: Optional[list[str]] = None,\n    client=None,\n    _stash: bool = False\n) -&gt; list\n</code></pre> <p>List files, with option to filter by assigned rows, assigned status</p> <p>Returns a list of files.</p> <p>Parameters:</p> Name Type Description Default <code>assigned_row_ids</code> <code>Optional[list[str]]</code> <p>List of IDs of rows that files are assigned to</p> <code>None</code> <code>is_unassigned</code> <code>Optional[bool]</code> <p>If <code>True</code> only files that are unassigned will be returned</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of files, where each entry is an object that corresponds to a file on Deep Origin</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.list_rows","title":"list_rows","text":"<pre><code>list_rows(\n    *,\n    parent_id: Optional[str] = None,\n    row_type: ObjectType = None,\n    parent_is_root: Optional[bool] = None,\n    client=None,\n    _stash: bool = False\n) -&gt; list\n</code></pre> <p>List rows in a database or folder (workspace).</p> <p>Returns a list of rows from folders and databases, based on the parent, row type, or whether the parent is the root.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>Optional[str]</code> <p>ID (or human ID) or the parent.</p> <code>None</code> <code>row_type</code> <code>ObjectType</code> <p>One of <code>row</code>, <code>folder</code>, or <code>database</code>.</p> <code>None</code> <code>parent_is_root</code> <code>Optional[bool]</code> <p>If <code>True</code> only rows that are children of the root will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>A list of objects, where each entry corresponds to a row.</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.make_database_rows","title":"make_database_rows","text":"<pre><code>make_database_rows(\n    database_id: str,\n    n_rows: int = 1,\n    *,\n    client=None,\n    _stash: bool = False\n) -&gt; dict\n</code></pre> <p>Makes one or several new row(s) in a database table</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID or Human ID of the database</p> required <code>n_rows</code> <code>int</code> <p>Number of rows to create. Must be an integer greater than 0</p> <code>1</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a EnsureRowsResponse</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.row_to_dict","title":"row_to_dict","text":"<pre><code>row_to_dict(\n    row: dict,\n    *,\n    file_ids: Optional[list] = None,\n    reference_ids: Optional[list] = None\n) -&gt; dict\n</code></pre> <p>convert a database row (as returned by api.list_database_rows) to a dictionary where keys are column IDs and values are the values in the row</p> This function mutates inputs <p>This function mutates file_ids and reference_ids</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>dict</code> <p>database row (as returned by api.list_database_rows)</p> required <code>file_ids</code> <code>Optional[list]</code> <p>list of file IDs, will be mutated in-place</p> <code>None</code> <code>reference_ids</code> <code>Optional[list]</code> <p>list of reference IDs, will be mutated in-place</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>dict</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.set_cell_data","title":"set_cell_data","text":"<pre><code>set_cell_data(\n    value: Any,\n    *,\n    database_id: str,\n    row_id: str,\n    column_id: str,\n    client=None,\n    _stash: bool = False\n) -&gt; Any\n</code></pre> <p>Set data in a cell to some value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Value to set in the cell</p> required <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database</p> required <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row</p> required <code>column_id</code> <code>str</code> <p>ID (or human ID) of a column</p> required"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.set_data_in_cells","title":"set_data_in_cells","text":"<pre><code>set_data_in_cells(\n    *,\n    values: list,\n    row_ids: list[str],\n    column_id: str,\n    database_id: str,\n    columns: Optional[list[dict]] = None,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Set data in multiple cells to some value.</p>"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.upload_file","title":"upload_file","text":"<pre><code>upload_file(\n    file_path: str,\n    *,\n    client=None,\n    _stash: bool = False,\n    compute_hash: bool = True\n)\n</code></pre> <p>Upload a file to Deep Origin.</p> <p>This upload files to your Deep Origin data hub. To assign this file to a cell, next run assign_files_to_cell</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the file to upload</p> required"},{"location":"data-hub/ref/high-level-api.html#src.data_hub.api.upload_file_to_new_database_row","title":"upload_file_to_new_database_row","text":"<pre><code>upload_file_to_new_database_row(\n    *,\n    database_id: str,\n    file_path: str,\n    column_id: str,\n    client=None,\n    _stash: bool = False\n)\n</code></pre> <p>Upload a file to a new row in a database.</p> <p>Upload a file to a new row in a database. This utility function wraps two other functions:</p> <ul> <li>upload_file</li> <li>assign_files_to_cell</li> </ul> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database.</p> required <code>file_path</code> <code>str</code> <p>Path to the file to upload.</p> required <code>column_id</code> <code>str</code> <p>ID (or human ID) of a column in the database.</p> required"},{"location":"data-hub/ref/low-level-api.html","title":"API reference: Low-level API","text":""},{"location":"data-hub/ref/low-level-api.html#background","title":"Background","text":"<p>We use automatically generated code to implement a low-level Python SDK that connects to the Deep Origin data hub API. This page describes that API. In most cases, you will not need to know how this works, nor will you need to use it.</p> <p>Using the methods in the DeeporiginData class</p> <p>The <code>deeporigin.api</code> module provides wrappers that allow you to use methods in the <code>deeporigin_data.DeeporiginData</code> class, without needing to instantiate an object and configure it. Each method of this class is exposed as a function with the same name. These functions enable you to easily use the methods of the <code>deeporigin_data.DeeporiginData</code> class.</p> <p>For example, to use the list_files method in the <code>DeeporiginData</code> class, run:</p> <pre><code>from deeporigin.data_hub import api\napi.list_files()\n</code></pre> <p>Your IDE should be able to provide information about the arguments and return types of these functions by typing <code>api.list_files(</code> and then pressing tab.    </p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData","title":"AsyncDeeporiginData","text":"<p>               Bases: <code>AsyncAPIClient</code></p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    token: str | None = None,\n    org_id: str | None = None,\n    base_url: str | URL | None = None,\n    timeout: Union[\n        float, Timeout, None, NotGiven\n    ] = NOT_GIVEN,\n    max_retries: int = DEFAULT_MAX_RETRIES,\n    default_headers: Mapping[str, str] | None = None,\n    default_query: Mapping[str, object] | None = None,\n    http_client: AsyncClient | None = None,\n    _strict_response_validation: bool = False\n) -&gt; None\n</code></pre> <p>This automatically infers the following arguments from their corresponding environment variables if they are not provided: - <code>token</code> from <code>ORG_BEARER_TOKEN</code> - <code>org_id</code> from <code>ORG_ID</code></p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.add_database_column","title":"add_database_column  <code>async</code>","text":"<pre><code>add_database_column(\n    *,\n    column: Column,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; AddDatabaseColumnResponse\n</code></pre> <p>Add a column to a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.archive_files","title":"archive_files  <code>async</code>","text":"<pre><code>archive_files(\n    *,\n    file_ids: List[str],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; object\n</code></pre> <p>Archive files by their ids.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.chat_create_thread","title":"chat_create_thread  <code>async</code>","text":"<pre><code>chat_create_thread(\n    *,\n    body: object,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ChatCreateThreadResponse\n</code></pre> <p>Create a new chat thread.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.chat_list_messages","title":"chat_list_messages  <code>async</code>","text":"<pre><code>chat_list_messages(\n    *,\n    thread_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ChatListMessagesResponse\n</code></pre> <p>List messages in a chat thread.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.chat_send_message","title":"chat_send_message  <code>async</code>","text":"<pre><code>chat_send_message(\n    *,\n    messages: Iterable[Message],\n    thread_id: str,\n    context: Context | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; None\n</code></pre> <p>Send a chat message to the Deep Origin assistant and streams results via SSE.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the underlying HTTPX client.</p> <p>The client will not be usable after this.</p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.configure_column_select_options","title":"configure_column_select_options  <code>async</code>","text":"<pre><code>configure_column_select_options(\n    *,\n    column_id: str,\n    database_id: str,\n    option_configuration: Iterable[OptionConfiguration],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ConfigureColumnSelectOptionsResponse\n</code></pre> <p>Configure column select options.</p> <p>Supports both adding and removing options.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.convert_id_format","title":"convert_id_format  <code>async</code>","text":"<pre><code>convert_id_format(\n    *,\n    conversions: Iterable[Conversion],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ConvertIDFormatResponse\n</code></pre> <p>Converts between system IDs and human IDs (HIDs).</p> <p>Deprecated - prefer <code>ResolveIds</code>.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.copy","title":"copy","text":"<pre><code>copy(\n    *,\n    token: str | None = None,\n    org_id: str | None = None,\n    base_url: str | URL | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n    http_client: AsyncClient | None = None,\n    max_retries: int | NotGiven = NOT_GIVEN,\n    default_headers: Mapping[str, str] | None = None,\n    set_default_headers: Mapping[str, str] | None = None,\n    default_query: Mapping[str, object] | None = None,\n    set_default_query: Mapping[str, object] | None = None,\n    _extra_kwargs: Mapping[str, Any] = {}\n) -&gt; Self\n</code></pre> <p>Create a new client instance re-using the same options given to the current client with optional overriding.</p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.create_database","title":"create_database  <code>async</code>","text":"<pre><code>create_database(\n    *,\n    database: Database,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateDatabaseResponse\n</code></pre> <p>Create a new database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.create_file_download_url","title":"create_file_download_url  <code>async</code>","text":"<pre><code>create_file_download_url(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateFileDownloadURLResponse\n</code></pre> <p>Returns a pre-signed S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.create_file_upload","title":"create_file_upload  <code>async</code>","text":"<pre><code>create_file_upload(\n    *,\n    content_length: str,\n    name: str,\n    checksum_sha256: str | NotGiven = NOT_GIVEN,\n    content_type: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateFileUploadResponse\n</code></pre> <p>Create a file upload URL.</p> <p>Typically this is creating a pre-signed S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>checksum_sha256</code> <code>str | NotGiven</code> <p>Base64 encoded SHA256 checksum of the file.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.create_workspace","title":"create_workspace  <code>async</code>","text":"<pre><code>create_workspace(\n    *,\n    workspace: Workspace,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateWorkspaceResponse\n</code></pre> <p>Create a new workspace.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.delete_database","title":"delete_database  <code>async</code>","text":"<pre><code>delete_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteDatabaseResponse\n</code></pre> <p>Permanently deletes a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.delete_database_column","title":"delete_database_column  <code>async</code>","text":"<pre><code>delete_database_column(\n    *,\n    column_id: str,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteDatabaseColumnResponse\n</code></pre> <p>Delete a column from a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.delete_rows","title":"delete_rows  <code>async</code>","text":"<pre><code>delete_rows(\n    *,\n    database_id: str,\n    delete_all: bool | NotGiven = NOT_GIVEN,\n    row_ids: List[str] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteRowsResponse\n</code></pre> <p>Delete rows by their ids.</p> <p>Parameters:</p> Name Type Description Default <code>delete_all</code> <code>bool | NotGiven</code> <p>When true, deletes all rows in the table except rows with the specified   <code>rowIds</code>.</p> <code>NOT_GIVEN</code> <code>row_ids</code> <code>List[str] | NotGiven</code> <p>List of row IDs to delete.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.delete_workspace","title":"delete_workspace  <code>async</code>","text":"<pre><code>delete_workspace(\n    *,\n    workspace_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteWorkspaceResponse\n</code></pre> <p>Permanently deletes a workspace and all its children.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_code_execution","title":"describe_code_execution  <code>async</code>","text":"<pre><code>describe_code_execution(\n    *,\n    id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeCodeExecutionResponse\n</code></pre> <p>Returns information about a particular code execution.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_database","title":"describe_database  <code>async</code>","text":"<pre><code>describe_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeDatabaseResponse\n</code></pre> <p>Describe a database</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_database_row","title":"describe_database_row  <code>async</code>","text":"<pre><code>describe_database_row(\n    *,\n    row_id: str,\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    database_id: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeDatabaseRowResponse\n</code></pre> <p>Describe a database row</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_database_stats","title":"describe_database_stats  <code>async</code>","text":"<pre><code>describe_database_stats(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeDatabaseStatsResponse\n</code></pre> <p>Returns aggregation information about a particular database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_file","title":"describe_file  <code>async</code>","text":"<pre><code>describe_file(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeFileResponse\n</code></pre> <p>Describe a file by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_hierarchy","title":"describe_hierarchy  <code>async</code>","text":"<pre><code>describe_hierarchy(\n    *,\n    id: str,\n    type: Literal[\"database\", \"row\", \"workspace\"],\n    database_id: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeHierarchyResponse\n</code></pre> <p>Describe the hierarchical position of an entity.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_row","title":"describe_row  <code>async</code>","text":"<pre><code>describe_row(\n    *,\n    row_id: str,\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    fields: bool | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeRowResponse\n</code></pre> <p>Deprecated.</p> <p>Use DescribeDatabaseRow, DescribeDatabase, or DescribeWorkspace instead.</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.describe_workspace","title":"describe_workspace  <code>async</code>","text":"<pre><code>describe_workspace(\n    *,\n    workspace_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeWorkspaceResponse\n</code></pre> <p>Describe a workspace</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.download_file","title":"download_file  <code>async</code>","text":"<pre><code>download_file(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; None\n</code></pre> <p>Returns a 303 redirect to a pre-signed S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.ensure_rows","title":"ensure_rows  <code>async</code>","text":"<pre><code>ensure_rows(\n    *,\n    database_id: str,\n    rows: Iterable[Row],\n    check_previous_value: bool | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; EnsureRowsResponse\n</code></pre> <p>Either creates or updates an existing row.</p> <p>Supports updates to both system and user defined columns.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.execute_code_async","title":"execute_code_async  <code>async</code>","text":"<pre><code>execute_code_async(\n    *,\n    code: str,\n    code_language: Literal[\"python\"],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ExecuteCodeAsyncResponse\n</code></pre> <p>Execute code asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.execute_code_sync","title":"execute_code_sync  <code>async</code>","text":"<pre><code>execute_code_sync(\n    *,\n    code: str,\n    code_language: Literal[\"python\"],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ExecuteCodeSyncResponse\n</code></pre> <p>Execute code synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.export_database","title":"export_database  <code>async</code>","text":"<pre><code>export_database(\n    *,\n    database_id: str,\n    format: Literal[\"csv\"],\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    filter: Filter | NotGiven = NOT_GIVEN,\n    row_sort: Iterable[RowSort] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; AsyncBinaryAPIResponse\n</code></pre> <p>Exports a database to a file.</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>row_sort</code> <code>Iterable[RowSort] | NotGiven</code> <p>Sort rows by column.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.get_code_execution_result","title":"get_code_execution_result  <code>async</code>","text":"<pre><code>get_code_execution_result(\n    *,\n    id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; object\n</code></pre> <p>Returns the result of a code execution.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.import_rows","title":"import_rows  <code>async</code>","text":"<pre><code>import_rows(\n    *,\n    database_id: str,\n    add_columns: Iterable[AddColumn] | NotGiven = NOT_GIVEN,\n    creation_block_id: str | NotGiven = NOT_GIVEN,\n    creation_parent_id: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ImportRowsResponse\n</code></pre> <p>Creates new rows from CSV data.</p> <p>Parameters:</p> Name Type Description Default <code>add_columns</code> <code>Iterable[AddColumn] | NotGiven</code> <p>Optionally add additional columns to the database during import.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.list_database_column_unique_values_v2","title":"list_database_column_unique_values_v2  <code>async</code>","text":"<pre><code>list_database_column_unique_values_v2(\n    *,\n    column_id: str,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListDatabaseColumnUniqueValuesV2Response\n</code></pre> <p>Returns the unique values for every cell within the column.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.list_database_rows","title":"list_database_rows  <code>async</code>","text":"<pre><code>list_database_rows(\n    *,\n    database_row_id: str,\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    filter: Filter | NotGiven = NOT_GIVEN,\n    limit: int | NotGiven = NOT_GIVEN,\n    offset: int | NotGiven = NOT_GIVEN,\n    row_sort: Iterable[RowSort] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListDatabaseRowsResponse\n</code></pre> <p>List database rows with full row data.</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>row_sort</code> <code>Iterable[RowSort] | NotGiven</code> <p>Sort rows by column.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.list_files","title":"list_files  <code>async</code>","text":"<pre><code>list_files(\n    *,\n    filters: Iterable[Filter] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListFilesResponse\n</code></pre> <p>Returns a list of files using the filters.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.list_mentions","title":"list_mentions  <code>async</code>","text":"<pre><code>list_mentions(\n    *,\n    query: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListMentionsResponse\n</code></pre> <p>Returns entities that can be mentioned in a notebook.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.list_row_back_references","title":"list_row_back_references  <code>async</code>","text":"<pre><code>list_row_back_references(\n    *,\n    database_id: str,\n    row_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListRowBackReferencesResponse\n</code></pre> <p>Finds all the places a row is referenced.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.list_rows","title":"list_rows  <code>async</code>","text":"<pre><code>list_rows(\n    *,\n    filters: Iterable[Filter],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListRowsResponse\n</code></pre> <p>Lists rows at a given depth in the hierarchy.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.lock_database","title":"lock_database  <code>async</code>","text":"<pre><code>lock_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; LockDatabaseResponse\n</code></pre> <p>A locked database cannot be edited.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.parse_base_sequence_data","title":"parse_base_sequence_data  <code>async</code>","text":"<pre><code>parse_base_sequence_data(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ParseBaseSequenceDataResponse\n</code></pre> <p>Parses a base sequence file and returns the parsed result.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.resolve_ids","title":"resolve_ids  <code>async</code>","text":"<pre><code>resolve_ids(\n    *,\n    database_ids: List[str] | NotGiven = NOT_GIVEN,\n    rows: Iterable[Row] | NotGiven = NOT_GIVEN,\n    workspace_ids: List[str] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ResolveIDsResponse\n</code></pre> <p>Resolves between system IDs and human IDs (HIDs).</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.unlock_database","title":"unlock_database  <code>async</code>","text":"<pre><code>unlock_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UnlockDatabaseResponse\n</code></pre> <p>An unlocked database can be edited.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.update_database","title":"update_database  <code>async</code>","text":"<pre><code>update_database(\n    *,\n    id: str,\n    database: Database,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UpdateDatabaseResponse\n</code></pre> <p>Update a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.update_database_column","title":"update_database_column  <code>async</code>","text":"<pre><code>update_database_column(\n    *,\n    column: Column,\n    column_id: str,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UpdateDatabaseColumnResponse\n</code></pre> <p>Update a column in a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.AsyncDeeporiginData.update_workspace","title":"update_workspace  <code>async</code>","text":"<pre><code>update_workspace(\n    *,\n    id: str,\n    workspace: Workspace,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UpdateWorkspaceResponse\n</code></pre> <p>Update a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData","title":"DeeporiginData","text":"<p>               Bases: <code>SyncAPIClient</code></p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    token: str | None = None,\n    org_id: str | None = None,\n    base_url: str | URL | None = None,\n    timeout: Union[\n        float, Timeout, None, NotGiven\n    ] = NOT_GIVEN,\n    max_retries: int = DEFAULT_MAX_RETRIES,\n    default_headers: Mapping[str, str] | None = None,\n    default_query: Mapping[str, object] | None = None,\n    http_client: Client | None = None,\n    _strict_response_validation: bool = False\n) -&gt; None\n</code></pre> <p>This automatically infers the following arguments from their corresponding environment variables if they are not provided: - <code>token</code> from <code>ORG_BEARER_TOKEN</code> - <code>org_id</code> from <code>ORG_ID</code></p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.add_database_column","title":"add_database_column","text":"<pre><code>add_database_column(\n    *,\n    column: Column,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; AddDatabaseColumnResponse\n</code></pre> <p>Add a column to a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.archive_files","title":"archive_files","text":"<pre><code>archive_files(\n    *,\n    file_ids: List[str],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; object\n</code></pre> <p>Archive files by their ids.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.chat_create_thread","title":"chat_create_thread","text":"<pre><code>chat_create_thread(\n    *,\n    body: object,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ChatCreateThreadResponse\n</code></pre> <p>Create a new chat thread.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.chat_list_messages","title":"chat_list_messages","text":"<pre><code>chat_list_messages(\n    *,\n    thread_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ChatListMessagesResponse\n</code></pre> <p>List messages in a chat thread.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.chat_send_message","title":"chat_send_message","text":"<pre><code>chat_send_message(\n    *,\n    messages: Iterable[Message],\n    thread_id: str,\n    context: Context | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; None\n</code></pre> <p>Send a chat message to the Deep Origin assistant and streams results via SSE.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.close","title":"close","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the underlying HTTPX client.</p> <p>The client will not be usable after this.</p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.configure_column_select_options","title":"configure_column_select_options","text":"<pre><code>configure_column_select_options(\n    *,\n    column_id: str,\n    database_id: str,\n    option_configuration: Iterable[OptionConfiguration],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ConfigureColumnSelectOptionsResponse\n</code></pre> <p>Configure column select options.</p> <p>Supports both adding and removing options.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.convert_id_format","title":"convert_id_format","text":"<pre><code>convert_id_format(\n    *,\n    conversions: Iterable[Conversion],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ConvertIDFormatResponse\n</code></pre> <p>Converts between system IDs and human IDs (HIDs).</p> <p>Deprecated - prefer <code>ResolveIds</code>.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.copy","title":"copy","text":"<pre><code>copy(\n    *,\n    token: str | None = None,\n    org_id: str | None = None,\n    base_url: str | URL | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n    http_client: Client | None = None,\n    max_retries: int | NotGiven = NOT_GIVEN,\n    default_headers: Mapping[str, str] | None = None,\n    set_default_headers: Mapping[str, str] | None = None,\n    default_query: Mapping[str, object] | None = None,\n    set_default_query: Mapping[str, object] | None = None,\n    _extra_kwargs: Mapping[str, Any] = {}\n) -&gt; Self\n</code></pre> <p>Create a new client instance re-using the same options given to the current client with optional overriding.</p>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.create_database","title":"create_database","text":"<pre><code>create_database(\n    *,\n    database: Database,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateDatabaseResponse\n</code></pre> <p>Create a new database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.create_file_download_url","title":"create_file_download_url","text":"<pre><code>create_file_download_url(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateFileDownloadURLResponse\n</code></pre> <p>Returns a pre-signed S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.create_file_upload","title":"create_file_upload","text":"<pre><code>create_file_upload(\n    *,\n    content_length: str,\n    name: str,\n    checksum_sha256: str | NotGiven = NOT_GIVEN,\n    content_type: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateFileUploadResponse\n</code></pre> <p>Create a file upload URL.</p> <p>Typically this is creating a pre-signed S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>checksum_sha256</code> <code>str | NotGiven</code> <p>Base64 encoded SHA256 checksum of the file.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.create_workspace","title":"create_workspace","text":"<pre><code>create_workspace(\n    *,\n    workspace: Workspace,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; CreateWorkspaceResponse\n</code></pre> <p>Create a new workspace.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.delete_database","title":"delete_database","text":"<pre><code>delete_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteDatabaseResponse\n</code></pre> <p>Permanently deletes a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.delete_database_column","title":"delete_database_column","text":"<pre><code>delete_database_column(\n    *,\n    column_id: str,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteDatabaseColumnResponse\n</code></pre> <p>Delete a column from a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.delete_rows","title":"delete_rows","text":"<pre><code>delete_rows(\n    *,\n    database_id: str,\n    delete_all: bool | NotGiven = NOT_GIVEN,\n    row_ids: List[str] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteRowsResponse\n</code></pre> <p>Delete rows by their ids.</p> <p>Parameters:</p> Name Type Description Default <code>delete_all</code> <code>bool | NotGiven</code> <p>When true, deletes all rows in the table except rows with the specified   <code>rowIds</code>.</p> <code>NOT_GIVEN</code> <code>row_ids</code> <code>List[str] | NotGiven</code> <p>List of row IDs to delete.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.delete_workspace","title":"delete_workspace","text":"<pre><code>delete_workspace(\n    *,\n    workspace_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DeleteWorkspaceResponse\n</code></pre> <p>Permanently deletes a workspace and all its children.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_code_execution","title":"describe_code_execution","text":"<pre><code>describe_code_execution(\n    *,\n    id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeCodeExecutionResponse\n</code></pre> <p>Returns information about a particular code execution.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_database","title":"describe_database","text":"<pre><code>describe_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeDatabaseResponse\n</code></pre> <p>Describe a database</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_database_row","title":"describe_database_row","text":"<pre><code>describe_database_row(\n    *,\n    row_id: str,\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    database_id: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeDatabaseRowResponse\n</code></pre> <p>Describe a database row</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_database_stats","title":"describe_database_stats","text":"<pre><code>describe_database_stats(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeDatabaseStatsResponse\n</code></pre> <p>Returns aggregation information about a particular database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_file","title":"describe_file","text":"<pre><code>describe_file(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeFileResponse\n</code></pre> <p>Describe a file by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_hierarchy","title":"describe_hierarchy","text":"<pre><code>describe_hierarchy(\n    *,\n    id: str,\n    type: Literal[\"database\", \"row\", \"workspace\"],\n    database_id: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeHierarchyResponse\n</code></pre> <p>Describe the hierarchical position of an entity.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_row","title":"describe_row","text":"<pre><code>describe_row(\n    *,\n    row_id: str,\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    fields: bool | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeRowResponse\n</code></pre> <p>Deprecated.</p> <p>Use DescribeDatabaseRow, DescribeDatabase, or DescribeWorkspace instead.</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.describe_workspace","title":"describe_workspace","text":"<pre><code>describe_workspace(\n    *,\n    workspace_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; DescribeWorkspaceResponse\n</code></pre> <p>Describe a workspace</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.download_file","title":"download_file","text":"<pre><code>download_file(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; None\n</code></pre> <p>Returns a 303 redirect to a pre-signed S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.ensure_rows","title":"ensure_rows","text":"<pre><code>ensure_rows(\n    *,\n    database_id: str,\n    rows: Iterable[Row],\n    check_previous_value: bool | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; EnsureRowsResponse\n</code></pre> <p>Either creates or updates an existing row.</p> <p>Supports updates to both system and user defined columns.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.execute_code_async","title":"execute_code_async","text":"<pre><code>execute_code_async(\n    *,\n    code: str,\n    code_language: Literal[\"python\"],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ExecuteCodeAsyncResponse\n</code></pre> <p>Execute code asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.execute_code_sync","title":"execute_code_sync","text":"<pre><code>execute_code_sync(\n    *,\n    code: str,\n    code_language: Literal[\"python\"],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ExecuteCodeSyncResponse\n</code></pre> <p>Execute code synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.export_database","title":"export_database","text":"<pre><code>export_database(\n    *,\n    database_id: str,\n    format: Literal[\"csv\"],\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    filter: Filter | NotGiven = NOT_GIVEN,\n    row_sort: Iterable[RowSort] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; BinaryAPIResponse\n</code></pre> <p>Exports a database to a file.</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>row_sort</code> <code>Iterable[RowSort] | NotGiven</code> <p>Sort rows by column.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.get_code_execution_result","title":"get_code_execution_result","text":"<pre><code>get_code_execution_result(\n    *,\n    id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; object\n</code></pre> <p>Returns the result of a code execution.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Deep Origin system ID.</p> required <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.import_rows","title":"import_rows","text":"<pre><code>import_rows(\n    *,\n    database_id: str,\n    add_columns: Iterable[AddColumn] | NotGiven = NOT_GIVEN,\n    creation_block_id: str | NotGiven = NOT_GIVEN,\n    creation_parent_id: str | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ImportRowsResponse\n</code></pre> <p>Creates new rows from CSV data.</p> <p>Parameters:</p> Name Type Description Default <code>add_columns</code> <code>Iterable[AddColumn] | NotGiven</code> <p>Optionally add additional columns to the database during import.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.list_database_column_unique_values_v2","title":"list_database_column_unique_values_v2","text":"<pre><code>list_database_column_unique_values_v2(\n    *,\n    column_id: str,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListDatabaseColumnUniqueValuesV2Response\n</code></pre> <p>Returns the unique values for every cell within the column.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.list_database_rows","title":"list_database_rows","text":"<pre><code>list_database_rows(\n    *,\n    database_row_id: str,\n    column_selection: (\n        ColumnSelection | NotGiven\n    ) = NOT_GIVEN,\n    filter: Filter | NotGiven = NOT_GIVEN,\n    limit: int | NotGiven = NOT_GIVEN,\n    offset: int | NotGiven = NOT_GIVEN,\n    row_sort: Iterable[RowSort] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListDatabaseRowsResponse\n</code></pre> <p>List database rows with full row data.</p> <p>Parameters:</p> Name Type Description Default <code>column_selection</code> <code>ColumnSelection | NotGiven</code> <p>Select columns for inclusion/exclusion.</p> <code>NOT_GIVEN</code> <code>row_sort</code> <code>Iterable[RowSort] | NotGiven</code> <p>Sort rows by column.</p> <code>NOT_GIVEN</code> <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.list_files","title":"list_files","text":"<pre><code>list_files(\n    *,\n    filters: Iterable[Filter] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListFilesResponse\n</code></pre> <p>Returns a list of files using the filters.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.list_mentions","title":"list_mentions","text":"<pre><code>list_mentions(\n    *,\n    query: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListMentionsResponse\n</code></pre> <p>Returns entities that can be mentioned in a notebook.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.list_row_back_references","title":"list_row_back_references","text":"<pre><code>list_row_back_references(\n    *,\n    database_id: str,\n    row_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListRowBackReferencesResponse\n</code></pre> <p>Finds all the places a row is referenced.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.list_rows","title":"list_rows","text":"<pre><code>list_rows(\n    *,\n    filters: Iterable[Filter],\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ListRowsResponse\n</code></pre> <p>Lists rows at a given depth in the hierarchy.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.lock_database","title":"lock_database","text":"<pre><code>lock_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; LockDatabaseResponse\n</code></pre> <p>A locked database cannot be edited.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.parse_base_sequence_data","title":"parse_base_sequence_data","text":"<pre><code>parse_base_sequence_data(\n    *,\n    file_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ParseBaseSequenceDataResponse\n</code></pre> <p>Parses a base sequence file and returns the parsed result.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.resolve_ids","title":"resolve_ids","text":"<pre><code>resolve_ids(\n    *,\n    database_ids: List[str] | NotGiven = NOT_GIVEN,\n    rows: Iterable[Row] | NotGiven = NOT_GIVEN,\n    workspace_ids: List[str] | NotGiven = NOT_GIVEN,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; ResolveIDsResponse\n</code></pre> <p>Resolves between system IDs and human IDs (HIDs).</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.unlock_database","title":"unlock_database","text":"<pre><code>unlock_database(\n    *,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UnlockDatabaseResponse\n</code></pre> <p>An unlocked database can be edited.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.update_database","title":"update_database","text":"<pre><code>update_database(\n    *,\n    id: str,\n    database: Database,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UpdateDatabaseResponse\n</code></pre> <p>Update a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.update_database_column","title":"update_database_column","text":"<pre><code>update_database_column(\n    *,\n    column: Column,\n    column_id: str,\n    database_id: str,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UpdateDatabaseColumnResponse\n</code></pre> <p>Update a column in a database.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/low-level-api.html#deeporigin_data._client.DeeporiginData.update_workspace","title":"update_workspace","text":"<pre><code>update_workspace(\n    *,\n    id: str,\n    workspace: Workspace,\n    extra_headers: Headers | None = None,\n    extra_query: Query | None = None,\n    extra_body: Body | None = None,\n    timeout: float | Timeout | None | NotGiven = NOT_GIVEN\n) -&gt; UpdateWorkspaceResponse\n</code></pre> <p>Update a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>extra_headers</code> <code>Headers | None</code> <p>Send extra headers</p> <code>None</code> <code>extra_query</code> <code>Query | None</code> <p>Add additional query parameters to the request</p> <code>None</code> <code>extra_body</code> <code>Body | None</code> <p>Add additional JSON properties to the request</p> <code>None</code> <code>timeout</code> <code>float | Timeout | None | NotGiven</code> <p>Override the client-level default timeout for this request, in seconds</p> <code>NOT_GIVEN</code>"},{"location":"data-hub/ref/types.html","title":"Classes and constants","text":"<p>This page lists some classes, types and constants used in this library.</p>"},{"location":"data-hub/ref/types.html#src.data_hub.dataframe.DataFrame","title":"src.data_hub.dataframe.DataFrame","text":"<p>               Bases: <code>DataFrame</code></p> <p>A subclass of pandas DataFrame that allows for easy updating of a Deep Origin database. This can be used as a drop-in replacement for a pandas DataFrame, and should support all methods a pandas DataFrame supports.</p> <p>The primary method of creating an object of this type is to use the from_deeporigin class method.</p>"},{"location":"data-hub/ref/types.html#src.data_hub.dataframe.DataFrame.auto_sync","title":"auto_sync  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>auto_sync: bool = False\n</code></pre> <p>When <code>True</code>, changes made to the dataframe will be automatically synced to the Deep Origin database this dataframe represents.</p>"},{"location":"data-hub/ref/types.html#src.data_hub.dataframe.DataFrame.from_deeporigin","title":"from_deeporigin  <code>classmethod</code>","text":"<pre><code>from_deeporigin(\n    database_id: str,\n    *,\n    use_file_names: bool = True,\n    reference_format: IDFormat = \"human-id\",\n    filter: Optional[dict] = None,\n    client=None\n)\n</code></pre> <p>Create a local Deep Origin DataFrame from a Deep Origin database.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>The ID of the Deep Origin database.</p> required <code>use_file_names</code> <code>bool</code> <p>Whether to use the file names in the Deep Origin database. Defaults to True.</p> <code>True</code> <code>reference_format</code> <code>IDFormat</code> <p>The format of the IDs in the Deep Origin database. Defaults to \"human-id\".</p> <code>'human-id'</code>"},{"location":"data-hub/ref/types.html#src.data_hub.dataframe.DataFrame.to_deeporigin","title":"to_deeporigin","text":"<pre><code>to_deeporigin()\n</code></pre> <p>Write data in dataframe to Deep Origin</p> <p>Deep Origin DataFrames can automatically synchronize</p> <p>To automatically save changes to local DataFrames to Deep Origin databases, set the <code>auto_sync</code> attribute of the dataframe <code>True</code>.</p>"},{"location":"data-hub/ref/types.html#src.utils.constants","title":"src.utils.constants","text":"<p>this module contains constants used in the rest of this library</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.Cardinality","title":"Cardinality  <code>module-attribute</code>","text":"<pre><code>Cardinality = Literal['one', 'many']\n</code></pre> <p>The cardinality defines whether a cell in a database can contain one or multiple objects</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.DataType","title":"DataType  <code>module-attribute</code>","text":"<pre><code>DataType = Literal[\n    \"integer\",\n    \"select\",\n    \"date\",\n    \"text\",\n    \"file\",\n    \"reference\",\n    \"editor\",\n    \"float\",\n    \"boolean\",\n]\n</code></pre> <p>Type of a column in a Deep Origin database. See this page in the documentation for more information.</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.DatabaseReturnType","title":"DatabaseReturnType  <code>module-attribute</code>","text":"<pre><code>DatabaseReturnType = Literal['dataframe', 'dict']\n</code></pre> <p>Return type for api.get_dataframe</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.FileStatus","title":"FileStatus  <code>module-attribute</code>","text":"<pre><code>FileStatus = Literal['ready', 'archived']\n</code></pre> <p>Status of a file. Ready files are ready to be used, downloaded, and operated on.</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.IDFormat","title":"IDFormat  <code>module-attribute</code>","text":"<pre><code>IDFormat = Literal['human-id', 'system-id']\n</code></pre> <p>Format of an ID</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.ObjectType","title":"ObjectType  <code>module-attribute</code>","text":"<pre><code>ObjectType = Literal['row', 'database', 'workspace']\n</code></pre> <p>Type of a row. In Deep Origin, a row can be a database row, a database or a workspace</p>"},{"location":"data-hub/ref/types.html#src.utils.constants.PREFIXES","title":"PREFIXES  <code>dataclass</code>","text":"<p>Prefixes for CLI and Python client</p>"},{"location":"dd/how-to/complex.html","title":"Work with a Complex","text":"<p>This document describes how to create a <code>Complex</code> object, that can be used to run Docking, ABFE and RBFE. </p>"},{"location":"dd/how-to/complex.html#creating-a-complex","title":"Creating a Complex","text":""},{"location":"dd/how-to/complex.html#from-a-directory","title":"From a directory","text":"<pre><code># here, we're using the example data directory\nfrom deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n</code></pre> <p>The directory should contain:</p> <ul> <li>exactly one PDB file for the protein</li> <li>one or more SDF files for the ligands. Each SDF file can contain one or more molecules.</li> </ul>"},{"location":"dd/how-to/complex.html#from-protein-and-ligand-objects","title":"From <code>Protein</code> and <code>Ligand</code> objects","text":"<p>A <code>Complex</code> object can be also be constructed using <code>Protein</code> and <code>Ligand</code> objects. </p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR, Protein, Ligand\n\nprotein = Protein.from_file(EXAMPLE_DATA_DIR / \"brd.pdb\")\nligand = Ligand.from_sdf(EXAMPLE_DATA_DIR / \"brd-2.sdf\")\n\nsim = Complex(protein=protein, ligands=[ligand])\n</code></pre>"},{"location":"dd/how-to/complex.html#modifying-a-complex","title":"Modifying a Complex","text":"<p>You can modify a Complex object by adding or replacing ligands. </p> <p>```python notest from deeporigin.drug_discovery import Complex, Protein, Ligand protein = Protein.from_file(EXAMPLE_DATA_DIR / \"brd.pdb\") ligand = Ligand.from_sdf(EXAMPLE_DATA_DIR / \"brd-2.sdf\")</p>"},{"location":"dd/how-to/complex.html#create-a-complex-with-just-the-protein","title":"Create a complex with just the protein","text":"<p>sim = Complex(protein=protein, ligands=[])</p>"},{"location":"dd/how-to/complex.html#add-a-single-ligand","title":"Add a single ligand","text":"<p>new_ligand = Ligand.from_sdf(\"ligand.sdf\") sim.ligands = sim.ligands + [new_ligand]</p>"},{"location":"dd/how-to/complex.html#add-multiple-ligands","title":"Add multiple ligands","text":"<p>more_ligands = Ligand.from_sdf(\"multiple_ligands.sdf\")  # Returns a list if file contains multiple molecules sim.ligands = sim.ligands + more_ligands</p>"},{"location":"dd/how-to/complex.html#replace-all-ligands","title":"Replace all ligands","text":"<p>sim.ligands = [new_ligand]  # Replace with a single ligand <pre><code>??? tip \"Constructing Ligands\"\n    To see how to construct Ligands, see [this](./ligands.md)\n\n??? tip \"Constructing the Protein\"\n    To see how to construct the Protein, see [this](./proteins.md)\n\n## Preparing a complex\n\nTo prepare a protein-ligand complex for simulation or further analysis, use the `Complex.prepare()` method. This method runs system preparation on a given ligand in the context of the complex's protein, handling tasks such as protonation, water retention, and box padding.\n\n### Usage\n\n```python notest\nsim.prepare(ligand)\n</code></pre></p> <p>Typically, you would call this method using a ligand in the complex:</p> <p>```python notest sim.prepare(sim.ligands[0]) <pre><code>### Arguments\n\n- `ligand` (`Ligand`): The ligand to prepare. This should be an instance of the `Ligand` class associated with your complex.\n- `padding` (`float`, optional): Padding (in angstroms) to add around the system. Default is `1.0`.\n- `keep_waters` (`bool`, optional): Whether to keep water molecules in the prepared system. Default is `False`.\n- `is_lig_protonated` (`bool`, optional): Whether the ligand is already protonated. Default is `True`.\n- `is_protein_protonated` (`bool`, optional): Whether the protein is already protonated. Default is `True`.\n\nYou can override any of these defaults as needed:\n\n```python notest\nsim.prepare(\n    ligand,\n    padding=2.0,\n    keep_waters=True,\n    is_lig_protonated=False,\n    is_protein_protonated=False,\n)\n</code></pre></p>"},{"location":"dd/how-to/complex.html#what-happens-during-preparation","title":"What happens during preparation?","text":"<ul> <li>The method calls the system preparation backend, which processes the protein and ligand files.</li> <li>The prepared complex is saved to a cache for efficiency.</li> <li>The resulting structure can be visualized or used for downstream workflows.</li> </ul> <p>After preparation, the prepared complex structure will be shown automatically.</p>"},{"location":"dd/how-to/filter-docking-outputs.html","title":"Filter outputs of Docking","text":"<p>This document describes how to filter the outputs of Docking based on various properties. </p> <p>Here we assume that you have constructed a <code>Complex</code> object and successfully run Docking.  Following convention, we assume that the <code>Complex</code> object is called <code>sim</code>.</p>"},{"location":"dd/how-to/filter-docking-outputs.html#fetch-docking-results","title":"Fetch Docking results","text":"<p>First, we get the results of Docking in a pandas DataFrame using:</p> <p>```python notest df = sim.docking.get_results() <pre><code>## Fetch combined SDF\n\nWe can generate a single SDF file with all the poses using:\n\n```python notest\nsim.docking.get_poses(\"poses.sdf\")\n</code></pre></p>"},{"location":"dd/how-to/filter-docking-outputs.html#filter-results","title":"Filter results","text":"<p>We can now filter this dataframe using any criteria we want. For example, we can only retain ligands that have a <code>pose_score</code> greater than <code>0.9</code> using:</p> <p>```python notest df = df[df[\"pose_score\"] &gt; 0.9] <pre><code>The filtered dataframe now only has ligands that matches the required criterion. \n\n\n\n## Filter Ligands by SMILES strings\n\nWe can create a new SDF file with only these ligands using:\n\n```python notest\nfrom deeporigin.drug_discovery import Ligand\n\nligands = Ligand.from_sdf(\"..path/to/poses.sdf\") # from docking \n\nsmiles_strings = df[\"SMILES\"]\n\nligands = [ligand for ligand in ligands if ligand.properties[\"SMILES\"] in smiles_strings]\n</code></pre></p>"},{"location":"dd/how-to/ligands.html","title":"Work with ligands","text":"<p>This document describes how to work with ligands (molecules) and use them in Deep Origin tools. </p>"},{"location":"dd/how-to/ligands.html#the-ligand-class","title":"The <code>Ligand</code> class","text":"<p>The <code>Ligand</code> class is the primary way to work with ligands in Deep Origin.</p>"},{"location":"dd/how-to/ligands.html#constructing-a-ligand","title":"Constructing a ligand","text":""},{"location":"dd/how-to/ligands.html#from-a-file","title":"From a file","text":"<p>A ligand can be constructed from a file:</p> <pre><code>from deeporigin.drug_discovery import Ligand, EXAMPLE_DATA_DIR\n\nligand = Ligand.from_sdf(EXAMPLE_DATA_DIR / \"brd-2.sdf\")\n</code></pre>"},{"location":"dd/how-to/ligands.html#from-a-smiles-string","title":"From a SMILES string","text":"<p>A ligand can be constructed from a SMILES string, which is a compact way to represent molecular structures:</p> <pre><code>from deeporigin.drug_discovery import Ligand\n\n\n# Basic usage with just a SMILES string\nligand = Ligand.from_smiles(smiles=\"CCO\")  # Ethanol\n\n# With additional parameters\nligand = Ligand.from_smiles(\n    smiles=\"c1ccccc1\",  # Benzene\n    name=\"Benzene\",     # Optional name for the ligand\n    save_to_file=False  # Optional: whether to save the ligand to file\n)\n</code></pre> <p>The <code>from_smiles</code> constructor:</p> <ul> <li>Takes a SMILES string as input</li> <li>Optionally accepts a name for the ligand</li> <li>Optionally accepts a <code>save_to_file</code> parameter to control file persistence</li> <li>Automatically validates the SMILES string and creates a proper molecular representation</li> <li>Returns a <code>Ligand</code> instance that can be used for further operations</li> </ul> <p>SMILES Validation</p> <p>The constructor will raise an exception if the provided SMILES string is invalid or cannot be parsed into a valid molecule.</p>"},{"location":"dd/how-to/ligands.html#from-a-chemical-identifier","title":"From a Chemical Identifier","text":"<p>You can create a ligand from common chemical identifiers (like PubChem names, common names, or drug names). This is particularly useful when working with well-known biochemical molecules:</p> <pre><code>from deeporigin.drug_discovery import Ligand\n\n# Create ligands from common biochemical names\natp = Ligand.from_identifier(\n    identifier=\"ATP\",  # Adenosine triphosphate\n    name=\"ATP\"\n)\n\nserotonin = Ligand.from_identifier(\n    identifier=\"serotonin\",  # 5-hydroxytryptamine (5-HT)\n    name=\"Serotonin\"\n)\n</code></pre> <p>The <code>from_identifier</code> constructor:</p> <ul> <li>Accepts common chemical names and identifiers</li> <li>Automatically resolves the identifier to a molecular structure</li> <li>Creates a 3D conformation of the molecule</li> <li>Particularly useful for well-known biochemical molecules like:<ul> <li>Nucleotides (ATP, ADP, GTP, etc.)</li> <li>Neurotransmitters (serotonin, dopamine, etc.)</li> <li>Drug molecules (by their generic names)</li> <li>Common metabolites and cofactors</li> </ul> </li> </ul> <p>Identifier Resolution</p> <p>The constructor will attempt to resolve the identifier using chemical databases. If the identifier cannot be resolved, it will raise an exception.</p>"},{"location":"dd/how-to/ligands.html#from-an-rdkit-mol-object","title":"From an RDKit Mol object","text":"<p>If you're working with RDKit molecules directly, you can create a Ligand from an RDKit Mol object:</p> <pre><code>from deeporigin.drug_discovery import Ligand\nfrom rdkit import Chem\n\n# Create an RDKit molecule\nmol = Chem.MolFromSmiles(\"CCO\")  # Ethanol\n\n# Convert to a Ligand\nligand = Ligand.from_rdkit_mol(\n    mol=mol,\n    name=\"Ethanol\",  # Optional name for the ligand\n    save_to_file=False  # Optional: whether to save the ligand to file\n)\n</code></pre> <p>This is particularly useful when you're working with RDKit's molecular manipulation functions and want to convert the results into a Deep Origin Ligand object for further processing or visualization.</p>"},{"location":"dd/how-to/ligands.html#from-a-csv-file","title":"From a CSV file","text":"<p>You can create multiple ligands at once from a CSV file using the <code>from_csv</code> class method. This is useful when you have a dataset of molecules with their SMILES strings and associated properties. The <code>from_csv</code> method:</p> <ul> <li>Requires a path to the CSV file and the name of the column containing SMILES strings</li> <li>Automatically extracts all non-SMILES columns as properties</li> <li>Skips rows with empty or invalid SMILES</li> <li>Returns a list of <code>Ligand</code> objects</li> </ul> <p>This approach is ideal for processing large datasets of molecules where each row represents a different compound.</p>"},{"location":"dd/how-to/ligands.html#basic-usage","title":"Basic Usage","text":"<p>For the simplest case, just specify the file path and which column contains the SMILES strings:</p> <p>```python notest from deeporigin.drug_discovery import Ligand</p>"},{"location":"dd/how-to/ligands.html#basic-usage-just-extracting-smiles-from-a-column","title":"Basic usage - just extracting SMILES from a column","text":"<p>ligands = Ligand.from_csv(     file_path=\"molecules.csv\",     smiles_column=\"SMILES\"  # Optional, defaults to \"smiles\" ) <pre><code>The method will:\n\n- Read the CSV file using pandas\n- Extract SMILES strings from the specified column\n- Create a Ligand instance for each valid SMILES\n- Store all other columns as properties in each Ligand instance\n- Skip any rows with empty or invalid SMILES strings\n\n!!! note \"Error Handling\"\n    The method will raise:\n    - `FileNotFoundError` if the CSV file does not exist\n    - `ValueError` if the specified SMILES column is not found in the CSV file\n\n## Visualizing a ligand\n\n??? warning \"Browser support\"\n    These visualizations work best on Google Chrome. We are aware of issues on other browsers, especially Safari on macOS.\n\nA ligand object can be visualized using `show`:\n\n```python\nfrom deeporigin.drug_discovery import Ligand\n\nligand = Ligand.from_identifier(\"serotonin\")\n\nligand.show()\n</code></pre></p> <p>If a ligand is backed by a SDF file, a 3D visualization will be shown, similar to:</p> <p>A visualization such as this will be shown:</p> <p>Jupyter notebook required</p> <p>Visualizations such as these require this code to be run in a jupyter notebook. We recommend using these instructions to install Jupyter.</p> <p>If a ligand is not backed by a SDF file, a 2D visualization will be shown:</p> <p></p>"},{"location":"dd/how-to/ligands.html#predicting-admet-properties","title":"Predicting ADMET Properties","text":"<p>You can predict ADMET (Absorption, Distribution, Metabolism, Excretion, and Toxicity) properties for a ligand using the <code>admet_properties</code> method:</p> <p>```python notest</p>"},{"location":"dd/how-to/ligands.html#predict-admet-properties","title":"Predict ADMET properties","text":"<p>properties = ligand.admet_properties() <pre><code>The method returns a dictionary containing various ADMET-related predictions:\n\n```python\n{\n    'smiles': 'Cn1c(=O)n(Cc2ccccc2)c(=O)c2c1nc(SCCO)n2Cc1ccccc1',\n    'properties': {\n        'logS': {'value': -4.004},  # Aqueous solubility\n        'logP': 3.686,             # Partition coefficient\n        'logD': 2.528,             # Distribution coefficient\n        'hERG': {'probability': 0.264},  # hERG inhibition risk\n        'ames': {'probability': 0.213}, # Ames mutagenicity\n        'cyp': {                                # Cytochrome P450 inhibition\n            'probabilities': {\n                'cyp1a2': 0.134,\n                'cyp2c9': 0.744,\n                'cyp2c19': 0.853,\n                'cyp2d6': 0.0252,\n                'cyp3a4': 0.4718\n            }\n        },\n        'pains': {                              # PAINS (Pan Assay Interference Compounds)\n            'has_pains': None,\n            'pains_fragments': []\n        }\n    }\n}\n</code></pre></p> <p>The predicted properties are automatically stored in the ligand's properties dictionary and can be accessed later using the <code>get_property</code> method:</p> <p>```python notest</p>"},{"location":"dd/how-to/ligands.html#access-a-specific-property","title":"Access a specific property","text":"<p>logP = ligand.get_property('logP') ```</p> <p>Property Storage</p> <p>All predicted properties are automatically stored in the ligand's properties dictionary and can be accessed at any time using the <code>get_property</code> method.</p>"},{"location":"dd/how-to/proteins.html","title":"Work with Proteins","text":"<p>This document describes how to work with proteins and use them in Deep Origin tools. </p>"},{"location":"dd/how-to/proteins.html#the-protein-class","title":"The <code>Protein</code> class","text":"<p>The <code>Protein</code> class  is the primary way to work with proteins in Deep Origin.</p>"},{"location":"dd/how-to/proteins.html#constructing-a-protein","title":"Constructing a protein","text":""},{"location":"dd/how-to/proteins.html#from-a-file","title":"From a file","text":"<p>A protein can be constructed from a file:</p> <pre><code>from deeporigin.drug_discovery import Protein, EXAMPLE_DATA_DIR\nprotein = Protein.from_file(EXAMPLE_DATA_DIR / \"brd.pdb\")\n</code></pre>"},{"location":"dd/how-to/proteins.html#from-a-pdb-id","title":"From a PDB ID","text":"<p>A protein can also be constructed from a PDB ID:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\n</code></pre>"},{"location":"dd/how-to/proteins.html#visualizing-a-protein","title":"Visualizing a protein","text":"Browser support <p>These visualizations work best on Google Chrome. We are aware of issues on other browsers, especially Safari on macOS.</p> <p>A protein object can be visualized using <code>show</code>:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\nprotein.show()\n</code></pre> <p>A visualization such as this will be shown:</p> <p>Jupyter notebook required</p> <p>Visualizations such as these require this code to be run in a jupyter notebook. We recommend using these instructions to install Jupyter.</p>"},{"location":"dd/how-to/proteins.html#modifying-and-preparing-a-protein","title":"Modifying and preparing a protein","text":""},{"location":"dd/how-to/proteins.html#removing-specific-residues","title":"Removing specific residues","text":"<p>You can remove specific residue names from a protein structure using the <code>remove_resnames</code> method:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\n\n# Remove water molecules (HOH) and ions (NA, CL)\nprotein.remove_resnames(exclude_resnames=[\"HOH\", \"NA\", \"CL\"])\n</code></pre> <p>Residue name format</p> <p>Residue names in PDB files are always uppercase (e.g., \"HOH\" for water, \"NA\" for sodium, \"CL\" for chloride).</p> <p>This method modifies the protein structure in place by removing the specified residue names. If no residue names are provided, the protein structure remains unchanged.</p>"},{"location":"dd/how-to/proteins.html#removing-hetatm-records","title":"Removing HETATM records","text":"<p>You can remove HETATM records from the protein structure using the <code>remove_hetatm</code> method:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\n\n# Remove all HETATM records except water and zinc\nprotein.remove_hetatm(keep_resnames=[\"HOH\"], remove_metals=[\"ZN\"])\n</code></pre> <p>This method modifies the protein structure in place by removing HETATM records (heteroatoms) from the structure. You can:</p> <ul> <li>Keep specific residues by providing their names in <code>keep_resnames</code></li> <li>Keep specific metals by providing their names in <code>remove_metals</code> (these metals will be excluded from removal)</li> <li>If no arguments are provided, all HETATM records will be removed</li> </ul> <p>Metal names</p> <p>Metal names should be provided in uppercase (e.g., \"ZN\" for zinc, \"FE\" for iron).</p>"},{"location":"dd/how-to/proteins.html#removing-water-molecules","title":"Removing water molecules","text":"<p>You can remove all water molecules from a protein structure using the <code>remove_water</code> method:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\n\nprotein.remove_water()\n</code></pre> <p>This method modifies the protein structure in place by removing all water molecules (residue name \"HOH\"). Unlike <code>remove_resnames</code>, this method does not return a new protein structure but instead modifies the existing one.</p>"},{"location":"dd/how-to/proteins.html#removing-specific-residues_1","title":"Removing Specific Residues","text":"<p>You can remove specific residue types while keeping others:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\n\n\n# Remove specific residue names\nprotein.remove_resnames(exclude_resnames=[\"HOH\", \"SO4\"])\n\n# Remove only water molecules\nprotein_no_water = protein.remove_water()\n</code></pre>"},{"location":"dd/how-to/proteins.html#chain-selection","title":"Chain Selection","text":"<p>You can select specific chains from the protein structure:</p> <p>```python notest</p>"},{"location":"dd/how-to/proteins.html#select-a-single-chain","title":"Select a single chain","text":"<p>chain_a = protein.select_chain('A')</p>"},{"location":"dd/how-to/proteins.html#select-multiple-chains","title":"Select multiple chains","text":"<p>chains_ab = protein.select_chains(['A', 'B']) <pre><code>## Best Practices\n\n1. Always visualize the structure before and after preparation to ensure the desired changes were made\n2. When working with metalloproteins, use `remove_hetatm()` with appropriate `keep_resnames` or `remove_metals` parameters\n3. For multi-chain proteins, consider selecting specific chains before preparation\n4. Save the prepared structure using `to_pdb()` if you need to use it later:\n\n```python notest\n# Save the prepared structure\nprotein.to_pdb(\"prepared_protein.pdb\")\n</code></pre></p>"},{"location":"dd/how-to/proteins.html#common-use-cases","title":"Common Use Cases","text":""},{"location":"dd/how-to/proteins.html#preparing-a-protein-for-docking","title":"Preparing a Protein for Docking","text":"<p>```python notest</p>"},{"location":"dd/how-to/proteins.html#load-and-prepare-protein","title":"Load and prepare protein","text":"<p>protein = Protein.from_pdb_id(\"1EBY\") protein.remove_water()  # Remove water molecules protein.remove_hetatm(keep_resnames=['ZN'])  # Keep important cofactors protein.to_pdb(\"docking_ready.pdb\") <pre><code>### Working with Metalloproteins\n\n```python notest\n# Load and prepare metalloprotein\nprotein = Protein.from_pdb_id(\"1XYZ\")\nprotein.remove_hetatm(remove_metals=['ZN', 'MG'])  # Keep metal ions\nprotein.show()\n</code></pre></p>"},{"location":"dd/how-to/proteins.html#multi-chain-protein-preparation","title":"Multi-chain Protein Preparation","text":"<p>```python notest</p>"},{"location":"dd/how-to/proteins.html#load-and-prepare-multi-chain-protein","title":"Load and prepare multi-chain protein","text":"<p>protein = Protein.from_pdb_id(\"1ABC\") chains_ab = protein.select_chains(['A', 'B'])  # Select chains A and B chains_ab.remove_water()  # Remove water from selected chains chains_ab.show() ```</p>"},{"location":"dd/how-to/use-docking-outputs-for-fep.html","title":"Use outputs of Docking for FEP","text":"<p>This document describes how to use the outputs of Docking as inputs to FEP tools.</p>"},{"location":"dd/how-to/use-docking-outputs-for-fep.html#assumptions","title":"Assumptions","text":"<p>We assume that you have </p> <ol> <li> created a <code>Complex</code> object</li> <li> run Docking</li> <li> Generated a SDF file with docked poses</li> </ol>"},{"location":"dd/how-to/use-docking-outputs-for-fep.html#split-docking-outputs-sdf-file","title":"Split Docking outputs SDF file","text":"<p>Docking generates a single SDF file with all the ligands in it. FEP tools (ABFE and RBFE) require SDF files with individual molecules in their own SDF file. To get here, we use a utility function as follows:</p> <p>```python notest from deeporigin.drug_discovery import chemistry</p> <p>sdf_files = chemistry.split_sdf_file(     input_sdf_path=\"filtered_ligands.sdf\",  ) <pre><code>`sdf_files` contains a list of paths to the generated SDF files. \n\nWe can use this to generate a new list of Ligands and modify the `Complex`\n\n\n```python notest\nfrom deeporigin.drug_discovery import Ligand\n\nsim.ligands = [Ligand(file) for file in files]\n</code></pre></p> <p>This object can be used to run  ABFE or RBFE. </p>"},{"location":"dd/how-to/visualize-abfe-trajectories.html","title":"Visualizing ABFE Trajectories","text":"<p>This guide explains how to visualize molecular dynamics trajectories from Absolute Binding Free Energy (ABFE) simulations in Deep Origin.</p>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#overview","title":"Overview","text":"<p>ABFE simulations generate molecular dynamics trajectories that show how ligands interact with proteins over time. Visualizing these trajectories can provide valuable insights into binding mechanisms, protein-ligand interactions, and conformational changes.</p> <p>Deep Origin provides tools to easily visualize these trajectories using the <code>show_trajectory</code> method in the <code>ABFE</code> class.</p>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#prerequisites","title":"Prerequisites","text":"<ul> <li>A completed ABFE simulation run</li> <li>Valid ligand ID from your simulation</li> <li>The Deep Origin Python package properly installed and configured</li> </ul>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#visualizing-trajectories","title":"Visualizing Trajectories","text":""},{"location":"dd/how-to/visualize-abfe-trajectories.html#using-the-show_trajectory-method","title":"Using the <code>show_trajectory</code> Method","text":"<p>The <code>show_trajectory</code> method allows you to visualize either the molecular dynamics (md) phase or the binding phase of an ABFE run.</p> <p>Before using this method, you'll need to have a properly set up Complex object with completed ABFE calculations. For a complete walkthrough of setting up your environment, creating a Complex object, and running ABFE calculations, please refer to the Getting Started tutorial.</p> <p>Once you've completed the steps in the tutorial and have run your ABFE calculations, you can return to this guide to visualize the trajectories.</p>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#behind-the-scenes","title":"Behind the Scenes","text":"<p>When you call <code>show_trajectory</code>, the following happens: 1. The method retrieves result files for the specified ABFE run 2. It extracts the trajectory files from a ZIP archive (if not already extracted) 3. It generates a 3D visualization using the <code>deeporigin_molstar</code> library 4. The visualization is displayed in your Jupyter notebook</p>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#examples","title":"Examples","text":""},{"location":"dd/how-to/visualize-abfe-trajectories.html#visualizing-molecular-dynamics-step","title":"Visualizing Molecular Dynamics Step","text":"<pre><code># Show the molecular dynamics trajectory\nsim.abfe.show_trajectory(ligands=sim.ligands[0], step=\"md\")\n</code></pre>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#visualizing-binding-step","title":"Visualizing Binding Step","text":"<pre><code># Show the binding trajectory for the default window (window 1)\nsim.abfe.show_trajectory(ligand_id=\"ligand1\", step=\"binding\")\n\n# Show the binding trajectory for a specific window\nsim.abfe.show_trajectory(ligand_id=\"ligand1\", step=\"binding\", window=5)\n</code></pre> <p>When visualizing the binding step, you can specify which window to visualize using the <code>window</code> parameter. The windows represent different stages of the binding process. If you specify an invalid window number, the method will show you a list of available windows.</p>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues when visualizing trajectories:</p> <ul> <li>Ensure your ABFE run completed successfully</li> <li>Verify that the ligand ID is correct</li> <li>Check that the specified step (\"md\" or \"binding\") is available</li> <li>Ensure you have sufficient disk space for extracting trajectory files</li> </ul>"},{"location":"dd/how-to/visualize-abfe-trajectories.html#additional-resources","title":"Additional Resources","text":"<ul> <li>For more information on running ABFE simulations, see the ABFE documentation</li> <li>For details on the <code>Complex</code> class, refer to the API reference</li> </ul>"},{"location":"dd/how-to/visualize.html","title":"Visualize proteins and ligands","text":"<p>This document describes how to visualize proteins and ligands constructed using the Protein and Ligand classes, and tools to visualize SDF files.</p>"},{"location":"dd/how-to/visualize.html#visualizing-a-protein","title":"Visualizing a protein","text":"Browser support <p>These visualizations work best on Google Chrome. We are aware of issues on other browsers, especially Safari on macOS.</p> <p>A protein object can be visualized using <code>show</code>:</p> <pre><code>from deeporigin.drug_discovery import Protein\n\nprotein = Protein.from_pdb_id(\"1EBY\")\n\nprotein.show()\n</code></pre> <p>A visualization such as this will be shown:</p> <p>Jupyter notebook required</p> <p>Visualizations such as these require this code to be run in a jupyter notebook. We recommend using these instructions to install Jupyter.</p>"},{"location":"dd/how-to/visualize.html#ligands","title":"Ligands","text":""},{"location":"dd/how-to/visualize.html#ligand-objects","title":"<code>Ligand</code> objects","text":"<p>The <code>Ligand</code> class  is the primary way to work with ligands in Deep Origin.</p> Browser support <p>These visualizations work best on Google Chrome. We are aware of issues on other browsers, especially Safari on macOS.</p> <p>A ligand object can be visualized using <code>show</code>:</p> <pre><code>from deeporigin.drug_discovery import Ligand\n\nserotonin = Ligand.from_identifier(\"serotonin\")\n\nserotonin.show()\n</code></pre> <p>If a ligand is backed by a SDF file, a 3D visualization will be shown, similar to:</p> <p>A visualization such as this will be shown:</p> <p>Jupyter notebook required</p> <p>Visualizations such as these require this code to be run in a jupyter notebook. We recommend using these instructions to install Jupyter.</p> <p>If a ligand is not backed by a SDF file, a 2D visualization will be shown:</p> <p></p>"},{"location":"dd/how-to/visualize.html#sdf-files","title":"SDF Files","text":"<p>Molecules in SDF files can be visualized the <code>show_molecules_in_sdf_file</code> function as follows:</p> <pre><code>from deeporigin.drug_discovery.chemistry import show_molecules_in_sdf_file\nshow_molecules_in_sdf_file(\"path/to/file.sdf\")\n</code></pre>"},{"location":"dd/ref/abfe.html","title":"<code>deeporigin.drug_discovery.abfe</code>","text":"<p>This module encapsulates methods to run ABFE and show ABFE results on Deep Origin.</p> <p>The ABFE object instantiated here is contained in the Complex class is meant to be used within that class.</p>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe-attributes","title":"Attributes","text":""},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.LOCAL_BASE","title":"LOCAL_BASE  <code>module-attribute</code>","text":"<pre><code>LOCAL_BASE = home() / '.deeporigin'\n</code></pre>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe-classes","title":"Classes","text":""},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE","title":"ABFE","text":"<p>               Bases: <code>WorkflowStep</code></p> <p>class to handle ABFE-related tasks within the Complex class.</p> <p>Objects instantiated here are meant to be used within the Complex class.</p>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE-attributes","title":"Attributes","text":""},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.tool_version","title":"tool_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tool_version = '0.2.7'\n</code></pre>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE-functions","title":"Functions","text":""},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.get_results","title":"get_results","text":"<pre><code>get_results() -&gt; DataFrame | None\n</code></pre> <p>get ABFE results and return in a dataframe.</p> <p>This method returns a dataframe showing the results of ABFE runs associated with this simulation session. The ligand file name and \u0394G are shown, together with user-supplied properties</p>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.parse_progress","title":"parse_progress  <code>classmethod</code>","text":"<pre><code>parse_progress(job: Job) -&gt; dict\n</code></pre> <p>parse progress from a ABFE job</p>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.run_end_to_end","title":"run_end_to_end","text":"<pre><code>run_end_to_end(\n    *,\n    ligands: Optional[list[Ligand]] = None,\n    re_run: bool = False,\n    _output_dir_path: Optional[str] = None\n) -&gt; list[Job] | None\n</code></pre> <p>Method to run an end-to-end ABFE run.</p> <p>Parameters:</p> Name Type Description Default <code>ligands</code> <code>Optional[list[Ligand]]</code> <p>List of ligand to run. Defaults to None. When None, all ligands in the object will be run. To view a list of valid ligands, use the <code>.show_ligands()</code> method</p> <code>None</code>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.set_test_run","title":"set_test_run","text":"<pre><code>set_test_run(value: int = 1)\n</code></pre> <p>set test_run paramemter in abfe parameters</p>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.show_results","title":"show_results","text":"<pre><code>show_results()\n</code></pre> <p>Show ABFE results in a dataframe.</p> <p>This method returns a dataframe showing the results of ABFE runs associated with this simulation session. The ligand file name, 2-D structure, and \u0394G are shown.</p>"},{"location":"dd/ref/abfe.html#src.drug_discovery.abfe.ABFE.show_trajectory","title":"show_trajectory","text":"<pre><code>show_trajectory(\n    *,\n    ligand: Ligand,\n    step: Literal[\"md\", \"binding\"],\n    window: int = 1\n)\n</code></pre> <p>Show the system trajectory FEP run.</p> <p>Parameters:</p> Name Type Description Default <code>ligand</code> <code>Ligand</code> <p>The ligand to show the trajectory for.</p> required <code>step</code> <code>Literal['md', 'abfe']</code> <p>The step to show the trajectory for.</p> required <code>window</code> <code>int</code> <p>The window number to show the trajectory for. Defaults to 1.</p> <code>1</code>"},{"location":"dd/ref/chemistry.html","title":"<code>deeporigin.drug_discovery.chemistry</code>","text":"<p>Contains functions for working with SDF files.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry-functions","title":"Functions","text":""},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.canonicalize_smiles","title":"canonicalize_smiles","text":"<pre><code>canonicalize_smiles(smiles: str) -&gt; str\n</code></pre> <p>Canonicalize a SMILES string.</p> <p>Parameters:</p> Name Type Description Default <code>smiles</code> <code>str</code> <p>SMILES string.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Canonicalized SMILES string.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.count_molecules_in_sdf_file","title":"count_molecules_in_sdf_file","text":"<pre><code>count_molecules_in_sdf_file(sdf_file: str | Path) -&gt; int\n</code></pre> <p>Count the number of valid (sanitizable) molecules in an SDF file using RDKit, while suppressing RDKit's error logging for sanitization issues.</p> <p>Parameters:</p> Name Type Description Default <code>sdf_file</code> <code>str | Path</code> <p>Path to the SDF file.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of molecules successfully read in the SDF file.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.download_protein","title":"download_protein","text":"<pre><code>download_protein(pdb_id: str, save_dir: str = '.') -&gt; str\n</code></pre> <p>Downloads a PDB structure by its PDB ID from RCSB and saves it to the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>pdb_id</code> <code>str</code> <p>PDB ID of the protein.</p> required <code>save_dir</code> <code>str</code> <p>Directory to save the downloaded PDB file.</p> <code>'.'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Path to the downloaded PDB file.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the download fails.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.get_properties_in_sdf_file","title":"get_properties_in_sdf_file","text":"<pre><code>get_properties_in_sdf_file(sdf_file: str | Path) -&gt; list\n</code></pre> <p>Returns a list of all user-defined properties in an SDF file</p> <p>Parameters:</p> Name Type Description Default <code>sdf_file</code> <code>str | Path</code> <p>Path to the SDF file.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of the names of all user-defined properties in the SDF file.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.merge_sdf_files","title":"merge_sdf_files","text":"<pre><code>merge_sdf_files(\n    sdf_file_list: list[str],\n    output_path: Optional[str] = None,\n) -&gt; str\n</code></pre> <p>Merge a list of SDF files into a single SDF file.</p> <p>Parameters:</p> Name Type Description Default <code>sdf_file_list</code> <code>list of str</code> <p>List of paths to SDF files.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Path to the merged SDF file.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.read_molecules_in_sdf_file","title":"read_molecules_in_sdf_file","text":"<pre><code>read_molecules_in_sdf_file(\n    sdf_file: str | Path,\n) -&gt; list[dict]\n</code></pre> <p>Reads an SDF file containing one or more molecules, and for each molecule: - Extracts the SMILES string - Extracts all user-defined properties</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: A list of dictionaries, where each dictionary has: - \"smiles\": str - \"properties\": dict</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.read_property_values","title":"read_property_values","text":"<pre><code>read_property_values(sdf_file: str | Path, key: str)\n</code></pre> <p>Given a SDF file with more than 1 molecule, return the values of the properties for each molecule</p> <p>Parameters:</p> Name Type Description Default <code>sdf_file</code> <code>str | Path</code> <p>Path to the SDF file.</p> required <code>key</code> <code>str</code> <p>The key of the property to read.</p> required"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.read_sdf_properties","title":"read_sdf_properties","text":"<pre><code>read_sdf_properties(sdf_file: str | Path) -&gt; dict\n</code></pre> <p>Reads all user-defined properties from an SDF file (single molecule) and returns them as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>sdf_file</code> <code>str | Path</code> <p>Path to the SDF file.</p> required"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.sdf_to_smiles","title":"sdf_to_smiles","text":"<pre><code>sdf_to_smiles(sdf_file: str | Path) -&gt; list[str]\n</code></pre> <p>Extracts the SMILES strings of all valid molecules from an SDF file using RDKit.</p> <p>Parameters:</p> Name Type Description Default <code>sdf_file</code> <code>str | Path</code> <p>Path to the SDF file.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of SMILES strings for all valid molecules in the file.</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.show_molecules_in_sdf_file","title":"show_molecules_in_sdf_file","text":"<pre><code>show_molecules_in_sdf_file(sdf_file: str | Path)\n</code></pre> <p>show molecules in an SDF file in a Jupyter notebook using molstar</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.show_molecules_in_sdf_files","title":"show_molecules_in_sdf_files","text":"<pre><code>show_molecules_in_sdf_files(sdf_files: list[str])\n</code></pre> <p>show molecules in an SDF file in a Jupyter notebook using molstar</p>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.smiles_list_to_base64_png_list","title":"smiles_list_to_base64_png_list","text":"<pre><code>smiles_list_to_base64_png_list(\n    smiles_list: list[str],\n    *,\n    size: tuple[int, int] = (300, 100),\n    scale_factor: int = 2,\n    reference_smiles: Optional[str] = None\n) -&gt; list[str]\n</code></pre> <p>Convert a list of SMILES strings to a list of base64-encoded PNG  tags.</p> <p>This aligns images so that they have consistent core orientation.</p> <p>Parameters:</p> Name Type Description Default <code>smiles_list</code> <code>list[str]</code> <p>List of SMILES strings.</p> required <code>size</code> <code>tuple[int, int]</code> <p>(width, height) of the final rendered image in pixels (CSS downscaled).</p> <code>(300, 100)</code> <code>scale_factor</code> <code>int</code> <p>Factor to generate higher-resolution images internally.</p> <code>2</code> <code>reference_smiles</code> <code>Optional[str]</code> <p>If provided, all molecules will be oriented to match the 2D layout of this reference molecule.</p> <code>None</code>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.smiles_to_base64_png","title":"smiles_to_base64_png","text":"<pre><code>smiles_to_base64_png(\n    smiles: str, *, size=(300, 100), scale_factor: int = 2\n) -&gt; str\n</code></pre> <p>Convert a SMILES string to an inline base64  tag. Use this if you want to convert a single molecule into an image. If you want to convert a set of SMILES strings (corresponding to a set of related molecules) to images, use <code>smiles_list_to_base64_png_list</code>.</p> <p>Parameters:</p> Name Type Description Default <code>smiles</code> <code>str</code> <p>SMILES string.</p> required <code>size</code> <code>Tuple[int, int]</code> <p>(width, height) of the final rendered image in pixels (CSS downscaled).</p> <code>(300, 100)</code> <code>scale_factor</code> <code>int</code> <p>Factor to generate higher-resolution images internally.</p> <code>2</code>"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.smiles_to_sdf","title":"smiles_to_sdf","text":"<pre><code>smiles_to_sdf(smiles: str, sdf_path: str) -&gt; None\n</code></pre> <p>convert a SMILES string to a SDF file</p> <p>Parameters:</p> Name Type Description Default <code>smiles</code> <code>str</code> <p>SMILES string</p> required <code>sdf_path</code> <code>str</code> <p>Path to the SDF file</p> required"},{"location":"dd/ref/chemistry.html#src.drug_discovery.chemistry.split_sdf_file","title":"split_sdf_file","text":"<pre><code>split_sdf_file(\n    *,\n    input_sdf_path: str | Path,\n    output_prefix: str = \"ligand\",\n    output_dir: Optional[str | Path] = None,\n    name_by_property: str = \"_Name\"\n) -&gt; list[Path]\n</code></pre> <p>Splits a multi-ligand SDF file into individual SDF files, optionally placing the output in a user-specified directory. Each output SDF is named using the molecule's name (if present) or a fallback prefix.</p> <p>Parameters:</p> Name Type Description Default <code>input_sdf_path</code> <code>str | Path</code> <p>Path to the input SDF file containing multiple ligands.</p> required <code>output_prefix</code> <code>str</code> <p>Prefix for unnamed ligands. Defaults to \"ligand\".</p> <code>'ligand'</code> <code>output_dir</code> <code>Optional[str | Path]</code> <p>Directory to write the output SDF files to. If None, output files are written to the same directory as input_sdf_path.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Path]</code> <p>list[Path]: A list of paths to the generated SDF files.</p>"},{"location":"dd/ref/complex.html","title":"<code>deeporigin.drug_discovery.complex</code>","text":"<p>Module to support Drug Discovery workflows using Deep Origin</p>"},{"location":"dd/ref/complex.html#src.drug_discovery.complex-classes","title":"Classes","text":""},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex","title":"Complex  <code>dataclass</code>","text":"<p>class to represent a set of a protein and 1 or many ligands</p>"},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex-attributes","title":"Attributes","text":""},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex.ligands","title":"ligands  <code>property</code> <code>writable</code>","text":"<pre><code>ligands: list[Ligand]\n</code></pre> <p>Get the current ligands</p>"},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex.protein","title":"protein  <code>instance-attribute</code>","text":"<pre><code>protein: Protein = protein\n</code></pre>"},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex-functions","title":"Functions","text":""},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex.from_dir","title":"from_dir  <code>classmethod</code>","text":"<pre><code>from_dir(\n    directory: str,\n    *,\n    _platform_clients: Optional[PlatformClients] = None\n) -&gt; Complex\n</code></pre> <p>Initialize a Complex from a directory containing protein and ligand files.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory containing ligand and protein files.</p> required <p>The directory should contain: - Exactly one PDB file for the protein - One or more SDF files for the ligands. Each SDF file can contain one or more molecules.</p> <p>Returns:</p> Name Type Description <code>Complex</code> <code>Complex</code> <p>A new Complex instance initialized from the files in the directory.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no PDB file is found or if multiple PDB files are found.</p>"},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex.prepare","title":"prepare","text":"<pre><code>prepare(\n    ligand: Ligand,\n    *,\n    padding: float = 1.0,\n    keep_waters: bool = False,\n    is_lig_protonated: bool = True,\n    is_protein_protonated: bool = True\n) -&gt; None\n</code></pre> <p>run system preparation on the protein and one ligand from the Complex</p> <p>Parameters:</p> Name Type Description Default <code>ligand</code> <code>Ligand</code> <p>The ligand to prepare.</p> required <code>padding</code> <code>float</code> <p>Padding to add around the system. Defaults to 1.0.</p> <code>1.0</code> <code>keep_waters</code> <code>bool</code> <p>Whether to keep water molecules. Defaults to False.</p> <code>False</code> <code>is_lig_protonated</code> <code>bool</code> <p>Whether the ligand is already protonated. Defaults to True.</p> <code>True</code> <code>is_protein_protonated</code> <code>bool</code> <p>Whether the protein is already protonated. Defaults to True.</p> <code>True</code>"},{"location":"dd/ref/complex.html#src.drug_discovery.complex.Complex.show_ligands","title":"show_ligands","text":"<pre><code>show_ligands(\n    *, view: str = \"2d\", limit: Optional[int] = None\n)\n</code></pre> <p>Display ligands in the complex object.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>str</code> <p>Visualization type, either \"2d\" (default) or \"3d\".  - \"2d\": Shows ligands in a table with 2D structure renderings  - \"3d\": Shows 3D molecular structures using SDF files</p> <code>'2d'</code> <code>limit</code> <code>Optional[int]</code> <p>Optional; maximum number of ligands to display.   If None, all ligands will be shown.</p> <code>None</code>"},{"location":"dd/ref/docking.html","title":"<code>deeporigin.drug_discovery.docking</code>","text":"<p>This module encapsulates methods to run docking and show docking results on Deep Origin</p>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking-attributes","title":"Attributes","text":""},{"location":"dd/ref/docking.html#src.drug_discovery.docking.LOCAL_BASE","title":"LOCAL_BASE  <code>module-attribute</code>","text":"<pre><code>LOCAL_BASE = home() / '.deeporigin'\n</code></pre>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Number","title":"Number  <code>module-attribute</code>","text":"<pre><code>Number = float | int\n</code></pre>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking-classes","title":"Classes","text":""},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking","title":"Docking","text":"<p>               Bases: <code>WorkflowStep</code></p> <p>class to handle Docking-related tasks within the Complex class.</p> <p>Objects instantiated here are meant to be used within the Complex class.</p>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking-attributes","title":"Attributes","text":""},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking.tool_version","title":"tool_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tool_version = '0.4.0'\n</code></pre>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking-functions","title":"Functions","text":""},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking.get_results","title":"get_results","text":"<pre><code>get_results(\n    *, file_type: str = \"csv\"\n) -&gt; DataFrame | None | list[str]\n</code></pre> <p>return a list of paths to CSV files that contain the results from docking</p>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking.run","title":"run","text":"<pre><code>run(\n    *,\n    pocket: Optional[Pocket] = None,\n    box_size: Optional[\n        tuple[Number, Number, Number]\n    ] = None,\n    pocket_center: Optional[\n        tuple[Number, Number, Number]\n    ] = None,\n    batch_size: Optional[int] = 32,\n    n_workers: Optional[int] = None,\n    _output_dir_path: Optional[str] = None,\n    use_parallel: bool = True\n)\n</code></pre> <p>Run bulk docking on Deep Origin. Ligands will be split into batches based on the batch_size argument, and will run in parallel on Deep Origin clusters.</p> <p>Parameters:</p> Name Type Description Default <code>box_size</code> <code>tuple[float, float, float]</code> <p>box size</p> <code>None</code> <code>pocket_center</code> <code>tuple[float, float, float]</code> <p>pocket center</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>batch size. Defaults to 30.</p> <code>32</code> <code>n_workers</code> <code>int</code> <p>number of workers. Defaults to None.</p> <code>None</code> <code>use_parallel</code> <code>bool</code> <p>whether to run jobs in parallel. Defaults to True.</p> <code>True</code>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking.show_poses","title":"show_poses","text":"<pre><code>show_poses()\n</code></pre> <p>show docked ligands with protein in 3D</p>"},{"location":"dd/ref/docking.html#src.drug_discovery.docking.Docking.show_results","title":"show_results","text":"<pre><code>show_results()\n</code></pre> <p>show results of bulk Docking run in a table, rendering 2D structures of molecules</p>"},{"location":"dd/ref/rbfe.html","title":"<code>deeporigin.drug_discovery.rbfe</code>","text":"<p>This module encapsulates methods to run RBFE and show RBFE results on Deep Origin.</p> <p>The RBFE object instantiated here is contained in the Complex class is meant to be used within that class.</p>"},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe-attributes","title":"Attributes","text":""},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.LOCAL_BASE","title":"LOCAL_BASE  <code>module-attribute</code>","text":"<pre><code>LOCAL_BASE = home() / '.deeporigin'\n</code></pre>"},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe-classes","title":"Classes","text":""},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE","title":"RBFE","text":"<p>               Bases: <code>WorkflowStep</code></p> <p>class to handle RBFE-related tasks within the Complex class.</p> <p>Objects instantiated here are meant to be used within the Complex class.</p>"},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE-attributes","title":"Attributes","text":""},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE.tool_version","title":"tool_version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tool_version = '0.2.7'\n</code></pre>"},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE-functions","title":"Functions","text":""},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE.get_results","title":"get_results","text":"<pre><code>get_results() -&gt; DataFrame | None\n</code></pre> <p>get ABFE results and return in a dataframe.</p> <p>This method returns a dataframe showing the results of ABFE runs associated with this simulation session. The ligand file name and \u0394G are shown, together with user-supplied properties</p>"},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE.run_ligand_pair","title":"run_ligand_pair","text":"<pre><code>run_ligand_pair(\n    *,\n    ligand1: Ligand,\n    ligand2: Ligand,\n    re_run: bool = False,\n    _output_dir_path: Optional[str] = None\n) -&gt; Job | None\n</code></pre> <p>Method to run an end-to-end RBFE run.</p> <p>Parameters:</p> Name Type Description Default <code>ligand1</code> <code>Ligand</code> <p>First ligand to run.</p> required <code>ligand2</code> <code>Ligand</code> <p>Second ligand to run.</p> required <code>re_run</code> <code>bool</code> <p>Whether to re-run the job if it already exists.</p> <code>False</code> <code>_output_dir_path</code> <code>Optional[str]</code> <p>Path to the output directory.</p> <code>None</code>"},{"location":"dd/ref/rbfe.html#src.drug_discovery.rbfe.RBFE.show_results","title":"show_results","text":"<pre><code>show_results()\n</code></pre> <p>Show ABFE results in a dataframe.</p> <p>This method returns a dataframe showing the results of ABFE runs associated with this simulation session. The ligand file name, 2-D structure, and \u0394G are shown.</p>"},{"location":"dd/ref/structures.html","title":"<code>deeporigin.drug_discovery.structures</code>","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures-classes","title":"Classes","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand","title":"Ligand  <code>dataclass</code>","text":"<p>               Bases: <code>Entity</code></p> <p>A class representing a ligand molecule in drug discovery workflows. The Ligand class provides functionality to create, manipulate, and analyze small molecules (ligands) in computational drug discovery. It supports various input formats and provides methods for property prediction, visualization, and file operations.</p> <p>Attributes:</p> Name Type Description <code>identifier</code> <code>Optional[str]</code> <p>Ligand identifier (e.g., PubChem ID)</p> <code>file_path</code> <code>Optional[str]</code> <p>Path to the ligand file</p> <code>smiles</code> <code>Optional[str]</code> <p>SMILES string representing the ligand</p> <code>block_type</code> <code>Optional[str]</code> <p>Format of the block content ('mol', 'mol2', 'sdf', 'pdb')</p> <code>block_content</code> <code>Optional[str]</code> <p>String containing the molecule data</p> <code>name</code> <code>Optional[str]</code> <p>Optional name of the ligand</p> <code>seed</code> <code>Optional[int]</code> <p>Random seed for coordinate generation</p> <code>xref_protein</code> <code>Optional[str]</code> <p>Cross-reference to protein</p> <code>xref_ins_code</code> <code>Optional[str]</code> <p>Cross-reference insertion code</p> <code>xref_residue_id</code> <code>Optional[str]</code> <p>Cross-reference residue ID</p> <code>xref_protein_chain_id</code> <code>Optional[str]</code> <p>Cross-reference protein chain ID</p> <code>save_to_file</code> <code>bool</code> <p>Whether to save the ligand to file</p> <code>properties</code> <code>dict</code> <p>Dictionary of ligand properties</p> <code>mol</code> <code>Optional[Molecule]</code> <p>Direct Molecule object initialization</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Create from SMILES\n&gt;&gt;&gt; ligand = Ligand.from_smiles(\"CCO\", name=\"Ethanol\")\n</code></pre> <pre><code>&gt;&gt;&gt; # Create from SDF file\n&gt;&gt;&gt; ligand = Ligand.from_sdf(\"ligand.sdf\")\n</code></pre> <pre><code>&gt;&gt;&gt; # Get properties\n&gt;&gt;&gt; center = ligand.get_center()\n&gt;&gt;&gt; props = ligand.admet_properties()\n</code></pre> <pre><code>&gt;&gt;&gt; # Visualize\n&gt;&gt;&gt; ligand.visualize()\n</code></pre> <pre><code>&gt;&gt;&gt; # Save to file\n&gt;&gt;&gt; ligand.write_to_file(\"output.pdb\")\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand-attributes","title":"Attributes","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.atom_types","title":"atom_types  <code>property</code>","text":"<pre><code>atom_types\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.available_for_docking","title":"available_for_docking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>available_for_docking: bool = field(\n    init=False, default=True\n)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.block_content","title":"block_content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_content: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.block_type","title":"block_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_type: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.coordinates","title":"coordinates  <code>property</code>","text":"<pre><code>coordinates\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.file_path","title":"file_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_path: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.hac","title":"hac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hac: int = field(init=False, default=0)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.identifier","title":"identifier  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>identifier: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.mol","title":"mol  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mol: Molecule | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.properties","title":"properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>properties: dict = field(default_factory=dict)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.protonated_smiles","title":"protonated_smiles  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>protonated_smiles: str | None = field(\n    init=False, default=None\n)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.save_to_file","title":"save_to_file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>save_to_file: bool = False\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.seed","title":"seed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>seed: int | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.smiles","title":"smiles  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>smiles: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.xref_ins_code","title":"xref_ins_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xref_ins_code: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.xref_protein","title":"xref_protein  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xref_protein: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.xref_protein_chain_id","title":"xref_protein_chain_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xref_protein_chain_id: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.xref_residue_id","title":"xref_residue_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>xref_residue_id: str | None = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand-functions","title":"Functions","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.admet_properties","title":"admet_properties","text":"<pre><code>admet_properties() -&gt; str\n</code></pre> <p>Predict ADMET properties for the ligand.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string containing the predicted ADMET properties.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.convert_to_sdf","title":"convert_to_sdf  <code>classmethod</code>","text":"<pre><code>convert_to_sdf(block_content: str, block_type: str) -&gt; str\n</code></pre> <p>Convert a ligand block content to SDF format.</p> <p>Parameters:</p> Name Type Description Default <code>block_content</code> <code>str</code> <p>The block content of the ligand.</p> required <code>block_type</code> <code>str</code> <p>The type of the block content.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The ligand block content in SDF format.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.draw","title":"draw","text":"<pre><code>draw()\n</code></pre> <p>Draw the ligand molecule.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_block_content","title":"from_block_content  <code>classmethod</code>","text":"<pre><code>from_block_content(\n    block_content: str,\n    block_type: str,\n    name: str = \"\",\n    save_to_file: bool = False,\n    **kwargs: Any\n) -&gt; Ligand\n</code></pre> <p>Create a Ligand instance from block content.</p> <p>Parameters:</p> Name Type Description Default <code>block_content</code> <code>str</code> <p>String containing the molecule data</p> required <code>block_type</code> <code>str</code> <p>Format of the block content ('mol', 'mol2', 'sdf', 'pdb')</p> required <code>name</code> <code>str</code> <p>Name of the ligand. Defaults to \"\".</p> <code>''</code> <code>save_to_file</code> <code>bool</code> <p>Whether to save the ligand to file. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the constructor</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Ligand</code> <code>Ligand</code> <p>A new Ligand instance</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_csv","title":"from_csv  <code>classmethod</code>","text":"<pre><code>from_csv(\n    file_path: str, smiles_column: str = \"smiles\"\n) -&gt; list[Ligand]\n</code></pre> <p>Create Ligand instances from a CSV file containing SMILES strings and additional properties.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the CSV file.</p> required <code>smiles_column</code> <code>str</code> <p>The name of the column containing SMILES strings. Defaults to \"smiles\".</p> <code>'smiles'</code> <p>Returns:</p> Type Description <code>list[Ligand]</code> <p>list[Ligand]: A list of Ligand instances created from the CSV file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>ValueError</code> <p>If the CSV does not contain the specified smiles column or if SMILES strings are invalid.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_identifier","title":"from_identifier  <code>classmethod</code>","text":"<pre><code>from_identifier(\n    identifier: str,\n    name: Optional[str] = None,\n    save_to_file: bool = False,\n    **kwargs: Any\n) -&gt; Ligand\n</code></pre> <p>Create a Ligand instance from a chemical identifier.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Chemical identifier (e.g., common name, PubChem name, drug name)</p> required <code>name</code> <code>str</code> <p>Name of the ligand. If not provided, uses the identifier. Defaults to \"\".</p> <code>None</code> <code>save_to_file</code> <code>bool</code> <p>Whether to save the ligand to file. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the constructor</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Ligand</code> <code>Ligand</code> <p>A new Ligand instance initialized from the chemical identifier</p> Example <p>Raises:</p> Type Description <code>DeepOriginException</code> <p>If the identifier cannot be resolved to a valid molecule</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_identifier--create-atp-molecule","title":"Create ATP molecule","text":"<p>atp = Ligand.from_identifier(\"ATP\", name=\"ATP\")</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_identifier--create-serotonin-molecule","title":"Create serotonin molecule","text":"<p>serotonin = Ligand.from_identifier( ...     identifier=\"serotonin\", ...     name=\"Serotonin\" ... )</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_rdkit_mol","title":"from_rdkit_mol  <code>classmethod</code>","text":"<pre><code>from_rdkit_mol(\n    mol: Mol,\n    name: str = \"\",\n    save_to_file: bool = False,\n    **kwargs: Any\n)\n</code></pre> <p>Create a Ligand instance from an RDKit Mol object.</p> <p>Parameters:</p> Name Type Description Default <code>mol</code> <code>Mol</code> <p>RDKit molecule object to convert to a Ligand</p> required <code>name</code> <code>str</code> <p>Name of the ligand. Defaults to \"\".</p> <code>''</code> <code>save_to_file</code> <code>bool</code> <p>Whether to save the ligand to file. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the constructor</p> <code>{}</code>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_sdf","title":"from_sdf  <code>classmethod</code>","text":"<pre><code>from_sdf(\n    file_path: str,\n    *,\n    sanitize: bool = True,\n    removeHs: bool = False\n) -&gt; Union[List[Ligand], Ligand]\n</code></pre> <p>Create Ligand instances from an SDF file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the SDF file.</p> required <p>Returns:</p> Type Description <code>Union[List[Ligand], Ligand]</code> <p>either a list of ligands or a single ligand</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>ValueError</code> <p>If the file cannot be parsed correctly.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.from_smiles","title":"from_smiles  <code>classmethod</code>","text":"<pre><code>from_smiles(\n    smiles: str,\n    name: str = \"\",\n    save_to_file: bool = False,\n    **kwargs: Any\n) -&gt; Ligand\n</code></pre> <p>Create a Ligand instance from a SMILES string.</p> <p>Parameters:</p> Name Type Description Default <code>smiles</code> <code>str</code> <p>SMILES string representing the ligand</p> required <code>name</code> <code>str</code> <p>Name of the ligand. Defaults to \"\".</p> <code>''</code> <code>save_to_file</code> <code>bool</code> <p>Whether to save the ligand to file. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the constructor</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Ligand</code> <code>Ligand</code> <p>A new Ligand instance</p> Example <p>ligand = Ligand.from_smiles( ...     smiles=\"CCO\",  # Ethanol ...     name=\"Ethanol\", ...     save_to_file=False ... ) print(ligand.smiles) CCO</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.get_center","title":"get_center","text":"<pre><code>get_center() -&gt; Optional[list[float]]\n</code></pre> <p>Get the center of the ligand based on its coordinates.</p> <p>Returns: - list: The center coordinates of the ligand. - None: If coordinates are not available.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.get_property","title":"get_property","text":"<pre><code>get_property(prop_name: str)\n</code></pre> <p>Get the value of a property for the ligand molecule.</p> <p>Parameters: - prop_name (str): Name of the property to retrieve.</p> <p>Returns: - The value of the property if it exists, otherwise None.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.minimize","title":"minimize","text":"<pre><code>minimize()\n</code></pre> <p>embed and optimize ligand in 3d space</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.protonate","title":"protonate","text":"<pre><code>protonate(pH: float = 7.4, filter_percentage: float = 1)\n</code></pre> <p>Predicts the right protonation of a molecule at given pH value.</p> <p>Parameters: - entry: A single or multiple ligands represented as SMILES or Ligand instances. - pH: pH value of the solvent for concentration calculation. Default is 7.4. - filter_percentage: Percentage threshold for filtering low concentration states. Default is 1.</p> <p>Returns: - ProtonationReport: A ProtonationReport instance.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.protonate_molecules","title":"protonate_molecules  <code>classmethod</code>","text":"<pre><code>protonate_molecules(ligands)\n</code></pre> <p>Predicts the right protonation of a molecule at given pH value.</p> <p>Parameters: - entry: A single or multiple ligands represented as SMILES or Ligand instances. - pH: pH value of the solvent for concentration calculation. Default is 7.4. - filter_percentage: Percentage threshold for filtering low concentration states. Default is 1.</p> <p>Returns: - ProtonationReport: A ProtonationReport instance.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.set_property","title":"set_property","text":"<pre><code>set_property(prop_name: str, prop_value)\n</code></pre> <p>Set a property for the ligand molecule.</p> <p>Parameters: - prop_name (str): Name of the property. - prop_value: Value of the property.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.show","title":"show","text":"<pre><code>show() -&gt; str\n</code></pre> <p>Visualize the current state of the ligand molecule.</p> <p>Returns: - str: HTML representation of the visualization.</p> <p>Raises: - Exception: If visualization fails.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.update_coordinates","title":"update_coordinates","text":"<pre><code>update_coordinates(coords: ndarray)\n</code></pre> <p>update coordinates of the ligand structure</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.upload","title":"upload","text":"<pre><code>upload()\n</code></pre> <p>Upload the entity to the remote server.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.visualize_ligands","title":"visualize_ligands  <code>classmethod</code>","text":"<pre><code>visualize_ligands(ligands: list[Ligand])\n</code></pre> <p>Visualize ligands.</p> <p>Parameters:</p> Name Type Description Default <code>ligands</code> <code>list[Ligand]</code> <p>list[\"Ligand\"]: The list of ligands objects to visualize.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>ValueError</code> <p>If the file cannot be parsed correctly.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.visualize_ligands_from_sdf","title":"visualize_ligands_from_sdf  <code>classmethod</code>","text":"<pre><code>visualize_ligands_from_sdf(file_path: str)\n</code></pre> <p>Visualize ligands from an SDF file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the SDF file.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>ValueError</code> <p>If the file cannot be parsed correctly.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Ligand.write_to_file","title":"write_to_file","text":"<pre><code>write_to_file(\n    output_path: str = \"\", output_format: str = \"\"\n)\n</code></pre> <p>Writes the ligand molecule to a file, including all properties.</p> <p>Parameters: - output_path (str): Path where the ligand will be written.</p> <p>Raises: - ValueError: If the file extension is unsupported. - Exception: If writing to the file fails.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket","title":"Pocket  <code>dataclass</code>","text":"<p>A class representing a binding pocket in a protein structure.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket-attributes","title":"Attributes","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.block_content","title":"block_content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_content: str = ''\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.block_type","title":"block_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_type: str = ''\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.color","title":"color  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>color: str = 'red'\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.coordinates","title":"coordinates  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coordinates: Optional[ndarray] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.file_path","title":"file_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_path: Optional[Path] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.index","title":"index  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>index: Optional[int] = 0\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: Optional[str] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.pdb_id","title":"pdb_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pdb_id: Optional[str] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.props","title":"props  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>props: Optional[Dict[str, Any]] = field(\n    default_factory=dict\n)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.structure","title":"structure  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>structure: Optional[ndarray] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket-functions","title":"Functions","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.from_block","title":"from_block  <code>classmethod</code>","text":"<pre><code>from_block(\n    block_content: str,\n    block_type: str = \"pdb\",\n    **kwargs: Any\n) -&gt; Pocket\n</code></pre> <p>Create a Pocket instance from block content.</p> <p>Parameters:</p> Name Type Description Default <code>block_content</code> <code>str</code> <p>The content of the pocket structure.</p> required <code>block_type</code> <code>str</code> <p>The format of the block content (default: \"pdb\").</p> <code>'pdb'</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the Pocket constructor.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Pocket</code> <code>Pocket</code> <p>A new Pocket instance.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(file_path: str, **kwargs: Any) -&gt; Pocket\n</code></pre> <p>Create a Pocket instance from a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the pocket structure file.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the Pocket constructor.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Pocket</code> <code>Pocket</code> <p>A new Pocket instance.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.from_name","title":"from_name  <code>classmethod</code>","text":"<pre><code>from_name(name: str, **kwargs: Any) -&gt; Pocket\n</code></pre> <p>Create a Pocket instance by searching for a file with the given name in the pockets directory.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pocket to search for.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the Pocket constructor.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Pocket</code> <code>Pocket</code> <p>A new Pocket instance.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.from_pocket_finder_results","title":"from_pocket_finder_results  <code>classmethod</code>","text":"<pre><code>from_pocket_finder_results(\n    pocket_finder_results_dir: str | Path,\n) -&gt; List[Pocket]\n</code></pre> <p>Create a list of Pocket objects from pocket finder results directory.</p> <p>Parameters:</p> Name Type Description Default <code>pocket_finder_results_dir</code> <code>str | Path</code> <p>Directory containing pocket finder results with PDB files for each pocket and a CSV properties file.</p> required <p>Returns:</p> Type Description <code>List[Pocket]</code> <p>List of Pocket objects with properties from the CSV file.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.from_structure","title":"from_structure  <code>classmethod</code>","text":"<pre><code>from_structure(\n    structure: ndarray,\n    name: Optional[str] = None,\n    **kwargs: Any\n) -&gt; Pocket\n</code></pre> <p>Create a Pocket instance directly from a structure array.</p> <p>Parameters:</p> Name Type Description Default <code>structure</code> <code>ndarray</code> <p>The structure array.</p> required <code>name</code> <code>Optional[str]</code> <p>Name for the pocket.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the Pocket constructor.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Pocket</code> <code>Pocket</code> <p>A new Pocket instance.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.get_center","title":"get_center","text":"<pre><code>get_center() -&gt; ndarray\n</code></pre> <p>Get the center of the pocket based on its coordinates.</p> <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: A numpy array containing the center of the pocket.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.get_directory","title":"get_directory  <code>staticmethod</code>","text":"<pre><code>get_directory() -&gt; str\n</code></pre> <p>Generates and ensures the existence of a directory for pockets.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The path to the pockets directory.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.load_structure","title":"load_structure","text":"<pre><code>load_structure(structure_file_path: str | Path) -&gt; None\n</code></pre> <p>Load a PDB structure from a file path into the <code>structure</code> attribute.</p> <p>Parameters:</p> Name Type Description Default <code>structure_file_path</code> <code>str | Path</code> <p>Path to the PDB file.</p> required"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.load_structure_from_block","title":"load_structure_from_block","text":"<pre><code>load_structure_from_block(\n    block_content: str, block_type: str\n)\n</code></pre> <p>Load a pocket structure from block content.</p> <p>Parameters: - block_content (str): String containing the pocket data. - block_type (str): Format of the block content ('pdb').</p> <p>Returns: - AtomArray: Loaded structure.</p> <p>Raises: - ValueError: If the block type is unsupported.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.pocket_props","title":"pocket_props","text":"<pre><code>pocket_props()\n</code></pre> <p>get the properties of the pocket</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>show the pocket in a jupyter notebook</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.update_coordinates","title":"update_coordinates","text":"<pre><code>update_coordinates(coords: ndarray)\n</code></pre> <p>update coordinates of the pocket structure</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Pocket.write_to_file","title":"write_to_file","text":"<pre><code>write_to_file(output_path: str, output_format: str = 'pdb')\n</code></pre> <p>Write the current state of the structure to a PDB file.</p> <p>Parameters: - file_path (str): Path where the pocket structure will be written.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein","title":"Protein  <code>dataclass</code>","text":"<p>               Bases: <code>Entity</code></p> <p>A class representing a protein structure with various manipulation and analysis capabilities.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein-attributes","title":"Attributes","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.atom_types","title":"atom_types  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>atom_types: Optional[ndarray] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.block_content","title":"block_content  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_content: Optional[str] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.block_type","title":"block_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>block_type: str = 'pdb'\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.coordinates","title":"coordinates  <code>property</code>","text":"<pre><code>coordinates\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.file_path","title":"file_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_path: Optional[Path] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.info","title":"info  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>info: Optional[dict] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.pdb_id","title":"pdb_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pdb_id: Optional[str] = None\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.structure","title":"structure  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>structure: ndarray = field(repr=False)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein-functions","title":"Functions","text":""},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.dock","title":"dock","text":"<pre><code>dock(*, ligand: Ligand, pocket: Pocket) -&gt; str\n</code></pre> <p>Dock a ligand into a specific pocket of the protein.</p> <p>This method performs molecular docking of a ligand into a specified pocket of the protein structure. It uses the Deep Origin docking to generate a 3D structure of the docked ligand.</p> <p>Parameters:</p> Name Type Description Default <code>ligand</code> <code>Ligand</code> <p>The ligand to dock into the protein pocket.</p> required <code>pocket</code> <code>Pocket</code> <p>The specific pocket in the protein where the ligand should be docked.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Path to the SDF file containing the docked ligand structure.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.download_protein_by_pdb_id","title":"download_protein_by_pdb_id  <code>staticmethod</code>","text":"<pre><code>download_protein_by_pdb_id(\n    pdb_id: str, save_dir: str = \"\"\n) -&gt; str\n</code></pre> <p>Download a PDB structure by its PDB ID from RCSB.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.extract_metals_and_cofactors","title":"extract_metals_and_cofactors","text":"<pre><code>extract_metals_and_cofactors() -&gt; (\n    Tuple[list[str], list[str]]\n)\n</code></pre> <p>Extract metal ions and cofactors from the protein structure.</p> <p>Returns:</p> Type Description <code>Tuple[list[str], list[str]]</code> <p>Tuple[list[str], list[str]]</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.find_pockets","title":"find_pockets","text":"<pre><code>find_pockets(\n    pocket_count: int = 5, pocket_min_size: int = 30\n) -&gt; list[Pocket]\n</code></pre> <p>Find potential binding pockets in the protein structure.</p> <p>This method analyzes the protein structure to identify cavities or pockets that could potentially serve as binding sites for ligands. It uses the Deep Origin pocket finding algorithm to detect and characterize these pockets.</p> <p>Parameters:</p> Name Type Description Default <code>pocket_count</code> <code>int</code> <p>Maximum number of pockets to identify. Defaults to 5.</p> <code>5</code> <code>pocket_min_size</code> <code>int</code> <p>Minimum size of pockets to consider, measured in cubic Angstroms. Defaults to 30.</p> <code>30</code> <p>Returns:</p> Type Description <code>list[Pocket]</code> <p>list[Pocket]: A list of Pocket objects, each representing a potential binding site in the protein. Each Pocket object contains: - The 3D structure of the pocket - Properties such as volume, surface area, hydrophobicity, etc. - Visualization parameters (color, etc.)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; protein = Protein(file=\"protein.pdb\")\n&gt;&gt;&gt; pockets = protein.find_pockets(pocket_count=3, pocket_min_size=50)\n&gt;&gt;&gt; for pocket in pockets:\n...     print(f\"Pocket: {pocket.name}, Volume: {pocket.properties.get('volume')} \u00c5\u00b3\")\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(file_path: str, struct_ind: int = 0) -&gt; Protein\n</code></pre> <p>Create a Protein instance from a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the protein PDB file.</p> required <code>struct_ind</code> <code>int</code> <p>Index of the structure to select if multiple are present.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Protein</code> <code>Protein</code> <p>A new Protein instance.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>ValueError</code> <p>If the structure cannot be loaded.</p> <code>RuntimeError</code> <p>If the file cannot be read or processed.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.from_pdb_id","title":"from_pdb_id  <code>classmethod</code>","text":"<pre><code>from_pdb_id(pdb_id: str, struct_ind: int = 0) -&gt; Protein\n</code></pre> <p>Create a Protein instance from a PDB ID.</p> <p>Parameters:</p> Name Type Description Default <code>pdb_id</code> <code>str</code> <p>PDB ID of the protein to download.</p> required <code>struct_ind</code> <code>int</code> <p>Index of the structure to select if multiple are present.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>Protein</code> <code>Protein</code> <p>A new Protein instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the PDB ID is invalid or the structure cannot be loaded.</p> <code>RuntimeError</code> <p>If the download fails.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.get_center_by_residues","title":"get_center_by_residues","text":"<pre><code>get_center_by_residues(residues: list[str]) -&gt; ndarray\n</code></pre> <p>Get the center of the protein structure based on specific residues.</p> <p>Parameters:</p> Name Type Description Default <code>residues</code> <code>list[str]</code> <p>List of residue names to include in the calculation.</p> required"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.get_directory","title":"get_directory  <code>staticmethod</code>","text":"<pre><code>get_directory() -&gt; str\n</code></pre> <p>Get the directory for storing protein files.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.list_chain_names","title":"list_chain_names","text":"<pre><code>list_chain_names() -&gt; list[str]\n</code></pre> <p>List all unique chain IDs in the protein structure.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of unique chain IDs.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.list_hetero_names","title":"list_hetero_names","text":"<pre><code>list_hetero_names(exclude_water=True) -&gt; list[str]\n</code></pre> <p>List all unique hetero residue names in the protein structure.</p> <p>Parameters:</p> Name Type Description Default <code>exclude_water</code> <code>bool</code> <p>Whether to exclude water molecules from the list.</p> <code>True</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of unique ligand residue names (excluding water).</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.load_structure_from_block","title":"load_structure_from_block  <code>staticmethod</code>","text":"<pre><code>load_structure_from_block(\n    block_content: str, block_type: str\n) -&gt; ndarray\n</code></pre> <p>Load a protein structure from block content.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.remove_hetatm","title":"remove_hetatm","text":"<pre><code>remove_hetatm(\n    keep_resnames: Optional[list[str]] = None,\n    remove_metals: Optional[list[str]] = None,\n) -&gt; None\n</code></pre> <p>Remove HETATM records from the protein structure, with options to retain specified residues or exclude certain metals.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.remove_hetatm--parameters","title":"Parameters","text":"<p>keep_resnames : Optional[list[str]]     A list of residue names (strings) to keep in the structure even if they are HETATM records. exclude_metals : Optional[list[str]]     A list of metal names (strings) to exclude from removal. These metals will be retained in the structure.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.remove_hetatm--notes","title":"Notes","text":"<ul> <li>By default, a predefined list of metals is considered for removal unless specified in <code>exclude_metals</code>.</li> <li>If <code>keep_resnames</code> is provided, those residues (along with any metals not excluded) will be retained even if they are HETATM records.</li> <li>The method updates the current protein object in place.</li> </ul>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.remove_resnames","title":"remove_resnames","text":"<pre><code>remove_resnames(\n    exclude_resnames: Optional[list[str]] = None,\n) -&gt; None\n</code></pre> <p>Remove specific residue names from the protein structure in place.</p> <p>Parameters:</p> Name Type Description Default <code>exclude_resnames</code> <code>Optional[list[str]]</code> <p>List of residue names to exclude.</p> <code>None</code>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.remove_water","title":"remove_water","text":"<pre><code>remove_water() -&gt; None\n</code></pre> <p>Remove water molecules from the protein structure in place.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.select_chain","title":"select_chain","text":"<pre><code>select_chain(chain_id: str) -&gt; Optional[Protein]\n</code></pre> <p>Select a specific chain by its ID and return a new Protein object.</p> <p>Parameters: - chain_id (str): Chain ID to select.</p> <p>Returns: - Protein: A new Protein object containing the selected chain.</p> <p>Raises: - ValueError: If the chain ID is not found.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.select_chains","title":"select_chains","text":"<pre><code>select_chains(chain_ids: list[str]) -&gt; Protein\n</code></pre> <p>Select specific chains from the protein structure.</p> <p>Parameters:</p> Name Type Description Default <code>chain_ids</code> <code>list[str]</code> <p>List of chain IDs to select.</p> required"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.select_structure","title":"select_structure  <code>staticmethod</code>","text":"<pre><code>select_structure(structure: ndarray, index: int) -&gt; ndarray\n</code></pre> <p>Select a specific structure by index.</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.show","title":"show","text":"<pre><code>show(\n    pockets: Optional[list[Pocket]] = None,\n    sdf_file: Optional[str] = None,\n)\n</code></pre> <p>Visualize the protein structure in a Jupyter notebook using MolStar viewer.</p> <p>This method provides interactive 3D visualization of the protein structure with optional highlighting of binding pockets and docked ligands. The visualization is rendered directly in Jupyter notebooks using the MolStar viewer.</p> <p>Parameters:</p> Name Type Description Default <code>pockets</code> <code>Optional[list[Pocket]]</code> <p>List of Pocket objects to highlight in the visualization. Each pocket will be displayed with its defined color and transparency. Defaults to None.</p> <code>None</code> <code>sdf_file</code> <code>Optional[str]</code> <p>Path to an SDF file containing docked ligand structures. When provided, the ligands will be displayed alongside the protein structure. Defaults to None.</p> <code>None</code> <p>Examples:</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.show--visualize-protein-structure-only","title":"Visualize protein structure only","text":"<pre><code>&gt;&gt;&gt; protein = Protein(file=\"protein.pdb\")\n&gt;&gt;&gt; protein.show()\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.show--visualize-protein-with-highlighted-pockets","title":"Visualize protein with highlighted pockets","text":"<pre><code>&gt;&gt;&gt; pockets = protein.find_pockets(pocket_count=3)\n&gt;&gt;&gt; protein.show(pockets=pockets)\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.show--visualize-protein-with-docked-ligands","title":"Visualize protein with docked ligands","text":"<pre><code>&gt;&gt;&gt; protein.show(sdf_file=\"docked_ligands.sdf\")\n</code></pre>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.show--visualize-protein-with-both-pockets-and-docked-ligands","title":"Visualize protein with both pockets and docked ligands","text":"<pre><code>&gt;&gt;&gt; protein.show(pockets=pockets, sdf_file=\"docked_ligands.sdf\")\n</code></pre> Notes <ul> <li>When pockets are provided, they are displayed with semi-transparent surfaces   (alpha=0.7) while the protein is shown with a more transparent surface (alpha=0.1)</li> <li>The protein is displayed in cartoon representation when pockets are shown</li> <li>When an SDF file is provided, the visualization includes both the protein and   the docked ligands in their respective binding poses</li> </ul>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.to_pdb","title":"to_pdb","text":"<pre><code>to_pdb(file_path: str)\n</code></pre> <p>Write the protein structure to a PDB file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path where the PDB file will be written.</p> required"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.update_coordinates","title":"update_coordinates","text":"<pre><code>update_coordinates(coords: ndarray)\n</code></pre> <p>update coordinates of the protein structure</p>"},{"location":"dd/ref/structures.html#src.drug_discovery.structures.Protein.upload","title":"upload","text":"<pre><code>upload()\n</code></pre> <p>Upload the entity to the remote server.</p>"},{"location":"dd/tutorial/abfe.html","title":"ABFE","text":"<p>This document describes how to run a ABFE  simulation using Deep Origin tools. </p>"},{"location":"dd/tutorial/abfe.html#prerequisites","title":"Prerequisites","text":"<p>We assume that we have an initialized and configured <code>Complex</code> object:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n</code></pre> <p>Here, ABFE requires that the <code>Complex</code> object have an already prepared protein (PDB), and the associated ligands (SDF) are in a docked pose.  </p> <p>Warning</p> <p>The <code>Complex.from_dir()</code> function only accepts 1 PDB file per directory. This function will throw an error if it finds more than 1 PDB file per directory. </p> <p>For more details on how to get started, see  Getting Started .</p>"},{"location":"dd/tutorial/abfe.html#starting-an-abfe-run","title":"Starting an ABFE run","text":""},{"location":"dd/tutorial/abfe.html#single-ligand","title":"Single ligand","text":"<p>To run an end-to-end ABFE workflow on a single ligand, we use:</p> <pre><code>jobs = sim.abfe.run_end_to_end(ligands=[sim.ligand[0]]) # for example\njob = jobs[0]\n</code></pre> <p>This queues up a task on Deep Origin. When it completes, outputs will be written to the appropriate column in this database. </p>"},{"location":"dd/tutorial/abfe.html#multiple-ligands","title":"Multiple ligands","text":"<p>To run an end-to-end ABFE workflow on multiple ligands, we use:</p> <pre><code>job = sim.abfe.run_end_to_end(ligands=[sim.ligands[0],sim.ligand[1]]) \n</code></pre> <p>Omitting the ligand IDs will run ABFE on all ligands in the <code>Complex</code> object.</p> <pre><code>jobs = sim.abfe.run_end_to_end() \n</code></pre> <p>Each ligand will be run in parallel on a separate instance. </p>"},{"location":"dd/tutorial/abfe.html#job-control","title":"Job Control","text":""},{"location":"dd/tutorial/abfe.html#visualize-job","title":"Visualize Job","text":"<p>Once a job has been submitted, you can track its status by inspecting the Job object:</p> <p><pre><code>job # returned from abfe.run_end_to_end()\n</code></pre> This shows a Job widget with information about the job, such as:</p> <p>Expected output</p> <p></p>"},{"location":"dd/tutorial/abfe.html#watch-jobs","title":"Watch jobs","text":"<p>To monitor the status of this job, use:</p> <p><pre><code>job.watch() # returned from abfe.run_end_to_end()\n</code></pre> This makes the widget auto-update, and monitor the status of the job till it reaches a terminal state (Cancelled, Succeeded, or Failed). </p>"},{"location":"dd/tutorial/abfe.html#stop-watching-jobs","title":"Stop watching jobs","text":"<p>To manually stop watching a job, do:</p> <pre><code>job.stop_watching() # returned from abfe.run_end_to_end()\n</code></pre>"},{"location":"dd/tutorial/abfe.html#cancel-jobs","title":"Cancel jobs","text":"<p>To cancel a job, use:</p> <pre><code>job.cancel() # returned from abfe.run_end_to_end()\n</code></pre>"},{"location":"dd/tutorial/abfe.html#parameters","title":"Parameters","text":""},{"location":"dd/tutorial/abfe.html#viewing-parameters","title":"Viewing parameters","text":"<p>The end to end ABFE tool has a number of user-accessible parameters. To view all parameters, use:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.abfe._params.end_to_end\n</code></pre> Expected output <p>This will print a dictionary of the parameters used for ABFE, similar to:</p> <pre><code>{\n  \"abfe\": {\n    \"add_fep_repeats\": 0,\n    \"amend\": \"__NO_AMEND\",\n    \"annihilate\": true,\n    \"atom_mapping_threshold\": 0.01,\n    \"em_all\": true,\n    \"em_solvent\": true,\n    \"emeq_md_options\": {\n      \"T\": 298.15,\n      \"cutoff\": 0.9,\n      \"fourier_spacing\": 0.12,\n      \"hydrogen_mass\": 2.0,\n      \"\u0394t\": 0.004\n    },\n    \"fep_windows\": [\n      {\n        \"restraints_A\": [\n          0.0,\n          0.01,\n          0.025,\n          0.05,\n          0.1,\n          0.35,\n          0.5,\n          0.75,\n          1.0\n        ]\n      },\n      {\n        \"coul_A\": [\n          1.0,\n          0.8,\n          0.6,\n          0.4,\n          0.2,\n          0.0\n        ]\n      },\n      {\n        \"vdw_A\": [\n          1.0,\n          0.9,\n          0.8,\n          0.7,\n          0.6,\n          0.5,\n          0.4,\n          0.3,\n          0.2,\n          0.1,\n          0.0\n        ]\n      }\n    ],\n    \"mbar\": 1,\n    \"npt_reduce_restraints_ns\": 2.0,\n    \"nvt_heating_ns\": 1.0,\n    \"prod_md_options\": {\n      \"T\": 298.15,\n      \"barostat\": \"MonteCarloBarostat\",\n      \"barostat_exchange_interval\": 500,\n      \"cutoff\": 0.9,\n      \"fourier_spacing\": 0.12,\n      \"hydrogen_mass\": 2.0,\n      \"integrator\": \"BAOABIntegrator\",\n      \"\u0394t\": 0.004\n    },\n    \"repeats\": 1,\n    \"run_name\": \"binding\",\n    \"skip_emeq\": \"__NO\",\n    \"softcore_alpha\": 0.5,\n    \"steps\": 1250000,\n    \"system\": \"complex\",\n    \"test_run\": 0,\n    \"thread_pinning\": 0,\n    \"thread_pinning_offset\": 0,\n    \"threads\": 0,\n    \"workers\": 0\n  },\n  \"complex_prep\": {\n    \"include_ligands\": 1,\n    \"include_protein\": 1,\n    \"sysprep_params\": {\n      \"charge_method\": \"bcc\",\n      \"do_loop_modelling\": false,\n      \"force_field\": \"ff14SB\",\n      \"is_lig_protonated\": true,\n      \"is_protein_protonated\": true,\n      \"keep_waters\": true,\n      \"lig_force_field\": \"gaff2\",\n      \"ligand_res_names\": [\n        \"LIG\"\n      ],\n      \"padding\": 1.0,\n      \"save_gmx_files\": false\n    },\n    \"test_run\": 0,\n    \"thread_pinning\": 0,\n    \"thread_pinning_offset\": 0\n  },\n  \"emeq\": {\n    \"amend\": \"__NO_AMEND\",\n    \"em_all\": true,\n    \"em_solvent\": true,\n    \"emeq_md_options\": {\n      \"T\": 298.15,\n      \"cutoff\": 0.9,\n      \"fourier_spacing\": 0.12,\n      \"hydrogen_mass\": 2.0,\n      \"\u0394t\": 0.004\n    },\n    \"from_run\": \"__USE_SYSTEM\",\n    \"npt_reduce_restraints_ns\": 0.2,\n    \"nvt_heating_ns\": 0.1,\n    \"test_run\": 0,\n    \"thread_pinning\": 0,\n    \"thread_pinning_offset\": 0,\n    \"threads\": 0\n  },\n  \"ligand_prep\": {\n    \"include_ligands\": 1,\n    \"include_protein\": 0,\n    \"sysprep_params\": {\n      \"charge_method\": \"bcc\",\n      \"do_loop_modelling\": false,\n      \"force_field\": \"ff14SB\",\n      \"is_lig_protonated\": false,\n      \"is_protein_protonated\": false,\n      \"keep_waters\": false,\n      \"lig_force_field\": \"gaff2\",\n      \"padding\": 1.0,\n      \"save_gmx_files\": false\n    },\n    \"test_run\": 0,\n    \"thread_pinning\": 0,\n    \"thread_pinning_offset\": 0\n  },\n  \"md\": {\n    \"amend\": \"__NO_AMEND\",\n    \"continue\": 0,\n    \"from_run\": \"__USE_SYSTEM\",\n    \"md_options\": {\n      \"T\": 298.15,\n      \"barostat\": \"MonteCarloBarostat\",\n      \"barostat_exchange_interval\": 500,\n      \"cutoff\": 0.9,\n      \"fourier_spacing\": 0.12,\n      \"hydrogen_mass\": 2.0,\n      \"integrator\": \"BAOABIntegrator\",\n      \"\u0394t\": 0.004\n    },\n    \"run_name\": \"md\",\n    \"steps\": 250000,\n    \"test_run\": 0,\n    \"thread_pinning\": 0,\n    \"thread_pinning_offset\": 0,\n    \"threads\": 0\n  },\n  \"solvation\": {\n    \"add_fep_repeats\": 0,\n    \"amend\": \"__NO_AMEND\",\n    \"annihilate\": true,\n    \"atom_mapping_threshold\": 0.01,\n    \"em_all\": true,\n    \"em_solvent\": true,\n    \"emeq_md_options\": {\n      \"T\": 298.15,\n      \"cutoff\": 0.9,\n      \"fourier_spacing\": 0.12,\n      \"hydrogen_mass\": 2.0,\n      \"\u0394t\": 0.004\n    },\n    \"fep_windows\": [\n      {\n        \"coul_A\": [\n          1.0,\n          0.8,\n          0.6,\n          0.4,\n          0.2,\n          0.0\n        ]\n      },\n      {\n        \"vdw_A\": [\n          1.0,\n          0.9,\n          0.8,\n          0.7,\n          0.6,\n          0.5,\n          0.4,\n          0.3,\n          0.2,\n          0.1,\n          0.0\n        ]\n      }\n    ],\n    \"mbar\": 1,\n    \"npt_reduce_restraints_ns\": 0.2,\n    \"nvt_heating_ns\": 0.1,\n    \"prod_md_options\": {\n      \"T\": 298.15,\n      \"barostat\": \"MonteCarloBarostat\",\n      \"barostat_exchange_interval\": 500,\n      \"cutoff\": 0.9,\n      \"fourier_spacing\": 0.12,\n      \"hydrogen_mass\": 2.0,\n      \"integrator\": \"BAOABIntegrator\",\n      \"\u0394t\": 0.004\n    },\n    \"repeats\": 1,\n    \"skip_emeq\": \"__NO\",\n    \"softcore_alpha\": 0.5,\n    \"steps\": 300000,\n    \"test_run\": 1,\n    \"thread_pinning\": 0,\n    \"thread_pinning_offset\": 0,\n    \"threads\": 0,\n    \"workers\": 0\n  }\n}\n</code></pre>"},{"location":"dd/tutorial/abfe.html#modifying-parameters","title":"Modifying parameters","text":"<p>Any of these parameters are modifiable using dot notation. For example, to change the number of steps in the MD step, we can use:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.abfe._params.end_to_end.md.steps = 500000\n</code></pre>"},{"location":"dd/tutorial/abfe.html#using-test_run","title":"Using <code>test_run</code>","text":"<p>The test run parameter can be used to run ABFE for a short number of steps, to verify that all steps execute without consuming too many CPU cycles. This should not be used to run production simulations.</p> <p>To set the test run parameter to 1, we can use:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.abfe.set_test_run(1)\n</code></pre>"},{"location":"dd/tutorial/abfe.html#results","title":"Results","text":""},{"location":"dd/tutorial/abfe.html#viewing-results","title":"Viewing results","text":"<p>After initiating a run, we can view results using:</p> <pre><code>sim.abfe.show_results()\n</code></pre> <p>This shows a table similar to:</p> <p>Expected output</p> <p></p>"},{"location":"dd/tutorial/abfe.html#exporting-results-for-analysis","title":"Exporting results for analysis","text":"<p>These results can be exported for analysis using:</p> <pre><code>df = sim.abfe.get_results()\ndf\n</code></pre> <p>Expected output</p> Binding Solvation AnalyticalCorr Std Total ID File r_exp_dg SMILES 16.23 -27.53 -7.2 0.0 -36.50 Ligands-1 brd-2.sdf -9.59 [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H])[H])=C([H])C(C2=C([H])N(C([H])([H])[H])C(=O)C3=C2C([H])=C([H])N3[H])=C1[H] -454.99 -722.01 -7.58 0.0 -259.44 Ligands-2 brd-3.sdf -7.09 [H]C([H])=C([H])C([H])([H])N1C(=O)C2=C(C([H])=C([H])N2[H])C(C2=C([H])C([H])=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H])[H])=C2[H])=C1[H] -600.31 -1354.79 -7.47 0.0 -747.00 Ligands-3 brd-4.sdf -8.64 [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H])[H])=C([H])C(C2=C([H])N(C([H])([H])/C([H])=C([H])C([H])([H])[H])C(=O)C3=C2C([H])=C([H])N3[H])=C1[H]"},{"location":"dd/tutorial/docking.html","title":"Docking","text":"<p>This document describes how to dock  a set of ligands to a protein  using Deep Origin tools. </p>"},{"location":"dd/tutorial/docking.html#prerequisites","title":"Prerequisites","text":"<p>We assume that we have an initialized and configured a <code>Complex</code> object:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR) # or replace with your folder\n</code></pre> <p>For more details on how to get started, see  Getting Started .</p>"},{"location":"dd/tutorial/docking.html#find-pockets","title":"Find pockets","text":"<p>First we find pockets in the protein using:</p> <pre><code>pockets = sim.protein.find_pockets(pocket_count=1)\n</code></pre> <p>We can visualize the pocket using:</p> <pre><code>sim.protein.show(pockets=pockets)\n</code></pre> <p>You should see something along the lines of:</p>"},{"location":"dd/tutorial/docking.html#starting-a-docking-run","title":"Starting a docking run","text":""},{"location":"dd/tutorial/docking.html#using-pocket","title":"Using pocket","text":"<p>To dock all ligands in the complex to the protein, using the pocket we found, we can do:</p> <pre><code>pocket = pockets[0] # or choose as needed\nsim.docking.run(pocket=pocket)\n</code></pre>"},{"location":"dd/tutorial/docking.html#using-residue-id","title":"Using residue ID","text":"<p>Coming Soon</p> <p>Ability to dock ligands using a residue ID is coming soon.</p>"},{"location":"dd/tutorial/docking.html#using-pocket-center-and-box-size","title":"Using pocket center and box size","text":"<p>To dock all ligands to the protein, parallelizing and batching across all ligands, we do the following:</p> <pre><code>job = sim.docking.run(\n    box_size=(15, 15, 15),      # match to your protein\n    pocket_center=(13, -6, 22), # match to your protein\n)\n</code></pre> Controlling batch size <p>By default, all ligands are docked in batches of 32 ligands. </p> <p>This can be controlled in two ways. First, you can control the batch size using the <code>batch_size</code> parameter.</p> <pre><code>sim.dock(\n    batch_size=32,\n    ... \n)\n</code></pre> <p>You can also specify the number of workers using:</p> <pre><code>sim.dock(\n    n_workers=2,\n    ...\n)\n</code></pre> <p>You can specify either the number of workers or the batch size, but not both. </p> <p>This queues up tasks on Deep Origin. When it completes, the results of docking can be viewed.</p>"},{"location":"dd/tutorial/docking.html#viewing-status-of-docking","title":"Viewing status of docking","text":"<p>A job object is returned from <code>docking.run</code>. This job object can be inspected to show the status of the job when created. </p> <p>The job object can also be used monitor a job as it completes:</p> <pre><code>job.watch()\n</code></pre> <p>Doing so creates a widget that automatically updates and monitors a job as long as its running. </p> <p>To stop watching a job, do:</p> <pre><code>job.stop_watching()\n</code></pre>"},{"location":"dd/tutorial/docking.html#results","title":"Results","text":""},{"location":"dd/tutorial/docking.html#viewing-results","title":"Viewing results","text":"<p>After completion of docking, we can view results using:</p> <pre><code>sim.docking.show_results()\n</code></pre> <p>This shows a table similar to:</p> <p></p>"},{"location":"dd/tutorial/docking.html#viewing-docked-poses","title":"Viewing docked poses","text":"<p>To view the docked poses of all ligands in the complex, use:</p> <pre><code>sim.docking.show_poses()\n</code></pre>"},{"location":"dd/tutorial/docking.html#exporting-for-further-analysis","title":"Exporting for further analysis","text":"<p>To obtain the raw dataframe for further analysis, use:</p> <pre><code>df = sim.docking.get_results()\n</code></pre>"},{"location":"dd/tutorial/docking.html#exporting-a-sdf-with-docked-poses","title":"Exporting a SDF with docked poses","text":"<p>To export a SDF with docked poses, use:</p> <pre><code>sim.docking.get_poses(\"/path/to/output.sdf\")\n</code></pre> <p>This generates a SDF file with the docked poses for all ligands in the Complex. </p>"},{"location":"dd/tutorial/getting-started.html","title":"Getting started with the Drug Discovery toolbox","text":"<p>This document describes how to use the Drug Discovery toolbox to perform docking and run ABFE and RBFE runs on Deep Origin. Functionality for this is built around the Complex class, that can be imported using:</p> <pre><code>from deeporigin.drug_discovery import Complex\n</code></pre> <p>For the rest of this tutorial, we will assume that this module is imported as <code>dd</code>. </p>"},{"location":"dd/tutorial/getting-started.html#prerequisites","title":"Prerequisites","text":"<p>Make sure you have  installed,  configured, and  authenticated with the Deep Origin python client.</p> <p>Recommended installation method</p> <p>We recommend using  these instructions to install the Deep Origin python client.</p> <p>Following these instructions will install the deeporigin client in an isolated environment using <code>uv</code>, and will start a Jupyter instance that you will need for the rest of this tutorial.</p>"},{"location":"dd/tutorial/getting-started.html#input-data","title":"Input data","text":"<p>Docking, ABFE, and RBFE require a protein to be in a PDB file as input.</p> <p>Ligands can be imported from SDF files or SMILES strings. To run ABFE and RBFE, the ligand must be in a SDF file.</p> <p>Example data</p> <p>If you want to explore these tools using some example data, we provide the BRD4 protein and a few ligands. This is built into the <code>deeporigin</code> package and can be accessed using:</p> <pre><code>from deeporigin.drug_discovery import EXAMPLE_DATA_DIR\n</code></pre>"},{"location":"dd/tutorial/getting-started.html#creating-a-complex-object","title":"Creating a <code>Complex</code> object","text":"<p>The core of the Drug Discovery toolbox is the <code>Complex</code> class, that acts as a container for a protein and a set of ligand.</p> <p>The <code>Complex</code> object can be created using:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\n# here, we're using the example data directory\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n</code></pre>"},{"location":"dd/tutorial/getting-started.html#inspecting-the-complex-object","title":"Inspecting the <code>Complex</code> object","text":"<p>Inspecting the object shows that it contains a protein and 8 ligands:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim\n</code></pre> <p>Expected output</p> <pre><code>Complex(protein=brd.pdb with 8 ligands)\n</code></pre>"},{"location":"dd/tutorial/getting-started.html#viewing-the-protein","title":"Viewing the protein","text":"<p>The 3D structure of the protein can be viewed using the built-in <code>show</code> method in the <code>Protein</code> class:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.protein.show()\n</code></pre> <p>This generates a 3D visualization of the protein, similar to:</p>"},{"location":"dd/tutorial/getting-started.html#listing-ligands","title":"Listing Ligands","text":"<p>We can further inspect the ligands by inspecting the <code>ligands</code> attribute:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.ligands\n</code></pre> <p>Expected output</p> <pre><code>[Ligand(\n  file: '/Users/deeporigin/brd-2.sdf'\n   smiles_string: '[H]C1=C([H])C(...'\n   properties: {'r_exp_dg': '-9.59'}\n),...]\n</code></pre> <p>Jupyter notebooks</p> <p>It is assumed that you are working in a Jupyter notebook (or similar IPython environment). This makes it easier to run the workflow, and some functions assume that you are in a Jupyter notebook.</p>"},{"location":"dd/tutorial/getting-started.html#viewing-ligands-2d-in-table","title":"Viewing Ligands (2D in table)","text":"<p>We can also view a table of 2D structures of the ligands, together with user-defined properties using the <code>show_ligands</code> method:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.show_ligands()\n</code></pre> <p>Expected output</p> <p></p>"},{"location":"dd/tutorial/getting-started.html#viewing-ligands-3d-structures","title":"Viewing Ligands (3D structures)","text":"<p>We can also view a table of 3D structures as follows:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.show_ligands(view=\"3d\")\n</code></pre> <p>That's it! We are now ready to perform  docking,  ABFE, and  RBFE.</p>"},{"location":"dd/tutorial/rbfe.html","title":"RBFE","text":"<p>This document describes how to run a RBFE  simulation using Deep Origin tools. </p>"},{"location":"dd/tutorial/rbfe.html#prerequisites","title":"Prerequisites","text":"<p>We assume that we have an initialized and configured <code>Complex</code> object:</p> <p><pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n</code></pre> For more details on how to get started, see  Getting Started .</p>"},{"location":"dd/tutorial/rbfe.html#starting-an-rbfe-run","title":"Starting an RBFE run","text":""},{"location":"dd/tutorial/rbfe.html#single-pair-of-ligands","title":"Single pair of ligands","text":"<p>To run an end-to-end RBFE workflow on a single pair of ligands, we use:</p> <pre><code>job = sim.rbfe.run_ligand_pair(\n    ligand1=sim.ligands[0],  # for example\n    ligand2=sim.ligands[1],\n)\n</code></pre> <p>This queues up a task on Deep Origin. When it completes, outputs will be written to the appropriate column in this database. </p> <p>You will see a message printed to screen similar to:</p> <p>Expected output</p> <pre><code>\ud83e\uddec Job started with ID: 20f05e96, execution ID: x9rl5eghrpqwyiciehc3e\n</code></pre>"},{"location":"dd/tutorial/rbfe.html#constructing-a-network","title":"Constructing a network","text":"<p>Coming soon</p> <p>Ability to construct a network of ligands for RBFE is coming soon.</p>"},{"location":"dd/tutorial/rbfe.html#parameters","title":"Parameters","text":"<p>The end to end RBFE tool has a number of user-accessible parameters. To view all parameters, use:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.rbfe._params.end_to_end\n</code></pre> Expected output <p>This will print a dictionary of the parameters used for RBFE, similar to:</p> <pre><code>{\n    \"complex_prep\": {\n        \"include_ligands\": 1,\n        \"include_protein\": 1,\n        \"sysprep_params\": {\n            \"charge_method\": \"bcc\",\n            \"do_loop_modelling\": false,\n            \"force_field\": \"ff14SB\",\n            \"is_lig_protonated\": false,\n            \"is_protein_protonated\": false,\n            \"keep_waters\": false,\n            \"lig_force_field\": \"gaff2\",\n            \"padding\": 1.0,\n            \"save_gmx_files\": false\n        },\n        \"test_run\": 0,\n        \"thread_pinning\": 1,\n        \"thread_pinning_offset\": 0\n    },\n    \"ligand1_prep\": {\n        \"include_ligands\": 1,\n        \"include_protein\": 0,\n        \"sysprep_params\": {\n            \"charge_method\": \"bcc\",\n            \"do_loop_modelling\": false,\n            \"force_field\": \"ff14SB\",\n            \"is_lig_protonated\": false,\n            \"is_protein_protonated\": false,\n            \"keep_waters\": false,\n            \"lig_force_field\": \"gaff2\",\n            \"padding\": 1.0,\n            \"save_gmx_files\": false\n        },\n        \"test_run\": 0,\n        \"thread_pinning\": 1,\n        \"thread_pinning_offset\": 0\n    },\n    \"ligand2_prep\": {\n        \"include_ligands\": 1,\n        \"include_protein\": 0,\n        \"sysprep_params\": {\n            \"charge_method\": \"bcc\",\n            \"do_loop_modelling\": false,\n            \"force_field\": \"ff14SB\",\n            \"is_lig_protonated\": false,\n            \"is_protein_protonated\": false,\n            \"keep_waters\": false,\n            \"lig_force_field\": \"gaff2\",\n            \"padding\": 1.0,\n            \"save_gmx_files\": false\n        },\n        \"test_run\": 0,\n        \"thread_pinning\": 1,\n        \"thread_pinning_offset\": 0\n    },\n    \"rbfe\": {\n        \"add_fep_repeats\": 0,\n        \"amend\": \"__NO_AMEND\",\n        \"annihilate\": true,\n        \"atom_mapping_threshold\": 0.01,\n        \"em_all\": true,\n        \"em_solvent\": true,\n        \"emeq_md_options\": {\n            \"T\": 298.15,\n            \"cutoff\": 0.9,\n            \"fourier_spacing\": 0.12,\n            \"hydrogen_mass\": 2.0,\n            \"\u0394t\": 0.004\n        },\n        \"fep_windows\": [\n            {\n                \"restraints_A\": [\n                    0.0,\n                    0.01,\n                    0.025,\n                    0.05,\n                    0.1,\n                    0.35,\n                    0.5,\n                    0.75,\n                    1.0\n                ]\n            },\n            {\n                \"coul_A\": [\n                    1.0,\n                    0.8,\n                    0.6,\n                    0.4,\n                    0.2,\n                    0.0\n                ]\n            },\n            {\n                \"vdw_A\": [\n                    1.0,\n                    0.9,\n                    0.8,\n                    0.7,\n                    0.6,\n                    0.5,\n                    0.4,\n                    0.3,\n                    0.2,\n                    0.1,\n                    0.0\n                ]\n            }\n        ],\n        \"mbar\": 1,\n        \"npt_reduce_restraints_ns\": 2.0,\n        \"nvt_heating_ns\": 1.0,\n        \"prod_md_options\": {\n            \"T\": 298.15,\n            \"barostat\": \"MonteCarloBarostat\",\n            \"barostat_exchange_interval\": 500,\n            \"cutoff\": 0.9,\n            \"fourier_spacing\": 0.12,\n            \"hydrogen_mass\": 2.0,\n            \"integrator\": \"BAOABIntegrator\",\n            \"\u0394t\": 0.004\n        },\n        \"repeats\": 1,\n        \"run_name\": \"binding\",\n        \"skip_emeq\": \"__NO\",\n        \"softcore_alpha\": 0.5,\n        \"steps\": 1250000,\n        \"system\": \"complex\",\n        \"test_run\": 0,\n        \"thread_pinning\": 1,\n        \"thread_pinning_offset\": 0,\n        \"threads\": 0,\n        \"workers\": 0\n    },\n    \"solvation1\": {\n        \"add_fep_repeats\": 0,\n        \"amend\": \"__NO_AMEND\",\n        \"annihilate\": true,\n        \"atom_mapping_threshold\": 0.01,\n        \"em_all\": true,\n        \"em_solvent\": true,\n        \"emeq_md_options\": {\n            \"T\": 298.15,\n            \"cutoff\": 0.9,\n            \"fourier_spacing\": 0.12,\n            \"hydrogen_mass\": 2.0,\n            \"\u0394t\": 0.004\n        },\n        \"fep_windows\": [\n            {\n                \"coul_A\": [\n                    1.0,\n                    0.8,\n                    0.6,\n                    0.4,\n                    0.2,\n                    0.0\n                ]\n            },\n            {\n                \"vdw_A\": [\n                    1.0,\n                    0.9,\n                    0.8,\n                    0.7,\n                    0.6,\n                    0.5,\n                    0.4,\n                    0.3,\n                    0.2,\n                    0.1,\n                    0.0\n                ]\n            }\n        ],\n        \"mbar\": 1,\n        \"npt_reduce_restraints_ns\": 0.2,\n        \"nvt_heating_ns\": 0.1,\n        \"prod_md_options\": {\n            \"T\": 298.15,\n            \"barostat\": \"MonteCarloBarostat\",\n            \"barostat_exchange_interval\": 500,\n            \"cutoff\": 0.9,\n            \"fourier_spacing\": 0.12,\n            \"hydrogen_mass\": 2.0,\n            \"integrator\": \"BAOABIntegrator\",\n            \"\u0394t\": 0.004\n        },\n        \"repeats\": 1,\n        \"skip_emeq\": \"__NO\",\n        \"softcore_alpha\": 0.5,\n        \"steps\": 300000,\n        \"test_run\": 0,\n        \"thread_pinning\": 1,\n        \"thread_pinning_offset\": 0,\n        \"threads\": 0,\n        \"workers\": 0\n    },\n    \"solvation2\": {\n        \"add_fep_repeats\": 0,\n        \"amend\": \"__NO_AMEND\",\n        \"annihilate\": true,\n        \"atom_mapping_threshold\": 0.01,\n        \"em_all\": true,\n        \"em_solvent\": true,\n        \"emeq_md_options\": {\n            \"T\": 298.15,\n            \"cutoff\": 0.9,\n            \"fourier_spacing\": 0.12,\n            \"hydrogen_mass\": 2.0,\n            \"\u0394t\": 0.004\n        },\n        \"fep_windows\": [\n            {\n                \"coul_A\": [\n                    1.0,\n                    0.8,\n                    0.6,\n                    0.4,\n                    0.2,\n                    0.0\n                ]\n            },\n            {\n                \"vdw_A\": [\n                    1.0,\n                    0.9,\n                    0.8,\n                    0.7,\n                    0.6,\n                    0.5,\n                    0.4,\n                    0.3,\n                    0.2,\n                    0.1,\n                    0.0\n                ]\n            }\n        ],\n        \"mbar\": 1,\n        \"npt_reduce_restraints_ns\": 0.2,\n        \"nvt_heating_ns\": 0.1,\n        \"prod_md_options\": {\n            \"T\": 298.15,\n            \"barostat\": \"MonteCarloBarostat\",\n            \"barostat_exchange_interval\": 500,\n            \"cutoff\": 0.9,\n            \"fourier_spacing\": 0.12,\n            \"hydrogen_mass\": 2.0,\n            \"integrator\": \"BAOABIntegrator\",\n            \"\u0394t\": 0.004\n        },\n        \"repeats\": 1,\n        \"skip_emeq\": \"__NO\",\n        \"softcore_alpha\": 0.5,\n        \"steps\": 300000,\n        \"test_run\": 0,\n        \"thread_pinning\": 1,\n        \"thread_pinning_offset\": 0,\n        \"threads\": 0,\n        \"workers\": 0\n    }\n}\n</code></pre> <p>Any of these parameters are modifiable using dot notation. For example, to change the number of steps in the RBFE step, we can use:</p> <pre><code>from deeporigin.drug_discovery import Complex, EXAMPLE_DATA_DIR\n\nsim = Complex.from_dir(EXAMPLE_DATA_DIR)\n\nsim.rbfe._params.end_to_end.binding.steps = 500000\n</code></pre>"},{"location":"dd/tutorial/rbfe.html#results","title":"Results","text":""},{"location":"dd/tutorial/rbfe.html#viewing-results","title":"Viewing results","text":"<p>After initiating a run, we can view results using:</p> <pre><code>sim.rbfe.show_results()\n</code></pre> <p>This shows a table similar to:</p> <p>Expected output</p> <p></p>"},{"location":"dd/tutorial/rbfe.html#exporting-results-for-analysis","title":"Exporting results for analysis","text":"<p>These results can be exported for analysis using:</p> <pre><code>df = sim.rbfe.get_results()\ndf\n</code></pre> <p>Expected output</p> Index Binding Solvation AnalyticalCorr Std Total Ligand1 Ligand2 SMILES1 SMILES2 0 69.397782 5.298763 0.0 0.0 64.099019 Ligands-6 Ligands-2 [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H]... [H]C([H])=C([H])C([H])([H])N1C(=O)C2=C(C([H])=... 0 233.01173 172.591013 0.0 0.0 60.420717 Ligands-1 Ligands-2 [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H]... [H]C([H])=C([H])C([H])([H])N1C(=O)C2=C(C([H])=... 0 242.937649 178.723907 0.0 0.0 64.213742 Ligands-1 Ligands-3 [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H]... [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H]... 0 63.544525 7.050677 0.0 0.0 56.493848 Ligands-5 Ligands-3 [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H]... [H]C1=C([H])C(C(=O)N(C([H])([H])[H])C([H])([H]..."},{"location":"how-to/auth.html","title":"Sign into Deep Origin","text":"<p>Configure if running locally</p> <p>If you're running this code on your local computer (outside of a Deep Origin Workstation), make sure to configure it first.</p> <p>To use most of the functionality of the CLI or Python client, you must first run one of the following commands to sign into Deep Origin.</p> PythonCLI <pre><code>from deeporigin import auth\nauth.authenticate()\n</code></pre> <pre><code>deeporigin authenticate\n</code></pre> <p>In either case, you will be presented with a prompt similar to below:</p> <pre><code>To connect to the Deep Origin OS, navigate your browser to \n\nhttps://&lt;env&gt;auth0.com/activate?user_code=VMPZ-PQFG\n\nand verify the confirmation code is \"VMPZ-PQFG\", and click the \"Confirm\" button.\n</code></pre> <p>When you visit that URL, you will see a prompt that looks like:</p> <p></p> <p>After clicking the <code>Confirm</code> button, you will see a confirmation similar to below:</p> <p></p> <p>After signing in, your access tokens will be cached to disk and then automatically be used in subsequent interactions with Deep Origin.</p> <p>Authenticating</p> <p>In most cases, you only need to authenticate to the Deep Origin OS once. You do not need to authenticate every time you use the client or the CLI.</p> <p>Authenticating on Deep Origin workstations</p> <p>Presently, workstation users must authenticate (once) to the Deep Origin OS. We plan to develop the capability to automatically authenticate workstation users.</p>"},{"location":"platform/index.html","title":"Platform API","text":"<p>The Deep Origin CLI and python client allows you to control and interact with the Deep Origin platform. </p>"},{"location":"platform/how-to/user-info.html","title":"Get user information","text":""},{"location":"platform/how-to/user-info.html#get-info-about-current-user","title":"Get info about current user","text":"<p>To get information about the currently logged in user, including the user ID, use:</p> <pre><code>from deeporigin.platform import users_api\nusers_api.get_account()\n</code></pre> <p>returns information about the current user. A typical response is:</p> <pre><code>{\n    \"attributes\": {\n        \"company\": null,\n        \"email\": \"curie@deeporigin.com\",\n        \"expertise\": null,\n        \"industries\": null,\n        \"name\": \"Marie Curie\",\n        \"pendingInvites\": [],\n        \"platform\": \"OS\",\n        \"title\": null\n    },\n    \"id\": \"google-apps|curie@deeporigin.com\",\n    \"type\": \"User\"\n}\n</code></pre>"},{"location":"platform/how-to/workstation-info.html","title":"Get information about workstations","text":"<p>To list all workstations on Deep Origin, use:</p> <pre><code>from deeporigin.platform import api\napi.get_workstations()\n</code></pre> <p>This returns a list of objects, where each object correspond to a workstation. A typical entry looks like:</p> <pre><code>{\n    \"attributes\": {\n        \"accessMethods\": [\n            {\n                \"icon\": \"/assets/icons/catalog-items/jupyterlab.svg\",\n                \"id\": \"jupyterlab\",\n                \"name\": \"JupyterLab\"\n            },\n            {\n                \"icon\": \"/assets/icons/catalog-items/code-server.svg\",\n                \"id\": \"code-server\",\n                \"name\": \"VS Code (web)\"\n            }\n        ],\n        \"accessSettings\": {\n            \"publicKey\": \"ssh-ed25519 ... \",\n            \"ssh\": true\n        },\n        \"autoStopIdleCPUThreshold\": 0,\n        \"autoStopIdleDuration\": 30,\n        \"blueprint\": \"deeporigin/deeporigin-python:staging\",\n        \"cloudProvider\": {\n            \"region\": \"us-west-2\",\n            \"vendor\": \"aws\"\n        },\n        \"clusterId\": \"3bb775e4-8be6-4936-a6b9\",\n        \"created\": \"2024-10-05T17:01:06.840Z\",\n        \"description\": \"dfd\",\n        \"drn\": \"drn:...\",\n        \"enableAutoStop\": true,\n        \"name\": \"forthcoming-tyrannosaurus-8fd\",\n        \"nextUserActions\": [\n            \"DELETE\"\n        ],\n        \"orgHandle\": \"deeporigin-com\",\n        \"requestedResources\": {\n            \"cpu\": 8,\n            \"gpu\": 0,\n            \"gpuSize\": \"NONE\",\n            \"memory\": 32,\n            \"storage\": 250\n        },\n        \"state\": {\n            \"error\": \"\",\n            \"isError\": false,\n            \"stage\": \"READY\",\n            \"status\": \"TERMINATED\"\n        },\n        \"status\": \"TERMINATED\",\n        \"summary\": \"\",\n        \"templateVersion\": \"v0.1.0\",\n        \"updated\": \"2024-10-07T12:46:46.511Z\",\n        \"userHandle\": \"google-apps|srinivas@deeporigin.com\",\n        \"volumeDrns\": [\n            \"...\"\n        ],\n        \"wasAutoStopped\": false\n    },\n    \"id\": \"...\",\n    \"type\": \"ComputeBench\"\n}\n</code></pre>"},{"location":"platform/ref/platform.html","title":"Platform API","text":"<p>This package (<code>deeporigin</code>) wraps a lower-level autogenerated client library to interact with the platform API. </p> <p>The following modules are available to interact with various APIs on the platform:</p>"},{"location":"platform/ref/platform.html#platformclusters_api","title":"<code>platform.clusters_api</code>","text":"<p>API to interact with the clusters API. To list available methods in this module, use:</p> <pre><code>from deeporigin.platform import clusters_api\nclusters_api.__all__\n</code></pre>"},{"location":"platform/ref/platform.html#platformorganizations_api","title":"<code>platform.organizations_api</code>","text":"<p>API to interact with the organizations API. To list available methods in this module, use:</p> <pre><code>from deeporigin.platform import organizations_api\norganizations_api.__all__\n</code></pre>"},{"location":"platform/ref/platform.html#platformtools_api","title":"<code>platform.tools_api</code>","text":"<p>API to interact with the tools API. To list available methods in this module, use:</p> <pre><code>from deeporigin.platform import tools_api\ntools_api.__all__\n</code></pre>"},{"location":"platform/ref/platform.html#platformusers_api","title":"<code>platform.users_api</code>","text":"<p>API to interact with the users API. To list available methods in this module, use:</p> <pre><code>from deeporigin.platform import users_api\nusers_api.__all__\n</code></pre>"},{"location":"platform/ref/platform.html#platformvolumes_api","title":"<code>platform.volumes_api</code>","text":"<p>API to interact with the volumes API. To list available methods in this module, use:</p> <pre><code>from deeporigin.platform import volumes_api\nvolumes_api.__all__\n</code></pre>"},{"location":"platform/ref/platform.html#platformworkstations_api","title":"<code>platform.workstations_api</code>","text":"<p>API to interact with the workstations API. To list available methods in this module, use:</p> <pre><code>from deeporigin.platform import workstations_api\nworkstations_api.__all__\n</code></pre>"},{"location":"tools/index.html","title":"Tools on Deep Origin","text":"<p>This page describes how you can run tools on Deep Origin.</p>"},{"location":"tools/index.html#what-are-tools","title":"What are tools?","text":"<p>Tools are containerized scientific tools that can be run on the Deep Origin platform. The Deep Origin API (and this python client) make it easy to run tools on the Deep Origin platform, and wire up inputs and outputs. </p>"},{"location":"tools/index.html#can-i-make-my-own-tools","title":"Can I make my own tools?","text":"<p>Info</p> <p>This ability is coming soon. Stay tuned for details. </p>"},{"location":"tools/how-to/list-tools.html","title":"List tools","text":"<p>This document describes how to discover and list tools on the Deep Origin platform. </p> <p>First, available tools are listed on the panel on left, with documentation on each tool and how to run them. </p>"},{"location":"tools/how-to/list-tools.html#list-tools-using-the-api","title":"List tools using the API","text":"<p>All tools on the Deep Origin platform can by listed using the API.</p> <pre><code>from deeporigin.platform import tools_api\ntools = tools_api.get_all_tools()\n</code></pre>"}]}