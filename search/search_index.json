{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Deep Origin CLI and Python client","text":"<ul> <li> Pure python  Lightweight implementation, written in pure Python. Works on any system that can run Python.</li> <li> Talks to Deep Origin APIs Talks to Deep Origin APIs, including APIs to work with managed data, and ComputeBench.</li> <li> Freely available  Freely available and open source. Install on your computer!</li> <li> Easy install  Just <code>pip install deeporigin</code>.</li> </ul>"},{"location":"index.html#overview","title":"Overview","text":"<p>The Deep Origin CLI and Python client allow you to programmatically interact with the Deep Origin platform.</p> <pre><code>from deeporigin.managed_data import api\n\napi.get_row_data(\"data-1\")\n\n # {'Status': 'Processing',\n #  'Age (years)': 15,\n #  'Gender': 'F',\n #  'Order date': '2024-03-01T00:00:00',\n #  'Received by client': '2023-04-05T00:00:00',\n #  'Sent to client': '2024-03-03T00:00:00',\n #  'Sent by client': '2024-03-05T00:00:00',\n #  'Raw reads': ['_file:UjKrB0QibhgBDAVvGQ3VP'],\n #  'Date completed': '2024-03-08T00:00:00',\n # }\n</code></pre>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#for-users","title":"For users","text":"<p>Run the commands below to use your favorite package manager to install the Deep Origin CLI and Python client.</p> <p>Run the following command:</p> <p>Warning</p> <p>We recommend installing this package into a virtual environment. Some tools create their own virtual environments, like poetry.</p> pippipxPipenvPoetryuvFlit <pre><code>pip install -q deeporigin\n</code></pre> <pre><code>pipx install deeporigin\n</code></pre> <pre><code>pipenv install deeporigin\n</code></pre> <pre><code>poetry add deeporigin\n</code></pre> <pre><code>uv pip install deeporigin\n</code></pre> <pre><code>flit install deeporigin\n</code></pre>"},{"location":"install.html#supported-python-versions","title":"Supported Python versions","text":"<p><code>deeporigin</code> is tested against these versions of Python using GitHub Actions:</p> <ul> <li>3.9</li> <li>3.10</li> <li>3.11</li> <li>3.12</li> </ul>"},{"location":"install.html#for-developers","title":"For developers","text":"<p>Developers only</p> <p>If you intend to contribute this package, we recommend installing this package via the instructions below. If you merely intend to use this package, we recommend following the instructions above.</p>"},{"location":"install.html#get-the-code","title":"Get the code","text":"<p>First, run the following command: <pre><code>git clone git@github.com:deeporiginbio/deeporigin-client.git\n</code></pre></p>"},{"location":"install.html#install-the-development-dependencies-for-this-package","title":"Install the development dependencies for this package","text":"<p>Second, install Python 3.9+ and make.</p> <p>To verify that both are installed, run the following commands:</p> <pre><code>python3 --version\n# Python 3.12.3\n\nmake --version\n# GNU Make 4.4.1\n</code></pre>"},{"location":"install.html#install-this-package-locally","title":"Install this package locally","text":"<p>Third, navigate to the directory you downloaded the code to, and run the following command:</p> <pre><code>make install\n</code></pre> <p>This will install this package in an \"editable\" mode. In this mode, your changes will take effect immediately.</p>"},{"location":"install.html#running-the-tests-for-this-package","title":"Running the tests for this package","text":"<p>Once installed, you can test this package by running the following command:</p> <pre><code>make test\n</code></pre>"},{"location":"how-to/auth.html","title":"Authenticate to Deep Origin","text":"<p>You can sign into the Deep Origin platform using the Python Client or the CLI. </p> CLIPython Client <p>To authenticate with Deep Origin:</p> <pre><code>deeporigin authenticate\n</code></pre> <pre><code>from deeporigin import auth\nauth.authenticate()\n</code></pre> <p>In either case, you will be presented with a prompt that looks like:</p> <p><pre><code>To connect to the Deep Origin platform, navigate your browser to \n\nhttps://&lt;env&gt;auth0.com/activate?user_code=VMPZ-PQFG\n\nand verify the confirmation code is \"VMPZ-PQFG\", and click the \"Confirm\" button.\n</code></pre> Visting that URL, you will see a prompt that looks like:</p> <p></p> <p>On clicking the <code>Confirm</code> button, you are shown:</p> <p></p> <p>The authentication process is then complete and access tokens are cached to disk, and will automatically be used in subsequent interactions. </p> <p>Authenticating</p> <p>You do not need to authenticate every time you use the client or the CLI. Authenticating once, before first use, should be sufficient.</p>"},{"location":"how-to/do-info.html","title":"View Deep Origin Information","text":""},{"location":"how-to/do-info.html#view-deep-origin-config-info","title":"View Deep Origin Config Info","text":"<p>To view configuration information on Deep Origin, run:</p> <pre><code>deeporigin config\n</code></pre> <p>and you will see a table that looks like this:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name                        \u2502 Value                               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 organization_id             \u2502 likely-aardvark-ewo                 \u2502\n\u2502 bench_id                    \u2502 average-possum-3x3                  \u2502\n\u2502 env                         \u2502 us-west-1                           \u2502\n\u2502 api_endpoint                \u2502 https://os.prod.deeporigin.io/api   \u2502\n\u2502 nucleus_api_route           \u2502 nucleus-api/api/                    \u2502\n\u2502 graphql_api_route           \u2502 api/graphql/                        \u2502\n\u2502 auth_domain                 \u2502 https://formicbio-dev.us.auth0.com  \u2502\n\u2502 auth_device_code_endpoint   \u2502 oauth/device/code/                  \u2502\n\u2502 auth_token_endpoint         \u2502 oauth/token/                        \u2502\n\u2502 auth_audience               \u2502 https://os.deeporigin.io/api        \u2502\n\u2502 auth_grant_type             \u2502 urn:ietf:params:device_code         \u2502\n\u2502 auth_client_id              \u2502 &lt;secret&gt;                            \u2502\n\u2502 auth_client_secret          \u2502 &lt;secret&gt;                            \u2502\n\u2502 api_tokens_filename         \u2502 ~/api_tokens                        \u2502\n\u2502 variables_cache_filename    \u2502 ~/variables.yml                     \u2502\n\u2502 feature_flags               \u2502                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"how-to/do-info.html#view-deep-origin-context-information","title":"View Deep Origin Context Information","text":"<p>Context information from Deep Origin can be displayed using the CLI:</p> <pre><code>deeporigin context\n</code></pre> <p>and you will see a table that looks like this:</p> <pre><code>Bench ID: average-possum-3x3\nUser ID: None\nOrganization ID: likely-aardvark-ewo\nHost: None\nHardware: None\nEnvironment: edge\nDebug: False\n</code></pre> <p>Only supported on ComputeBenches</p> <p>Note that this command is only supported on ComputeBenches. If you run this command outside of a ComputeBench, you will likely see something like this:</p> <pre><code>Bench ID: None\nUser ID: None\nOrganization ID: None\nHost: None\nHardware: None\nEnvironment: None\nDebug: False\n</code></pre>"},{"location":"how-to/variables.html","title":"Fetch Secrets and Variables","text":"<p>Variables and secrets specified in the Deep Orgin platform, either at the organization level or the account level, can be installed onto ComputeBenches. </p> <p><pre><code>deeporigin variables install\n</code></pre> Doing so prints a message that looks like:</p> <pre><code>No variables were modified\n\nNo variables were added\nNo variables were deleted\n1 variables were unmodified:\n  EnvironmentVariable: foo\n</code></pre> <p>Only on ComputeBenches</p> <p>This functionality is meant to only function on Deep Origin ComputeBenches. </p>"},{"location":"how-to/managed-data/inspect-data.html","title":"Inspect data","text":"<p>This page describes how to describe and show details of data objects in Deep Origin. To simply list objects, see List data.</p>"},{"location":"how-to/managed-data/inspect-data.html#describe-data","title":"Describe data","text":""},{"location":"how-to/managed-data/inspect-data.html#describe-rows","title":"Describe rows","text":"<p>Describing rows provides metadata about the row, such as its ID, parent, and status. </p> <p>Describe vs. Show</p> <p>This does not show you information in that row. To see data contained in that row, use the <code>show</code> command.</p> CLIPython Client <p>To describe a row in a database in Deep Origin, use:</p> <pre><code>deeporigin data describe &lt;row-id&gt;\n</code></pre> <p>This will show you a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name             \u2502 Value                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id               \u2502 _row:WORR9xeGvG6mSg0yyDRlk         \u2502\n\u2502 parentId         \u2502 _database:kyEws11L4KagGAaqRwONv    \u2502\n\u2502 type             \u2502 row                                \u2502\n\u2502 dateCreated      \u2502 2024-05-08 17:59:32.512306         \u2502\n\u2502 dateUpdated      \u2502 2024-05-08 18:08:13.103            \u2502\n\u2502 createdByUserDrn \u2502 scientist@deeporigin.com           \u2502\n\u2502 editedByUserDrn  \u2502 scientist@deeporigin.com           \u2502\n\u2502 hid              \u2502 data-2                             \u2502\n\u2502 validationStatus \u2502 valid                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;row-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"id\": \"_row:WORR9xeGvG6mSg0yyDRlk\",\n  \"parentId\": \"_database:kyEws11L4KagGAaqRwONv\",\n  \"type\": \"row\",\n  \"dateCreated\": \"2024-05-08 17:59:32.512306\",\n  \"dateUpdated\": \"2024-05-08 18:08:13.103\",\n  \"createdByUserDrn\": \"scientist@deeporigin.com\",\n  \"editedByUserDrn\": \"scientist@deeporigin.com\",\n  \"hid\": \"data-2\",\n  \"validationStatus\": \"valid\"\n}\n</code></pre> <p>To describe a row in a database in Deep Origin, use:</p> <pre><code>from deeporigin.managed_data import _api\n_api.describe_row(\"_row:WORR9xeGvG6mSg0yyDRlk\")\n</code></pre>"},{"location":"how-to/managed-data/inspect-data.html#describe-files","title":"Describe files","text":"CLIPython Client <p>To describe a row in a database in Deep Origin, use:</p> <pre><code>deeporigin data describe &lt;row-id&gt;\n</code></pre> <p>This will show you a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name             \u2502 Value                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 id               \u2502 _file:gBAK9tzFC5Cegx4NmSETc       \u2502\n\u2502 uri              \u2502 s3://_file:gBAK9tzFC5Cegx4NmSETc  \u2502\n\u2502 name             \u2502 db-dna.csv                        \u2502\n\u2502 status           \u2502 ready                             \u2502\n\u2502 contentLength    \u2502 234                               \u2502\n\u2502 contentType      \u2502 text/csv                          \u2502\n\u2502 dateCreated      \u2502 2024-05-08 01:01:48.925           \u2502\n\u2502 dateUpdated      \u2502 2024-05-08 01:01:48.925           \u2502\n\u2502 createdByUserDrn \u2502 scientist@deeporigin.com          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;file-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"id\": \"_file:gBAK9tzFC5Cegx4NmSETc\",\n  \"uri\": \"s3://_file:gBAK9tzFC5Cegx4NmSETc\",\n  \"name\": \"db-dna.csv\",\n  \"status\": \"ready\",\n  \"contentLength\": 234,\n  \"contentType\": \"text/csv\",\n  \"dateCreated\": \"2024-05-08 01:01:48.925\",\n  \"dateUpdated\": \"2024-05-08 01:01:48.925\",\n  \"createdByUserDrn\": \"scientist@deeporigin.com\"\n}\n</code></pre> <p>To describe a file in a database in Deep Origin, use:</p> <pre><code>from deeporigin.managed_data import _api\n_api.describe_file(\"file-id\")\n</code></pre>"},{"location":"how-to/managed-data/inspect-data.html#show-data","title":"Show data","text":""},{"location":"how-to/managed-data/inspect-data.html#show-rows","title":"Show rows","text":"CLIPython Client <p>To show the data in a row in a database in Deep Origin, use:</p> <pre><code>deeporigin data show &lt;row-id&gt;\n</code></pre> <p>This will show you a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name      \u2502 Value                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 File      \u2502 _file:hnU7F62xeW8j0l1kR7YP1 \u2502\n\u2502 Float Num \u2502 112                         \u2502\n\u2502 selctcol  \u2502 sdsd                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;file-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"File\": \"_file:hnU7F62xeW8j0l1kR7YP1\",\n  \"Float Num\": 112,\n  \"selctcol\": \"sdsd\"\n}\n</code></pre> <p>To show the data in a row in a database in Deep Origin, use:</p> <pre><code>from deeporigin.managed_data import  api\napi.get_row_data(\"row-id\")\n</code></pre> <p>Data is returned as a dictionary where the key is the column name and the value is the value in that cell.</p>"},{"location":"how-to/managed-data/inspect-data.html#show-databases","title":"Show databases","text":"CLIPython Client <p>To show an entire database in Deep Origin, use:</p> <pre><code>deeporigin data show &lt;database-id&gt;\n</code></pre> <p>This will show you a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502  Status   \u2502 stag-id   \u2502 Customer Name    \u2502 Status     \u2502  Output Files     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 valid     \u2502 stag-1    \u2502 Blue Sun Corp    \u2502 Processing \u2502                   \u2502\n\u2502 valid     \u2502 stag-2    \u2502 Veridian Dynamics\u2502 Complete   \u2502   report.tar.gz   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data describe &lt;database-id&gt; --json | jq\n</code></pre> <pre><code>{\n  \"Status\": [\n    \"valid\",\n    \"valid\"\n  ],\n  \"stag-id\": [\n    \"stag-1\",\n    \"stag-2\"\n  ],\n  \"Customer Name\": [\n    \"Blue Sun Corp \",\n    \"Veridian Dynamics\"\n  ],\n  \"Status\": [\n    \"Processing\",\n    \"Complete\"\n  ],\n  \"Output Files\": [\n    null,\n    \"report.tar.gz\"\n  ]\n}\n</code></pre> <p>To retrieve an entire database from Deep Origin, use:</p> <pre><code>from deeporigin.managed_data import api\napi.get_dataframe(\"database-id\")\n</code></pre> <p>Data is returned as a Pandas DataFrame.</p>"},{"location":"how-to/managed-data/list-data.html","title":"List data","text":"<p>This page describes how to list resources on Deep Origin. Listing workspaces, databases, rows and files can be used to discover the resources available on Deep Origin, and show their IDs for further queries.</p>"},{"location":"how-to/managed-data/list-data.html#list-workspaces","title":"List workspaces","text":"CLIPython Client <p>To list all workspaces in Deep Origin:</p> <pre><code>deeporigin data list --workspaces\n</code></pre> <p>This will show you a screen similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name           \u2502 Type      \u2502 ID             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Secret Project \u2502 workspace \u2502 secret         \u2502\n\u2502 QC Efforts     \u2502 workspace \u2502 qc-efforts     \u2502\n\u2502 Covid Target   \u2502 workspace \u2502 corona         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data list --workspaces --json | jq\n</code></pre> <pre><code>[\n  {\n    \"id\": \"_workspace:ncZhbnYXXfg0zWNcGKTnz\",\n    \"parentId\": null,\n    \"hid\": \"secret\",\n    \"type\": \"workspace\",\n    \"name\": \"Secret Project\"\n  },\n  {\n    \"id\": \"_workspace:sDTZKGZXOkhGw6XSg2Jla\",\n    \"parentId\": null,\n    \"hid\": \"qc-efforts\",\n    \"type\": \"workspace\",\n    \"name\": \"QC Efforts\"\n  },\n  {\n    \"id\": \"_workspace:UWhlb4Wyzh2R7bySapY2m\",\n    \"parentId\": null,\n    \"hid\": \"corona\",\n    \"type\": \"workspace\",\n    \"name\": \"Covid Target\"\n  }\n]\n</code></pre> Combining outputs <p>You can combine multiple output types. For example, to list all workspaces and databases:</p> <pre><code>deeporigin data list --workspaces --databases\n</code></pre> <p>We can list all workspaces using a <code>RowType</code> argument:</p> <pre><code>from deeporigin.managed_data import _api, api\n_api.list_rows(row_type=\"workspace\")\n</code></pre>"},{"location":"how-to/managed-data/list-data.html#list-databases","title":"List databases","text":"CLIPython Client <p>To list all databases in Deep Origin:</p> <pre><code>deeporigin data list --databases\n</code></pre> <p>This will show you a screen similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name           \u2502 Type      \u2502 ID             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 First Database \u2502 database  \u2502 first          \u2502\n\u2502 QC Efforts     \u2502 database  \u2502 qc-efforts     \u2502\n\u2502 Covid Target   \u2502 database  \u2502 corona         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data list --databases --json | jq\n</code></pre> <pre><code>[\n  {\n    \"id\": \"_database:ncZhbnYXXfg0zWNcGKTnz\",\n    \"parentId\": \"_workspace:ncZhbnYXXfg0zWNcGKTnz\",\n    \"hid\": \"db-first\",\n    \"type\": \"database\",\n    \"name\": \"First Database\"\n  },\n  {\n    \"id\": \"_database:sDTZKGZXOkhGw6XSg2Jla\",\n    \"parentId\": \"_workspace:sDTZKGZXOkhGw6XSg2Jla\",\n    \"hid\": \"db-qc\",\n    \"type\": \"database\",\n    \"name\": \"QC Efforts\"\n  },\n  {\n    \"id\": \"_database:UWhlb4Wyzh2R7bySapY2m\",\n    \"parentId\": \"_workspace:UWhlb4Wyzh2R7bySapY2m\",\n    \"hid\": \"db-covid\",\n    \"type\": \"database\",\n    \"name\": \"Covid Target\"\n  }\n]\n</code></pre> Combining outputs <p>You can combine multiple output types. For example, to list all workspaces and databases:</p> <pre><code>deeporigin data list --workspaces --databases\n</code></pre> <p>We can list all databases using a <code>RowType</code> argument:</p> <pre><code>from deeporigin.managed_data import _api, api\n_api.list_rows(row_type=\"database\")\n</code></pre>"},{"location":"how-to/managed-data/list-data.html#list-rows","title":"List rows","text":"CLIPython Client <p>To list all database rows in Deep Origin:</p> <pre><code>deeporigin data list --rows\n</code></pre> <p>This will show you a screen similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name   \u2502 Type   \u2502 ID     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        \u2502 row    \u2502 data-1 \u2502\n\u2502        \u2502 row    \u2502 data-2 \u2502\n\u2502        \u2502 row    \u2502 data-3 \u2502\n\u2502        \u2502 row    \u2502 data-4 \u2502\n\u2502        \u2502 row    \u2502 data-5 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>We can list all rows using a <code>RowType</code> argument:</p> <pre><code>from deeporigin.managed_data import _api, api\n_api.list_rows(row_type=\"row\")\n</code></pre>"},{"location":"how-to/managed-data/list-data.html#list-files","title":"List files","text":"CLIPython Client <p>To list all databases in Deep Origin:</p> <pre><code>deeporigin data list --files\n</code></pre> <p>This will show you a table similar to:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name       \u2502 Status   \u2502 ID                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 db-dna.csv \u2502 ready    \u2502 _file:gBAK9tzFC5Cegx4NmSETc \u2502\n\u2502 seqs.gz    \u2502 ready    \u2502 _file:FgVjcv8zzyPho6FME8QFp \u2502\n\u2502 db-rna.csv \u2502 ready    \u2502 _file:hnU7F62xeW8j0l1kR7YP1 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin data list --databases --json | jq\n</code></pre> <pre><code>[\n  {\n    \"file\": {\n      \"id\": \"_file:gBAK9tzFC5Cegx4NmSETc\",\n      \"uri\": \"s3://_file:gBAK9tzFC5Cegx4NmSETc\",\n      \"name\": \"db-dna.csv\",\n      \"status\": \"ready\",\n      \"contentLength\": 234,\n      \"contentType\": \"text/csv\",\n      \"dateCreated\": \"2024-05-08 01:01:48.925\",\n      \"dateUpdated\": \"2024-05-08 01:01:48.925\",\n      \"createdByUserDrn\": \"scientist@deeporigin.com\"\n    }\n  },\n  {\n    \"file\": {\n      \"id\": \"_file:FgVjcv8zzyPho6FME8QFp\",\n      \"uri\": \"s3://_file:FgVjcv8zzyPho6FME8QFp\",\n      \"name\": \"seqs.gz\",\n      \"status\": \"ready\",\n      \"contentLength\": 554588,\n      \"contentType\": \"zip/gz\",\n      \"dateCreated\": \"2024-05-08 18:08:09.149\",\n      \"dateUpdated\": \"2024-05-08 18:08:09.149\",\n      \"createdByUserDrn\": \"scientist@deeporigin.com\"\n    },\n    \"assignments\": [\n      {\n        \"rowId\": \"_row:WORR9xeGvG6mSg0yyDRlk\"\n      }\n    ]\n  },\n  {\n    \"file\": {\n      \"id\": \"_file:hnU7F62xeW8j0l1kR7YP1\",\n      \"uri\": \"s3://_file:hnU7F62xeW8j0l1kR7YP1\",\n      \"name\": \"db-rna.csv\",\n      \"status\": \"ready\",\n      \"contentLength\": 234,\n      \"contentType\": \"text/csv\",\n      \"dateCreated\": \"2024-05-08 18:07:57.655\",\n      \"dateUpdated\": \"2024-05-08 18:07:57.655\",\n      \"createdByUserDrn\": \"scientist@deeporigin.com\"\n    },\n    \"assignments\": [\n      {\n        \"rowId\": \"_row:mlNnmNkfktz7GT5qpjyrF\"\n      }\n    ]\n  }\n]\n</code></pre> <p>Listing files cannot list other objects</p> <p>If you pass <code>--files</code> to the list command, all other  arguments are ignored. So </p> <p><pre><code>deeporigin data list --files --databases\n</code></pre> will only list files.</p> <p>First, we start off by importing the necessary modules:</p> <p>We can list all files on Deep Origin using:</p> <pre><code>from deeporigin.managed_data import _api, api\n_api.list_files()\n</code></pre> <p>To find only unassigned files, we can use:</p> <pre><code>_api.list_files(is_unassigned=True)\n</code></pre> <p>To find files that are assigned to a specific row:</p> <pre><code>_api.list_files(assigned_row_ids=[\"row-1\"])\n</code></pre>"},{"location":"how-to/managed-data/upload-data.html","title":"Upload data","text":"<p>This page describes how to upload data to Deep Origin Data.</p>"},{"location":"how-to/managed-data/upload-data.html#upload-files","title":"Upload Files","text":"CLIPython Client <p>To upload a file to Deep Origin Data, use the <code>upload</code> command:</p> <pre><code>deeporigin data upload /path/to/test.fasta \n</code></pre> <p>This will upload a file to the \"Staging Area\", and this file is not assigned to any database or cell. An example response is shown below:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Name             \u2502 Value                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 name             \u2502 test.fasta                   \u2502\n\u2502 contentType      \u2502 data/fasta                   \u2502\n\u2502 contentLength    \u2502 554588                       \u2502\n\u2502 id               \u2502 _file:36ufKT2Sej22coSEOizpK  \u2502\n\u2502 status           \u2502 ready                        \u2502\n\u2502 uri              \u2502 s3://foo                     \u2502\n\u2502 dateCreated      \u2502 2024-06-18T14:48:33.501Z     \u2502\n\u2502 dateUpdated      \u2502 2024-06-18T14:48:33.501Z     \u2502\n\u2502 createdByUserDrn \u2502 levins@deeporigin.com        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> JSON output with <code>--json</code> <p>JSON output can be requested by adding <code>--json</code>, and allows you to pipe out to a JSON processor like jq:</p> <pre><code>deeporigin upload /path/to/test.fasta | jq\n</code></pre> <pre><code>{\n  \"name\": \"test.fasta\",\n  \"contentType\": \"data/fasta\",\n  \"contentLength\": 554588,\n  \"id\": \"_file:36ufKT2Sej22coSEOizpK\",\n  \"status\": \"ready\",\n  \"uri\": \"s3://foo\",\n  \"dateCreated\": \"2024-06-18T14:51:43.876Z\",\n  \"dateUpdated\": \"2024-06-18T14:51:43.876Z\",\n  \"createdByUserDrn\": \"levins@deeporigin.com\"\n}\n</code></pre> <p>To upload a file and assign it to an existing cell, use:</p> <pre><code>deeporigin data upload /path/to/test.fasta \\\n    --column &lt;column_id&gt; \\\n    --database &lt;database_id&gt; \\\n    --row &lt;row_id&gt;\n</code></pre> <p>To upload a file and assign it to a column in a new row, use: </p> <pre><code>deeporigin data upload /path/to/test.fasta \\\n    --column &lt;column_id&gt; \\\n    --database &lt;database+_id&gt; \n</code></pre> <p>We can upload a file using </p> <pre><code>from deeporigin.managed_data import _api, api\n_api.upload_file(\"/path/to/file.fasta\")\n</code></pre> <p>This uploads files to the \"Staging Area\" of Deep Origin Data, and returns data that conforms to DescribeFileResponse. An example is shown below:</p> <pre><code>{\n    \"name\": \"file.fasta\",\n    \"contentType\": \"data/foo\",\n    \"contentLength\": 55454688,\n    \"id\": \"_file:6Hdhyc3t8xZ6pmyCrQy1t\",\n    \"status\": \"ready\",\n    \"uri\": \"s3://data.&lt;org-name&gt;/_file:6Hdhyc3t8xZ6pmyCrQy1t\",\n    \"dateCreated\": \"2024-06-18T14:18:37.409Z\",\n    \"dateUpdated\": \"2024-06-18T14:18:37.409Z\",\n    \"createdByUserDrn\": \"haldane@deeporigin.com\",\n}\n</code></pre> <p>To assign an uploaded file to a cell in an existing row, use the <code>assign_files_to_cell</code> function as follows:</p> <pre><code>    _api.assign_files_to_cell(\n    file_ids=[\"_file:6Hdhyc3t8xZ6pmyCrQy1t\"],\n    database_id=\"db-dna\",\n    column_id=\"base_sequence_file\",\n    row_id=\"row-id\",\n)\n</code></pre> <p>To assign an uploaded file to a cell on a new row, use the <code>assign_files_to_cell</code> function as follows:</p> <pre><code>    _api.assign_files_to_cell(\n    file_ids=[\"_file:6Hdhyc3t8xZ6pmyCrQy1t\"],\n    database_id=\"db-dna\",\n    column_id=\"base_sequence_file\",\n)\n</code></pre>"},{"location":"how-to/managed-data/write-data.html","title":"Write data","text":"<p>This page describes how to write data to Deep Origin Data.</p>"},{"location":"how-to/managed-data/write-data.html#write-data-to-a-cell-in-a-database","title":"Write data to a cell in a database","text":""},{"location":"how-to/managed-data/write-data.html#write-text-data","title":"Write text data","text":"<p>We can write a string to a cell in a database that is of type <code>text</code> using:</p> CLIPython Client <pre><code>deeporigin data write \"some-string\" \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.managed_data import api\napi.set_cell_data(\n    \"some string\",\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre>"},{"location":"how-to/managed-data/write-data.html#write-numeric-data","title":"Write numeric data","text":"<p>We can write a number to a cell in a database that is of type <code>integer</code> or type <code>float</code> using:</p> CLIPython Client <pre><code>deeporigin data write 123 \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.managed_data import api\napi.set_cell_data(\n    1,\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre> <p>Numeric data will be coerced to the data type of the underlying cell. </p>"},{"location":"how-to/managed-data/write-data.html#write-select-data","title":"Write Select data","text":"<p>This section describes how to write data to a cell in a database that is of type <code>select</code>. This includes cells where a single option can be selected from a list, and cells where more than one value can be selected from a list of options.</p> CLIPython Client <pre><code>deeporigin data write \"option A\" \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <p>We can write a number to a cell in a database that is of type <code>integer</code> or type <code>float</code> using </p> <pre><code>from deeporigin.managed_data import api\napi.set_cell_data(\n    \"option A\",\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre> <p>The value must be one of the options in the list. If it is not, an error will be raised showing the list of legal options.</p>"},{"location":"how-to/managed-data/write-data.html#write-boolean-data","title":"Write Boolean data","text":"<p>We can write a Boolean value to a cell in a database that is of type <code>boolean</code> using:</p> CLIPython Client <pre><code>deeporigin data write \"option A\" \\\n    --database $database_id \\\n    --column $column_id \\\n    --row $row_id\n</code></pre> <pre><code>from deeporigin.managed_data import api\napi.set_cell_data(\n    True,\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre> Unsetting Boolean data <p>To unset a cell, so that it contains no data, write <code>None</code> to the cell as follows: </p> <pre><code>from deeporigin.managed_data import api\napi.set_cell_data(\n    None,\n    database_id=\"database ID or name\",\n    column_id=\"column ID or programmatic key\",\n    row_id=\"row ID\",\n)\n</code></pre>"},{"location":"ref/managed-data/high-level-api.html","title":"API reference: High-level API","text":"<p>How to use this reference</p> <p>This page contains information about each class and function in this module. This is meant as a detailed reference for this module. If you're looking an introduction, we recommend reviewing the How to section.</p> <p>The <code>deeporigin.managed_data.api</code> module contains high-level functions for interacting with Deep Origin managed data.</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.assign_files_to_cell","title":"assign_files_to_cell","text":"<pre><code>assign_files_to_cell(\n    *,\n    file_ids: list[str],\n    database_id: str,\n    column_id: str,\n    row_id: Optional[str] = None,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Assign existing file(s) to a cell</p> <p>Assign files to a cell in a database table, where the cell is identified by the database ID, row ID, and column ID. If row_id is None, a new row will be created.</p> <p>Args: file_id: ID of the file column_id: ID of the column row_id: ID of the row</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.download","title":"download","text":"<pre><code>download(\n    source: str,\n    destination: str,\n    *,\n    include_files: bool = False,\n    client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Download resources from Deep Origin and save them to a local destination.</p> <p>Download databases, objects and other entities from Deep Origin managed data and save them to local disk.</p> Work in progress <p>All features in this function have not been implemented yet.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>ID (or human ID) of a resource on Deep Origin.</p> required <code>destination</code> <code>str</code> <p>Path to local directory to save resources.</p> required <code>include_files</code> <code>bool</code> <p>if <code>True</code>, download files in database.</p> <code>False</code>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.download_database","title":"download_database","text":"<pre><code>download_database(\n    source: Union[str, dict],\n    destination: str = os.getcwd(),\n    *,\n    include_files: bool = False,\n    client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Download a database and save it to a CSV file on the local disk.</p> <p>Download a database from Deep Origin managed data and save to local disk as a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Union[str, dict]</code> <p>ID (or human ID) of a resource on Deep Origin.</p> required <code>destination</code> <code>str</code> <p>Path to local directory to save resources.</p> <code>getcwd()</code> <code>include_files</code> <code>bool</code> <p>if <code>True</code>, download files in database.</p> <code>False</code>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_cell_data","title":"get_cell_data","text":"<pre><code>get_cell_data(\n    *,\n    row_id: str,\n    column_name: str,\n    client: Optional[Client] = None\n) -&gt; Any\n</code></pre> <p>Extract data from a cell in a database, referenced by <code>row_id</code> and <code>column_name</code>.</p> <p>Returns the value in a single cell in a database.</p> Caution <p>This function internally calls get_row_data, so it is not efficient to write a loop to get all values of cells from a row. It will be faster to call get_row_data directly.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row.</p> required <code>column_name</code> <code>str</code> <p>Name of column.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Value of that cell.</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_columns","title":"get_columns","text":"<pre><code>get_columns(\n    row_id: str, *, client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Get information about the columns of a row or database.</p> <p>If <code>row_id</code> is a database, then column metadata and names are returned. If <code>row_id</code> is a row, then a dictionary of human IDs and values are returned.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row or database on Deep Origin.</p> required"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_dataframe","title":"get_dataframe","text":"<pre><code>get_dataframe(\n    database_id: str,\n    *,\n    use_file_names: bool = True,\n    reference_format: IDFormat = \"human-id\",\n    return_type: DatabaseReturnType = \"dataframe\",\n    client: Optional[Client] = None\n)\n</code></pre> <p>Generate a <code>pandas.DataFrame</code> or dictionary for a database.</p> <p>Download a database from Deep Origin managed data and return it as a data frame or dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database on Deep Origin.</p> required <code>use_file_names</code> <code>bool</code> <p>If <code>True</code>, refer to files by name rather than ID.</p> <code>True</code> <code>reference_format</code> <code>IDFormat</code> <p>Refer to rows on Deep Origin using human IDs or system IDs.</p> <code>'human-id'</code> <code>return_type</code> <code>DatabaseReturnType</code> <p>Whether to return a <code>pandas.Dataframe</code> or a dictionary.</p> <code>'dataframe'</code>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_row_data","title":"get_row_data","text":"<pre><code>get_row_data(\n    row_id: str,\n    *,\n    use_column_keys: bool = False,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Get the data in a row.</p> <p>Read data from a row, and return it as a dictionary, where the keys are column names (or keys), and the values are the values of those cells.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of a row or database on Deep Origin.</p> required <code>use_column_keys</code> <code>bool</code> <p>if <code>True</code>, keys of dictionary are column keys.</p> <code>False</code> <p>Raises:</p> Type Description <code>DeepOriginException</code> <p>If row_id is not a row</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.get_tree","title":"get_tree","text":"<pre><code>get_tree(\n    *,\n    include_rows: bool = True,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Construct a tree of all workspaces, databases and rows.</p> <p>Returns a tree that contains all workspaces, databases and (optionally) rows. The tree is returned as a dictionary, and children of each object are contained in a field called <code>children</code>.</p> <p>Parameters:</p> Name Type Description Default <code>include_rows</code> <code>bool</code> <p>If <code>True</code>, rows are included in the tree.</p> <code>True</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>A dictionary describing the tree structure of all workspaces</p> <code>list[dict]</code> <p>and databases.</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.make_database_rows","title":"make_database_rows","text":"<pre><code>make_database_rows(\n    database_id: str,\n    n_rows: int = 1,\n    client: Optional[Client] = None,\n) -&gt; dict\n</code></pre> <p>Makes one or several new row(s) in a Database table</p> <p>This wraps the <code>EnsureRows</code> endpoint and sends a payload designed to create new row(s) in a database table.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID or Human ID of the database</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a EnsureRowsResponse</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.merge_databases","title":"merge_databases","text":"<pre><code>merge_databases(dfs: list)\n</code></pre> <p>Merge dataframes for multiple databases into a single dataframes.</p> <p>Given a list of dataframes derived from Deep Origin databases, merge them into a single dataframe, resolving cross-references across the databases.</p> Work in progress <p>All features in this function have not been implemented yet.</p> <p>Parameters:</p> Name Type Description Default <code>dfs</code> <code>list</code> <p>List of <code>pandas.DataFrames</code>.</p> required"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.set_cell_data","title":"set_cell_data","text":"<pre><code>set_cell_data(\n    value: Any,\n    *,\n    database_id: str,\n    row_id: str,\n    column_id: str,\n    client: Optional[Client] = None\n) -&gt; Any\n</code></pre> <p>set data in a cell to some value.</p> <p>uses the EnsureRows API endpoint</p>"},{"location":"ref/managed-data/high-level-api.html#src.managed_data.api.upload_file_to_new_database_row","title":"upload_file_to_new_database_row","text":"<pre><code>upload_file_to_new_database_row(\n    *,\n    database_id: str,\n    file_path: str,\n    column_id: str,\n    client: Optional[Client] = None\n)\n</code></pre> <p>Upload a file to a new row in a database.</p> <p>Upload a file to a new row in a database. This utility function wraps two level functions:</p> <pre><code>- [upload_file][src.managed_data.api.upload_file]\n- [assign_files_to_cell][src.managed_data.api.assign_files_to_cell]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of a database.</p> required <code>file_path</code> <code>str</code> <p>Path to the file to upload.</p> required <code>column_id</code> <code>str</code> <p>ID (or human ID) of a column in the database.</p> required"},{"location":"ref/managed-data/low-level-api.html","title":"API reference: Low-level API","text":"<p>How to use this reference</p> <p>This page contains information about each class and function in our low-level API. This is meant as a detailed reference for this module. If you're looking an introduction, we recommend reviewing the How to section.</p> <p>The <code>deeporigin.managed_data._api</code> module contains low-level functions for interacting with Deep Origin's managed data API. The functions in this module simply provide Pythonic interfaces to individual API endpoints.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.add_database_column","title":"add_database_column","text":"<pre><code>add_database_column(\n    *,\n    database_id: str,\n    name: str,\n    type: DataType,\n    key: Optional[str] = None,\n    cardinality: Cardinality = \"one\",\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>AddDatabaseColumn</code> endpoint.</p> <p>Adds a new column to a database.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID of the database.</p> required <code>name</code> <code>str</code> <p>Name of the column.</p> required <code>type</code> <code>DataType</code> <p>Type of the column.</p> required <code>key</code> <code>Optional[str]</code> <p>Key of the column.</p> <code>None</code> <code>cardinality</code> <code>Cardinality</code> <p>Cardinality of the column.</p> <code>'one'</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a AddDatabaseColumnResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.convert_id_format","title":"convert_id_format","text":"<pre><code>convert_id_format(\n    *,\n    hids: Optional[Union[list[str], set[str]]] = None,\n    ids: Optional[Union[list[str], set[str]]] = None,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Convert a list of human IDs to IDs or vice versa.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.create_database","title":"create_database","text":"<pre><code>create_database(\n    *,\n    name: str,\n    hid_prefix: str,\n    hid: Optional[str] = None,\n    parent_id: Optional[str] = None,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>CreateDatabase</code> endpoint.</p> <p>Creates a new database within a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>hid</code> <code>Optional[str]</code> <p>Human ID of the database.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the database.</p> required <code>parent_id</code> <code>Optional[str]</code> <p>ID of the parent workspace.</p> <code>None</code> <code>hid_prefix</code> <code>str</code> <p>Human ID prefix of the database. This prefix is used in every row.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a CreateDatabaseResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.create_file_download_url","title":"create_file_download_url","text":"<pre><code>create_file_download_url(\n    file_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>CreateFileDownloadUrl</code> endpoint.</p> <p>Returns a pre-signed URL that allows you to download a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>ID of file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a field <code>downloadUrl</code>, that</p> <code>dict</code> <p>contains a AWS pre-signed URL.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.create_file_upload_url","title":"create_file_upload_url","text":"<pre><code>create_file_upload_url(\n    *,\n    name: str,\n    content_type: str,\n    content_length: int,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>low level function that wraps the <code>CreateFileUpload</code> endpoint.</p> <p>Creates a new file upload URL.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the file</p> required <code>content_type</code> <code>str</code> <p>Content type of the file</p> required <code>content_length</code> <code>int</code> <p>Content length of the file</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a CreateFileUploadResponse</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.create_workspace","title":"create_workspace","text":"<pre><code>create_workspace(\n    *,\n    name: str,\n    hid: Optional[str] = None,\n    parent_id: Optional[str] = None,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>CreateWorkspace</code> endpoint.</p> <p>Creates a new workspace at the root level or within another workspace.</p> <p>Parameters:</p> Name Type Description Default <code>hid</code> <code>Optional[str]</code> <p>Human ID of the workspace.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the workspace.</p> required <code>parent_id</code> <code>Optional[str]</code> <p>ID (or human ID) of the parent.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a CreateWorkspaceResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.delete_database_column","title":"delete_database_column","text":"<pre><code>delete_database_column(\n    column_id: str, *, client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Low level function that wraps the <code>DeleteDatabaseColumn</code> endpoint.</p> <p>Deletes a column from a database.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>ID of the column.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.delete_rows","title":"delete_rows","text":"<pre><code>delete_rows(\n    row_ids: list[str], *, client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Low level function that wraps the <code>DeleteRows</code> endpoint.</p> <p>Deletes rows, workspaces, or databases.</p> <p>Parameters:</p> Name Type Description Default <code>row_ids</code> <code>list[str]</code> <p>A list of (system) row IDs</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.describe_database_stats","title":"describe_database_stats","text":"<pre><code>describe_database_stats(\n    database_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>DescribeDatabaseStats</code> endpoint.</p> <p>Returns a dictionary of statistics about a database.</p> <p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>str</code> <p>ID (or human ID) of the database.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains statistics about the database.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.describe_file","title":"describe_file","text":"<pre><code>describe_file(\n    file_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>DescribeFile</code> endpoint.</p> <p>Returns a description of file, including S3 URI, name, status, content length, and type.</p> <p>Parameters:</p> Name Type Description Default <code>file_id</code> <code>str</code> <p>ID of file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a file description, that conforms to DescribeFileResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.describe_row","title":"describe_row","text":"<pre><code>describe_row(\n    row_id: str,\n    *,\n    fields: bool = False,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>DescribeRow</code> endpoint.</p> <p>Returns a description of a row or a database</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID or (human ID) or row or database.</p> required <code>fields</code> <code>bool</code> <p>if True, a fields item is returned in the response.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a row description, that</p> <code>dict</code> <p>conforms to DescribeRowResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.download_file","title":"download_file","text":"<pre><code>download_file(\n    file_id: str,\n    *,\n    destination: str = os.getcwd(),\n    client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Download a file to a destination folder.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.ensure_rows","title":"ensure_rows","text":"<pre><code>ensure_rows(data: dict, *, client: Optional[Client] = None)\n</code></pre> <p>wrapper around EnsureRows endpoint</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_database_rows","title":"list_database_rows","text":"<pre><code>list_database_rows(\n    row_id: str, *, client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Low level function that wraps the <code>ListDatabaseRows</code> endpoint.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_files","title":"list_files","text":"<pre><code>list_files(\n    *,\n    assigned_row_ids: Optional[list[str]] = None,\n    is_unassigned: Optional[bool] = None,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Low level function that wraps the <code>ListFiles</code> endpoint.</p> <p>Returns a list of files from databases and rows based on row assigned to.</p> <p>Parameters:</p> Name Type Description Default <code>assigned_row_ids</code> <code>Optional[list[str]]</code> <p>ID (or human ID) or the assigned row.</p> <code>None</code> <code>is_unassigned</code> <code>Optional[bool]</code> <p>Whether file is assigned to any row.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>A list of dictionaries, where each entry corresponds to a file. Each dictionary contains a field called <code>file</code> that corresponds conforms to a DescribeFileResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_mentions","title":"list_mentions","text":"<pre><code>list_mentions(\n    query: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>ListMentions</code> endpoint.</p> <p>Returns a dictionary of mentions (cross references) of the requested object.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>ID (or human ID) of row, database, workspace, or file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a field called <code>mentions</code>, which is a list of dictionaries that each refer to a row.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_row_back_references","title":"list_row_back_references","text":"<pre><code>list_row_back_references(\n    row_id: str, *, client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>ListRowBackReferences</code> endpoint.</p> <p>Returns a dictionary of back references from the queried row.</p> <p>Parameters:</p> Name Type Description Default <code>row_id</code> <code>str</code> <p>ID (or human ID) of row.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that contains a field called <code>rows</code>, which is a list of dictionaries that each refer to a database row.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.list_rows","title":"list_rows","text":"<pre><code>list_rows(\n    *,\n    parent_id: Optional[str] = None,\n    row_type: Optional[RowType] = None,\n    parent_is_root: Optional[bool] = None,\n    client: Optional[Client] = None\n) -&gt; list[dict]\n</code></pre> <p>Low level function that wraps the <code>ListRows</code> endpoint.</p> <p>Returns a list of rows from workspaces and databases, based on the parent, row type, or whether the parent is the root.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>Optional[str]</code> <p>ID (or human ID) or the parent.</p> <code>None</code> <code>row_type</code> <code>Optional[RowType]</code> <p>One of <code>row</code>, <code>workspace</code>, or <code>database</code>.</p> <code>None</code> <code>parent_is_root</code> <code>Optional[bool]</code> <p>If <code>True</code> only rows that are children of the root will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>A list of dictionaries, where each entry corresponds to a row. Each dictionary conforms to a ListRowsResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.update_database","title":"update_database","text":"<pre><code>update_database(\n    *,\n    id: str,\n    hid_prefix: Optional[str] = None,\n    hid: Optional[str] = None,\n    name: Optional[str] = None,\n    parent_id: Optional[str] = None,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>UpdateDatabase</code> endpoint.</p> <p>Updates a database.</p> <p>Parameters:</p> Name Type Description Default <code>hid</code> <code>Optional[str]</code> <p>Human ID of the database.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Name of the database.</p> <code>None</code> <code>parent_id</code> <code>Optional[str]</code> <p>ID (or human ID) of the parent.</p> <code>None</code> <code>hid_prefix</code> <code>Optional[str]</code> <p>Human ID prefix of the database. This prefix is used in every row.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a CreateDatabaseResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.update_workspace","title":"update_workspace","text":"<pre><code>update_workspace(\n    *,\n    id: str,\n    hid: Optional[str] = None,\n    name: Optional[str] = None,\n    parent_id: Optional[str] = None,\n    client: Optional[Client] = None\n) -&gt; dict\n</code></pre> <p>Low level function that wraps the <code>UpdateWorkspace</code> endpoint.</p> <p>Updates a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>hid</code> <code>Optional[str]</code> <p>Human ID of the workspace.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>Name of the workspace.</p> <code>None</code> <code>parent_id</code> <code>Optional[str]</code> <p>ID (or human ID) of the parent.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary that conforms to a CreateWorkspaceResponse.</p>"},{"location":"ref/managed-data/low-level-api.html#src.managed_data._api.upload_file","title":"upload_file","text":"<pre><code>upload_file(\n    file_path: str, client: Optional[Client] = None\n) -&gt; None\n</code></pre> <p>Upload a file to Deep Origin.</p>"},{"location":"ref/managed-data/low-level-schema.html","title":"Low-level response schemas","text":"<p>The <code>deeporigin.managed_data.schema</code> module contains Pydantic <code>BaseModel</code>s that describe responses from Deep Origin's managed data API, and literals that describe possible values for certain queries.</p> <p>These models are used both to validate responses and to generate mock data for testing.</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DataType","title":"DataType  <code>module-attribute</code>","text":"<pre><code>DataType = Literal[\n    \"integer\",\n    \"str\",\n    \"select\",\n    \"date\",\n    \"text\",\n    \"file\",\n    \"reference\",\n    \"editor\",\n    \"float\",\n    \"boolean\",\n]\n</code></pre> <p>Type of a column</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DatabaseReturnType","title":"DatabaseReturnType  <code>module-attribute</code>","text":"<pre><code>DatabaseReturnType = Literal['dataframe', 'dict']\n</code></pre> <p>Return type of a database</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.FileStatus","title":"FileStatus  <code>module-attribute</code>","text":"<pre><code>FileStatus = Literal['ready', 'archived']\n</code></pre> <p>Status of a file</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.IDFormat","title":"IDFormat  <code>module-attribute</code>","text":"<pre><code>IDFormat = Literal['human-id', 'system-id']\n</code></pre> <p>Format of an ID</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.RowType","title":"RowType  <code>module-attribute</code>","text":"<pre><code>RowType = Literal['row', 'database', 'workspace']\n</code></pre> <p>Type of a row</p>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.AddDatabaseColumnResponse","title":"AddDatabaseColumnResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>AddDatabaseColumn</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class AddDatabaseColumnResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `AddDatabaseColumn` endpoint.\"\"\"\n\n    column: ColumnItem\n    database: dict\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.ColumnItem","title":"ColumnItem","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for items in the <code>cols</code> attribute of responses from the <code>DescribeRow</code> endpoint for a database.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class ColumnItem(BaseModel):\n    \"\"\"Schema for items in the `cols` attribute of responses\n    from the `DescribeRow` endpoint for a database.\"\"\"\n\n    id: str\n    name: str = \"Placeholder Name\"\n    key: str\n    parentId: str = \"db-placeholder-1\"\n    type: DataType = \"text\"\n    dateCreated: str = \"2024-04-04T17:03:33.033115\"\n    cardinality: Cardinality = \"one\"\n    canCreate: Optional[bool] = False\n    configSelect: Optional[dict] = None\n\n    model_config = ConfigDict(extra=\"forbid\")\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.CreateDatabaseResponse","title":"CreateDatabaseResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>CreateDatabase</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class CreateDatabaseResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `CreateDatabase` endpoint.\"\"\"\n\n    id: str\n    type: RowType = \"database\"\n    name: str\n    parentId: str = \"placeholder\"  # sometimes not returned\n    dateCreated: str\n    dateUpdated: str\n    createdByUserDrn: Optional[str]\n    hid: str\n    hidPrefix: str\n    cols: list = []\n    rowJsonSchema: dict = dict()\n\n    model_config = ConfigDict(extra=\"forbid\")\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.CreateFileUploadResponse","title":"CreateFileUploadResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>schema for responses to the <code>CreateFileUpload</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class CreateFileUploadResponse(BaseModel):\n    \"\"\"schema for responses to the `CreateFileUpload` endpoint.\"\"\"\n\n    uploadUrl: str\n    file: DescribeFileResponse\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.CreateWorkspaceResponse","title":"CreateWorkspaceResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>CreateWorkspace</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class CreateWorkspaceResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `CreateWorkspace` endpoint.\"\"\"\n\n    id: str\n    hid: str\n    name: str\n    dateCreated: str\n    dateUpdated: str\n    createdByUserDrn: str\n    type: RowType = \"workspace\"\n    rowJsonSchema: dict = dict()\n\n    model_config = ConfigDict(extra=\"forbid\")\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeFileResponse","title":"DescribeFileResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>DescribeFile</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeFileResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `DescribeFile` endpoint.\"\"\"\n\n    id: str\n    uri: str\n    name: str = \"placeholder\"\n    status: FileStatus\n    contentLength: int\n    contentType: str\n    dateCreated: str\n    dateUpdated: str\n    createdByUserDrn: Optional[str]\n\n    model_config = ConfigDict(extra=\"forbid\")\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeRowResponse","title":"DescribeRowResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>DescribeRow</code> endpoint. This schema is complex because the response schema depends on whether <code>DescribeRow</code> is called for a row or database.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeRowResponse(BaseModel):\n    \"\"\"Schema for responses from the `DescribeRow` endpoint. This schema is complex because\n    the response schema depends on whether `DescribeRow` is called for a row or database.\"\"\"\n\n    id: str\n    hid: str\n\n    parentId: str\n    type: RowType = \"row\"\n    dateCreated: str = \"2024-04-04 16:33:58.622469\"\n    dateUpdated: str = \"2024-04-04 16:33:58.622469\"\n    createdByUserDrn: str = \"placeholder\"\n    rowJsonSchema: dict = {\"type\": \"object\", \"required\": [], \"properties\": {}}\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeRowResponseDatabase","title":"DescribeRowResponseDatabase","text":"<p>               Bases: <code>DescribeRowResponse</code></p> <p>Schema for responses for the <code>DescribeRow</code> endpoint for a database.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeRowResponseDatabase(DescribeRowResponse):\n    \"\"\"Schema for responses for the `DescribeRow` endpoint for a database.\"\"\"\n\n    cols: list\n    hidPrefix: str\n    name: str\n\n    model_config = ConfigDict(extra=\"forbid\")\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.DescribeRowResponseRow","title":"DescribeRowResponseRow","text":"<p>               Bases: <code>DescribeRowResponse</code></p> <p>Schema for responses from the <code>DescribeRow</code> endpoint for a row. This is also the schema for responses from the <code>DescribeDatabaseRows</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class DescribeRowResponseRow(DescribeRowResponse):\n    \"\"\"Schema for responses from the `DescribeRow` endpoint for a row.\n    This is also the schema for responses from the `DescribeDatabaseRows` endpoint.\"\"\"\n\n    fields: Optional[list[FieldItem]] = None\n    editedByUserDrn: str = \"placeholder\"\n    hidNum: int = 1\n    submissionStatus: str = \"draft\"\n    validationStatus: str = \"valid\"\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.FieldItem","title":"FieldItem","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for items in the <code>fields</code> attribute of responses from the <code>DescribeRow</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class FieldItem(BaseModel):\n    \"\"\"Schema for items in the `fields` attribute of\n    responses from the `DescribeRow` endpoint.\"\"\"\n\n    columnId: str\n    cellId: str\n    validationStatus: str = \"valid\"\n    type: DataType = \"text\"\n    value: Union[str, dict, int, float] = \"placeholder-text\"\n    systemType: Optional[str] = None\n</code></pre>"},{"location":"ref/managed-data/low-level-schema.html#src.managed_data.schema.ListRowsResponse","title":"ListRowsResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for responses from the <code>ListRows</code> endpoint.</p> Source code in <code>src/managed_data/schema.py</code> <pre><code>class ListRowsResponse(BaseModel):\n    \"\"\"Schema for responses from the\n    `ListRows` endpoint.\"\"\"\n\n    id: str\n    parentId: Optional[str]\n    hid: str\n    name: Optional[str] = \"placeholder\"\n    type: RowType\n\n    model_config = ConfigDict(extra=\"forbid\")\n</code></pre>"}]}